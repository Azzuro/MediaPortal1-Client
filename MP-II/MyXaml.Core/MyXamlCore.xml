<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyXaml.Core</name>
    </assembly>
    <members>
        <member name="T:MyXaml.Core.Break">
            <summary>
            Diagnostic class that can be inserted in the markup to force the debugger
            to break.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Break.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:MyXaml.Core.Exceptions.MyXamlException">
            <summary>
            Base class for all MyXaml exceptions.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.MyXamlException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.AutoInitializeException">
            <summary>
            Thrown when errors occur assigning to auto-initialize fields.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.AutoInitializeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.NoReferenceException">
            <summary>
            Thrown when the reference list does not contain the specified reference.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.NoReferenceException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ImproperComplexReferenceException">
            <summary>
            Thrown when the object graph for the reference cannot be resolved.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ImproperComplexReferenceException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.MarkupException">
            <summary>
            Thrown on markup errors.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.MarkupException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ReferenceExistsException">
            <summary>
            Thrown when adding an existing reference.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ReferenceExistsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.MissingGraphException">
            <summary>
            Thrown when there are no children to the xml document.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.MissingGraphException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.GraphNotFoundException">
            <summary>
            Thrown when the specified tag name cannot be found in the document child collection.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.GraphNotFoundException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.MissingAssemblyException">
            <summary>
            Thrown when an assembly cannot be resolved.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.MissingAssemblyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ImproperNamespaceFormatException">
            <summary>
            Thrown when the namespace is malformed.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ImproperNamespaceFormatException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.UnknownTypeException">
            <summary>
            Thrown when a type cannot be resolved.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.UnknownTypeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.InstantiationException">
            <summary>
            Thrown when an instantiation error occurs (usually, no default constructor).
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.InstantiationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.UnknownPropertyException">
            <summary>
            Thrown when an attribute does not correspond to a property in the instance.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.UnknownPropertyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ReadOnlyInstanceNullException">
            <summary>
            Thrown when a read-only property returns a null.  The property cannot be used
            as a reference to further objects in the graph.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ReadOnlyInstanceNullException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ReferencedEventMissingHandlerException">
            <summary>
            Thrown when the referenced class is missing the handler method.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ReferencedEventMissingHandlerException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.EventWireUpException">
            <summary>
            Thrown when wiring up an event fails.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.EventWireUpException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ForwardReferenceException">
            <summary>
            Thrown when a forward reference is not allowed.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ForwardReferenceException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ArrayConversionException">
            <summary>
            Thrown when type conversion fails during array population.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ArrayConversionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.TypeAssignmentException">
            <summary>
            Thrown when assignment to a property of Type fails.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.TypeAssignmentException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ExtenderProviderException">
            <summary>
            Thrown when the IExtenderProvider cannot extend the object.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ExtenderProviderException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ChildTypeNotPropertyTypeException">
            <summary>
            Thrown the child is not of the same type as the property of the parent.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ChildTypeNotPropertyTypeException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ExpectedSingleChildException">
            <summary>
            Thrown when more than one child is attempted to assign to the parent property,
            and the parent property is not a collection.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ExpectedSingleChildException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.AddingToIListException">
            <summary>
            Thrown when adding to an IList instance fails.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.AddingToIListException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.PropertyConversionException">
            <summary>
            Thrown when a property conversion fails.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.PropertyConversionException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.AmbiguousPropertyException">
            <summary>
            Thrown when a property name has been redeclared with a 'new' in a derived class.
            Use _ReturnType to specify the desired property based on return type.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.AmbiguousPropertyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.AmbiguousFieldException">
            <summary>
            Thrown when a field name has been redeclared with a 'new' in a derived class.
            Use _ReturnType to specify the desired field based on return type.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.AmbiguousFieldException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ExtenderClassNotFoundException">
            <summary>
            Thrown when the extender class cannot be found.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ExtenderClassNotFoundException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:MyXaml.Core.Exceptions.ExtenderActivationException">
            <summary>
            Thrown when the extender cannot be instantiated.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Exceptions.ExtenderActivationException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="msg">The error message.</param>
        </member>
        <member name="T:Clifton.Tools.Strings.StringHelpers">
            <summary>
            Helpers for string manipulation.
            </summary>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.LeftOf(System.String,System.Char)">
            <summary>
            Left of the first occurance of c
            </summary>
            <param name="src">The source string.</param>
            <param name="c">Return everything to the left of this character.</param>
            <returns>String to the left of c, or the entire string.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.LeftOf(System.String,System.Char,System.Int32)">
            <summary>
            Left of the n'th occurance of c.
            </summary>
            <param name="src">The source string.</param>
            <param name="c">Return everything to the left n'th occurance of this character.</param>
            <param name="n">The occurance.</param>
            <returns>String to the left of c, or the entire string if not found or n is 0.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.RightOf(System.String,System.Char)">
            <summary>
            Right of the first occurance of c
            </summary>
            <param name="src">The source string.</param>
            <param name="c">The search char.</param>
            <returns>Returns everything to the right of c, or an empty string if c is not found.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.RightOf(System.String,System.Char,System.Int32)">
            <summary>
            Right of the n'th occurance of c
            </summary>
            <param name="src">The source string.</param>
            <param name="c">The search char.</param>
            <param name="n">The occurance.</param>
            <returns>Returns everything to the right of c, or an empty string if c is not found.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.LeftOfRightmostOf(System.String,System.Char)">
            <summary>
            Returns everything to the left of the righmost char c.
            </summary>
            <param name="src">The source string.</param>
            <param name="c">The search char.</param>
            <returns>Everything to the left of the rightmost char c, or the entire string.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.RightOfRightmostOf(System.String,System.Char)">
            <summary>
            Returns everything to the right of the rightmost char c.
            </summary>
            <param name="src">The source string.</param>
            <param name="c">The seach char.</param>
            <returns>Returns everything to the right of the rightmost search char, or an empty string.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.Between(System.String,System.Char,System.Char)">
            <summary>
            Returns everything between the start and end chars, exclusive.
            </summary>
            <param name="src">The source string.</param>
            <param name="start">The first char to find.</param>
            <param name="end">The end char to find.</param>
            <returns>The string between the start and stop chars, or an empty string if not found.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.Count(System.String,System.Char)">
            <summary>
            Returns the number of occurances of "find".
            </summary>
            <param name="src">The source string.</param>
            <param name="find">The search char.</param>
            <returns>The # of times the char occurs in the search string.</returns>
        </member>
        <member name="M:Clifton.Tools.Strings.StringHelpers.Rightmost(System.String)">
            <summary>
            Returns the rightmost char in src.
            </summary>
            <param name="src">The source string.</param>
            <returns>The rightmost char, or '\0' if the source has zero length.</returns>
        </member>
        <member name="T:MyXaml.Core.InstantiateEventArgs">
            <summary>
            Defines the event args for the InstantiateBegin and InstantiateEnd events.
            </summary>
        </member>
        <member name="F:MyXaml.Core.InstantiateEventArgs.instance">
            <summary>
            The instance being instantiated.
            </summary>
        </member>
        <member name="M:MyXaml.Core.InstantiateEventArgs.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">The instance being instantiated.</param>
        </member>
        <member name="P:MyXaml.Core.InstantiateEventArgs.Instance">
            <summary>
            Gets the instance being instantiated.
            </summary>
        </member>
        <member name="T:MyXaml.Core.AddToCollectionEventArgs">
            <summary>
            Defines the event args for the AddToCollection event.
            </summary>
        </member>
        <member name="F:MyXaml.Core.AddToCollectionEventArgs.container">
            <summary>
            The container object implementing ICollection.
            </summary>
        </member>
        <member name="F:MyXaml.Core.AddToCollectionEventArgs.instance">
            <summary>
            The instance being added to the collection.
            </summary>
        </member>
        <member name="F:MyXaml.Core.AddToCollectionEventArgs.result">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="M:MyXaml.Core.AddToCollectionEventArgs.#ctor(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Constructor.
            </summary>
            <param name="container">The ICollection implementer.</param>
            <param name="instance">The instance to add to the collection.</param>
        </member>
        <member name="P:MyXaml.Core.AddToCollectionEventArgs.Container">
            <summary>
            Gets the container object implementing ICollection.
            </summary>
        </member>
        <member name="P:MyXaml.Core.AddToCollectionEventArgs.Instance">
            <summary>
            Get the instance to be added to the collection.
            </summary>
        </member>
        <member name="P:MyXaml.Core.AddToCollectionEventArgs.Result">
            <summary>
            Get/set the result.  True if adding to the collection succeeded.
            </summary>
        </member>
        <member name="P:MyXaml.Core.AddToCollectionEventArgs.Node">
            <summary>
            Gets/sets Node
            </summary>
        </member>
        <member name="T:MyXaml.Core.Parser">
            <summary>
            The MyXaml object graph parser;
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.xmlDocument">
            <summary>
            The document being processed.
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.prefixToNamespaceMap">
            <summary>
            Maintains the mapping of xml prefixes to namespaces.
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.nameToInstanceMap">
            <summary>
            Maintains the mapping of names and the class instance associated with
            the name.
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.lateBindings">
            <summary>
            The list of properties that could not be bound to referenced instances
            during the first pass of the parser.
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.objectStack">
            <summary>
            The stack maintained during object graph instantiation.
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.extenders">
            <summary>
            Implements a static list of extender Types.
            </summary>
        </member>
        <member name="F:MyXaml.Core.Parser.extenderInstances">
            <summary>
            Manages the extender instances.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Parser.#ctor">
            <summary>
            The object graph parser.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Parser.AddExtender(System.String,System.String,System.String)">
            <summary>
            Adds an extender in the specified assembly.
            </summary>
            <param name="assemblyName">The assembly implementing the extender.</param>
            <param name="namespaceName">The namespace containing the extender.</param>
            <param name="className">The extender class that implements IMyXamlExtender.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.Dispose">
            <summary>
            Disposes of the parser.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Parser.CopyReferencesFrom(MyXaml.Core.Parser)">
            <summary>
            Copies the references from another parser to this parser.
            </summary>
            <param name="p">The source parser.</param>
            <exception cref="T:System.ArgumentException">Thrown when source parser is null.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.AddReference(System.String,System.Object)">
            <summary>
            Adds a named reference.
            </summary>
            <param name="name">The reference name.</param>
            <param name="reference">The reference instance.</param>
            <exception cref="T:System.ArgumentException">Thrown when name is null.</exception>
            <exception cref="T:MyXaml.Core.Exceptions.ReferenceExistsException">Thrown when the name already exists in the collection.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.UpdateReference(System.String,System.Object)">
            <summary>
            Updates an existing reference to the reference collection.
            </summary>
            <param name="name">The reference name.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.RemoveReference(System.String)">
            <summary>
            Removes a named reference.
            </summary>
            <param name="name">The reference name.</param>
            <exception cref="T:System.ArgumentException">Thrown when name is null.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.ContainsReference(System.String)">
            <summary>
            Tests if the named reference exists in the reference collection.
            </summary>
            <param name="name">The reference name.</param>
            <returns>True if the reference exists.</returns>
            <exception cref="T:System.ArgumentException">Thrown when name is null.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.GetReference(System.String)">
            <summary>
            Gets the instance associated with the reference name.
            </summary>
            <param name="name">The reference name.</param>
            <returns>The instance.</returns>
            <exception cref="T:System.ArgumentException">Thrown when name is null.</exception>
            <exception cref="T:MyXaml.Core.Exceptions.NoReferenceException">Thrown when the named reference does not exist.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.ResolveValue(System.String)">
            <summary>
            Gets the property value of an instance.  This method traverses the
            properties/fields of the instance and child instances, returning the value
            associated with the final property or field.
            </summary>
            <param name="refName">The reference name.</param>
            <returns>The value of the reference or the property/field of the complex reference.</returns>
            <exception cref="T:MyXaml.Core.Exceptions.NoReferenceException">Thrown when the named reference does not exist.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.InitializeFields(System.Object,System.Boolean)">
            <summary>
            Searches the supplied target instance for MyXamlAutoInitialize attributes
            applied to fields in that target.  If found, the field is initialized
            with the value found in the reference collection, if it exists.
            </summary>
            <param name="target">The target instance whose fields will be searched.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.Instantiate(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates the object graph from a file and the specified starting
            root child tag.  See XmlDocument.Load for exceptions that may be thrown.
            </summary>
            <param name="filename">The MyXaml file.</param>
            <param name="tagName">The root child tag to instantiate, or "*" for the
            first root child encountered.</param>
            <param name="ignoreMissingFields">Ignores missing fields in the target during InitializeFields call.</param>
            <returns>The instance of the topmost object in the graph.</returns>
            <exception cref="T:System.ArgumentException">Thrown when filename or tagName is null.</exception>
            <exception cref="T:MyXaml.Core.Exceptions.UnknownTypeException">Thrown when there is no corresponding type to instantiate.</exception>
            <exception cref="T:MyXaml.Core.Exceptions.InstantiationException">Thrown when a class cannot be instantiated (no default constructor).</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.InstantiateFromString(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates the object graph from an xml string and the specified starting
            root child tag.  See XmlDocument.LoadXml for exceptions that may be thrown.
            </summary>
            <param name="xml">The xml string.</param>
            <param name="tagName">The root child tag to instantiate, or "*" for the
            first root child encountered.</param>
            <returns>The instance of the topmost object in the graph.</returns>
            <exception cref="T:System.Xml.XmlException">Thrown when an error exists in the xml.</exception>
            <exception cref="T:System.ArgumentException">Thrown when xml or tagName is null.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.Instantiate(System.Xml.XmlDocument,System.String,System.Boolean)">
            <summary>
            Instantiate the object graph given the XmlDocument.
            </summary>
            <param name="doc">The XmlDocument instance.</param>
            <param name="tagName">The tag for the desired xml root child that 
            specifies the object graph to instantiate.</param>
            <returns>The instance of the topmost object in the graph.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.InitializeNamespaceList">
            <summary>
            Initialize the prefix to namespace map by scanning and parsing
            the xmlns attributes on the root element.
            </summary>
        </member>
        <member name="M:MyXaml.Core.Parser.GetFullName(System.String)">
            <summary>
            Gets the assembly qualified name for a namespace.  The namespace may
            be of the short form, only the namespace name, a medium format, which
            specifies both the namespace and assembly name, and a long format, in
            which culture, version, and public key token are also provided.
            </summary>
            <param name="name">The namespace.</param>
            <returns>The assembly qualified name for the namespace.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.Namespace(System.String)">
            <summary>
            Get the fully qualified namespace given the prefix.  This method is
            guaranteed to succeed because the xml parser will have detected prefixes
            that do not have a namespace definition.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns>The fully qualified namespace.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.InstantiateRoot(System.String,System.Xml.XmlNode@)">
            <summary>
            Instantiate the top class in the object graph.
            </summary>
            <param name="tagName">The tag name with a corresponding Name attribute
            in the xml.</param>
            <param name="objectNode">The XmlNode describing the object graph root.</param>
            <returns>The object graph root instance.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.InstantiateChildren(System.Object,System.Xml.XmlNode)">
            <summary>
            Instantiates all the children in the root of the object graph.
            </summary>
            <param name="instance">The root instance.</param>
            <param name="node">The root XmlNode.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.ProcessInstance(System.Object,System.Xml.XmlNode,System.Boolean,System.String,System.Boolean,System.Xml.XmlAttribute)">
            <summary>
            Process the current instance--it's child collections, it's attributes.
            </summary>
            <param name="instance">The class instance</param>
            <param name="element">The XmlNode describing this instance and its attributes</param>
            <param name="isPropertyDeclaration">Flag indicating that the node is a property declaration rather than an instance.</param>
            <param name="propertyName">The name of the property if the node is a property declaration.</param>
            <param name="attributesProcessed">Flag indicating that attributes have been processed (for structs).</param>
            <param name="returnType">The _ReturnType XmlAttribute, or none if this attribute does not exist for the element.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.ProcessCollections(System.Object,System.Xml.XmlNode)">
            <summary>
            Process the instance's child elements.
            </summary>
            <param name="classInstance">The current instance.</param>
            <param name="element">The node associated with the instance.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.ProcessElement(System.Object,System.Xml.XmlNode)">
            <summary>
            Process the child element of the supplied instance.  Compound property
            notation is not supported.
            </summary>
            <param name="classInstance">The parent instance.</param>
            <param name="element">The XmlNode element.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.InstantiateClass(System.Object,System.Xml.XmlNode)">
            <summary>
            Instantiates a class from information in the XmlElement.
            </summary>
            <param name="parent">The control's parent.</param>
            <param name="element">The element defining the control.</param>
            <returns>The instantiated control.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.InstantiateClass(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Instantiate a control given the namespace and control name.
            </summary>
            <param name="nameSpace">The namespace in which the class resides.</param>
            <param name="name">The class name.</param>
            <param name="element">The current XmlNode.</param>
            <returns>The instantiated control.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.NameMangler(System.String)">
            <summary>
            Replaces "." chars with "+" chars to handle inner class syntax.
            </summary>
            <param name="name">The class name.</param>
            <returns>The class name in which dotted notation has been replaced with the notation
            required to resolve inner class types.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.InstantiateClass(System.String)">
            <summary>
            Instantiates a class given the fully qualified name.
            </summary>
            <param name="qualifiedName">The fully qualified name.</param>
            <returns>The class instance.</returns>
            <exception cref="T:MyXaml.Core.Exceptions.UnknownTypeException">Thrown when the type cannot be found.</exception>
            <exception cref="T:MyXaml.Core.Exceptions.InstantiationException">Thrown when the class cannot be instantiated,
            usually due to lack of default constructor support.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.ProcessAttributes(System.Object,System.Xml.XmlNode)">
            <summary>
            Process the attribute collection of the node defining the form, control, or object added to a collection.
            </summary>
            <param name="obj">The object whose properties we are setting.</param>
            <param name="element">The element whose attributes we are going to process.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.SetText(System.Object,System.Xml.XmlNode)">
            <summary>
            If the node has inner text, set the Text property of the instance.
            </summary>
            <param name="classInstance">The instance.</param>
            <param name="element">The associated XmlNode.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.SetPropertyValue(System.Object,System.String,System.String,System.Object,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Sets the value of an instance's property.
            </summary>
            <param name="obj"></param>
            <param name="elementName"></param>
            <param name="propertyName"></param>
            <param name="val"></param>
            <param name="node"></param>
            <param name="isAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MyXaml.Core.Parser.SetPropertyValue(System.Object,System.String,System.String,System.Object,System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Set's the value of an instance's property.
            </summary>
            <param name="obj"></param>
            <param name="elementName"></param>
            <param name="propertyName"></param>
            <param name="val"></param>
            <param name="element"></param>
            <param name="node"></param>
            <param name="isAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:MyXaml.Core.Parser.SetPropertyValue(System.Object,System.String,System.String,System.Object,System.Object@,System.Xml.XmlNode,System.Xml.XmlNode,System.Boolean,System.Boolean@,System.Boolean@,System.Boolean@,System.Xml.XmlAttribute@)">
            <summary>
            Set's the value of an instance's property.
            </summary>
            <param name="obj">The current instance.</param>
            <param name="elementName">The element name.</param>
            <param name="propertyName">The property name.</param>
            <param name="val">The property value.</param>
            <param name="propertyObject">A property instance, if the property is a class.</param>
            <param name="element">The XmlNode element.</param>
            <param name="node">THe XmlNode of the node.</param>
            <param name="isAttribute">Flag indicating that the property is an attribute.</param>
            <param name="isPropertyDeclaration">Flag indicating that the property is a property declaration in the xml.</param>
            <param name="isArray">Flag indicating that the instance is an array.</param>
            <param name="attributesProcessed">Flag indicating that the instance is a struct.</param>
            <param name="returnType">The property return type, if any.</param>
            <returns>True if the value was successfully assigned to the instance.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.TestForCollection(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Adds the instance to the an object implementing IList.  If the object
            implements ICollection, then the AddToCollection event is raised.
            </summary>
            <param name="obj">The IList or ICollection instance.</param>
            <param name="classInstance">The instance to add to the collection.</param>
            <returns></returns>
        </member>
        <member name="M:MyXaml.Core.Parser.SetEvent(System.Object,System.String,System.String)">
            <summary>
            Wire's up the even to the specified handler.
            </summary>
            <param name="obj">The instance containing the event.</param>
            <param name="propertyName">The event.</param>
            <param name="val">The handler.</param>
            <returns>True if wireup succeeded.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.GetPropertyInfo(System.Object,System.String)">
            <summary>
            Get the PropertyInfo instance for the supplied object and property name.
            </summary>
            <param name="obj">The object on which we want to find the named property.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>The PropertyInfo instance or null.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.GetFieldInfo(System.Object,System.String)">
            <summary>
            Get the FieldInfo instance for the supplied object and property name.
            </summary>
            <param name="obj">The object on which we want to find the named field.</param>
            <param name="propertyName">The name of the field.</param>
            <returns>The FieldInfo instance or null.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.GetFieldInfos(System.Type)">
            <summary>
            Get all the fieldinfo's of a certain type. The derived one's are also added in this list
            </summary>
            <param name="objectType">The type for which to get the fields</param>
            <returns>An array with FieldInfo objects</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.GetPropertyInfo(System.Object,System.String,System.Type)">
            <summary>
            Get's the property information for the supplied property and return type.
            </summary>
            <param name="obj">The instance.</param>
            <param name="propertyName">The instance's property.</param>
            <param name="retType">The return type.</param>
            <returns>The PropertyInfo object.</returns>
            <exception cref="T:MyXaml.Core.Exceptions.AmbiguousPropertyException">Thrown when the property cannot be resolved.</exception>
        </member>
        <member name="M:MyXaml.Core.Parser.FindHandlerForTarget(System.Object,System.Reflection.EventInfo,System.String)">
            <summary>
            Search the event target for a delegate that matches the required signature
            for the specified method name.
            </summary>
            <param name="eventTarget">The event target instance to search.</param>
            <param name="ei">Provides the event handler type information.</param>
            <param name="methodName">The method to be wired up.</param>
            <returns>The delegate, or null if not found.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.OnAddToCollection(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Raises the AddToCollection event.
            </summary>
            <param name="obj">The ICollection implementing instance.</param>
            <param name="instance">The instance to be added to the ICollection.</param>
            <returns>True if adding the instance to the ICollection succeeded.</returns>
        </member>
        <member name="M:MyXaml.Core.Parser.OnBeginInstantiate(System.Object)">
            <summary>
            Raises the InstantiateBegin event.
            </summary>
            <param name="obj">The object being instantiated.</param>
        </member>
        <member name="M:MyXaml.Core.Parser.OnEndInstantiate(System.Object)">
            <summary>
            Raises the InstantiateEnd event.
            </summary>
            <param name="obj">The object being instantiated.</param>
        </member>
        <member name="E:MyXaml.Core.Parser.AddToCollection">
            <summary>
            Event is raised when the object graph implements adding instances to
            an ICollection implementer.
            </summary>
        </member>
        <member name="E:MyXaml.Core.Parser.InstantiateBegin">
            <summary>
            Event is raised when the object is first instantiated.
            </summary>
        </member>
        <member name="E:MyXaml.Core.Parser.InstantiateEnd">
            <summary>
            Event is raised when all child objects and attributes have been initialized,
            at the end of object instantiation.
            </summary>
        </member>
        <member name="P:MyXaml.Core.Parser.IgnoreMissingFields">
            <summary>
            Gets/sets ignoreMissingFields
            </summary>
        </member>
        <member name="T:MyXaml.Core.Parser.AddToCollectionDlgt">
            <summary>
            AddToCollectionHelper delegate.
            </summary>
        </member>
        <member name="T:MyXaml.Core.Parser.InstantiateDlgt">
            <summary>
            Delegate for InstantiateBegin and InstantiateEnd events.
            </summary>
        </member>
        <member name="T:MyXaml.Core.ObjectInfo">
            <summary>
            Container for instance information.  Used while processing the object.
            </summary>
        </member>
        <member name="M:MyXaml.Core.ObjectInfo.#ctor(System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">The object instance.</param>
        </member>
        <member name="P:MyXaml.Core.ObjectInfo.HasPropertyDeclaration">
            <summary>
            Get/set the flag indiciating that the instance has a property declaration.
            </summary>
        </member>
        <member name="P:MyXaml.Core.ObjectInfo.PropertyName">
            <summary>
            Get/set the property name of the property declaration.
            </summary>
        </member>
        <member name="P:MyXaml.Core.ObjectInfo.Instance">
            <summary>
            Get/set the instance.
            </summary>
        </member>
        <member name="P:MyXaml.Core.ObjectInfo.ReturnType">
            <summary>
            Get set the return type attribute.
            </summary>
        </member>
        <member name="T:MyXaml.Core.IMyXamlExtender">
            <summary>
            Provides an interface to plug-ins that extend the core parser's functionality.
            </summary>
        </member>
        <member name="M:MyXaml.Core.IMyXamlExtender.Register(MyXaml.Core.Parser)">
            <summary>
            Registers a plug-in.  Called when the parser is constructed.
            </summary>
            <param name="parser">The parser instance.</param>
        </member>
        <member name="M:MyXaml.Core.IMyXamlExtender.Unregister(MyXaml.Core.Parser)">
            <summary>
            Unregisters a plug-in.  Called when the parser is destroyed.
            </summary>
            <param name="parser">The parser instance.</param>
        </member>
        <member name="T:MyXaml.Core.MyXamlAutoInitializeAttribute">
            <summary>
            This attribute can be applied to a public or non-public field in a class
            instantiated by the parser.  Any fields marked with this attribute are
            expected to be initialized by an object instantiated during markup processing
            and having a "def" prefix.
            </summary>
        </member>
        <member name="F:MyXaml.Core.MyXamlAutoInitializeAttribute.alias">
            <summary>
            The alias to use instead of the field name.
            </summary>
        </member>
        <member name="M:MyXaml.Core.MyXamlAutoInitializeAttribute.#ctor">
            <summary>
            Constructor.  The instance assigned to this field must be named using
            the "def" prefix with the same name.
            </summary>
        </member>
        <member name="M:MyXaml.Core.MyXamlAutoInitializeAttribute.#ctor(System.String)">
            <summary>
            Constructor.  The instances assigned to this field must use the supplied
            alias name in the "def:Name=" markup.
            </summary>
            <param name="alias">The alias to use instead of the field name.</param>
        </member>
        <member name="P:MyXaml.Core.MyXamlAutoInitializeAttribute.Alias">
            <summary>
            Instead of using the field name, an optional alias can be used that
            matches the name of the object instantiated during markup processing.
            </summary>
        </member>
        <member name="T:MyXaml.Core.MxBinding">
            <summary>
            Assists with property and event assignment for values that contain a reference.
            Also supports binding on objects that implement IExtenderProvider.
            </summary>
        </member>
        <member name="M:MyXaml.Core.MxBinding.#ctor(System.Object,System.String,System.String,System.Xml.XmlNode)">
            <summary>
            Constructor.
            </summary>
            <param name="obj">The target instance.</param>
            <param name="propertyName">The property name to assign.</param>
            <param name="refVal">The reference, as a string.</param>
            <param name="node">The xml node while element is the object instance.</param>
        </member>
        <member name="M:MyXaml.Core.MxBinding.Bind(MyXaml.Core.Parser)">
            <summary>
            Attempt to bind the referenced value to the property of the object.
            </summary>
            <param name="parser">The calling parser instance.</param>
            <returns>True if assignment is successful.</returns>
        </member>
        <member name="T:MyXaml.Core.MxComponentContainer">
            <summary>
            A helper class to manage a component container for IContainer objects. The .NET
            Container implementation does not support a writeable collection, therefore we have
            to provide this helper class.
            </summary>
        </member>
        <member name="M:MyXaml.Core.MxComponentContainer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:MyXaml.Core.MxComponentContainer.EndInit">
            <summary>
            Populates the Container instance with the IComponent instances in the Components array.
            </summary>
        </member>
        <member name="P:MyXaml.Core.MxComponentContainer.Container">
            <summary>
            The underlying Container instance.
            </summary>
        </member>
        <member name="P:MyXaml.Core.MxComponentContainer.Components">
            <summary>
            A collection of IComponent instances. This array is cleared after EndInit().
            </summary>
        </member>
        <member name="P:MyXaml.Core.MxComponentContainer.Name">
            <summary>
            The name of this instance. Necessary for MyXaml
            </summary>
        </member>
        <member name="P:MyXaml.Core.MxComponentContainer.Tag">
            <summary>
            The tag of this instance. Necessary for MyXaml
            </summary>
        </member>
    </members>
</doc>
