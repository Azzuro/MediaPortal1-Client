<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary
    xmlns="www.team-mediaportal.com/2008/mpf/directx"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System"
    xmlns:collections="clr-namespace:MediaPortal.Presentation.Collections"
    xmlns:mp_special="clr-namespace:MediaPortal.UI.SkinEngine.SpecialElements.Controls"
    DependsOnStyleResources="Colors,Buttons"
    >

  <!-- ************************** Default conversions ****************************** -->
  <DataTemplate DataType="{x:Type system:String}">
    <Label Content="{Binding}"/>
  </DataTemplate>

  <!-- ***************************** Converters ********************************* -->

  <ExpressionMultiValueConverter x:Key="ExpressionMultiValueConverter"/>
  <ExpressionValueConverter x:Key="ExpressionValueConverter"/>
  <CommaSeparatedValuesConverter x:Key="CommaSeparatedValuesConverter"/>

  <!-- ***************************** Brushes ******************************** -->

  <!-- default brush used to paint the background of a page/window -->
  <ResourceWrapper x:Key="BackgroundBrush" Freezable="true">
    <RadialGradientBrush GradientOrigin="0.186,0.311">
      <GradientStop Color="{ThemeResource BackgroundGradientLightColor}" Offset="0"/>
      <GradientStop Color="{ThemeResource BackgroundGradientDarkColor}" Offset="1"/>
    </RadialGradientBrush>
  </ResourceWrapper>

  <!-- default brush used to paint the background of a dialog -->
  <ResourceWrapper x:Key="DialogBackgroundBrush" Freezable="true">
    <RadialGradientBrush GradientOrigin="0.186,0.311">
      <RadialGradientBrush.RelativeTransform>
        <TransformGroup>
          <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.071" ScaleY="1.29"/>
          <TranslateTransform X="-0.036" Y="-0.146"/>
        </TransformGroup>
      </RadialGradientBrush.RelativeTransform>
      <GradientStop Color="{ThemeResource DialogBackgroundGradientLightColor}" Offset="0"/>
      <GradientStop Color="{ThemeResource DialogBackgroundGradientDarkColor}" Offset="1"/>
    </RadialGradientBrush>
  </ResourceWrapper>

  <ResourceWrapper x:Key="KeyBindingsPanelBackgroundBrush" Freezable="true">
  	<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
  		<GradientStop Color="{ThemeResource KeyBindingsPanelBackgroundGradient1Color}" Offset="0"/>
  		<GradientStop Color="{ThemeResource KeyBindingsPanelBackgroundGradient2Color}" Offset="0.3"/>
  		<GradientStop Color="{ThemeResource KeyBindingsPanelBackgroundGradient3Color}" Offset="1"/>
  	</LinearGradientBrush>
  </ResourceWrapper>
  <!-- ***************************** Progress bar ******************************** -->

  <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid x:Name="ProgressBarGrid">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="ProgressBarTrack" HorizontalAlignment="Left" Fill="{ThemeResource ProgressBarBorderColor}"/>
            <Rectangle x:Name="ProgressBarIndicator" Width="{TemplateBinding PartIndicatorWidth}" HorizontalAlignment="Left" Fill="{ThemeResource ProgressBarFillColor}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ***************************** ScrollViewer styles ********************************* -->

  <Style x:Key="DefaultScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="2"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="2"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!-- Content -->
            <ScrollContentPresenter Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Margin}" Content="{TemplateBinding Content}"/>
            <!-- ScrollBar X -->
            <Grid x:Name="ScrollBarX" IsVisible="{TemplateBinding ScrollBarXVisible}" Grid.Row="2" Grid.Column="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <!-- Background -->
              <Rectangle x:Name="ScrollBarXBackground" Grid.Row="0" Grid.Column="0"
                  Stroke="{ThemeResource ScrollBarStrokeColor}" RadiusX="4" RadiusY="4">
                <Rectangle.Fill>
                  <SolidColorBrush Color="{ThemeResource ScrollBarBackgroundColor}"/>
                </Rectangle.Fill>
              </Rectangle>
              <!-- Knob -->
              <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal">
                <StackPanel Width="{TemplateBinding ScrollBarXKnobPos}"/>
                <Rectangle x:Name="ScrollBarXKnob" Width="{TemplateBinding ScrollBarXKnobWidth}" Height="{ThemeResource ScrollBarWidth}"
                    Stroke="{ThemeResource ScrollBarKnobStrokeColor}" RadiusX="4" RadiusY="4">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{ThemeResource ScrollBarKnobBackgroundColor}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </StackPanel>
            </Grid>
            <!-- ScrollBar Y -->
            <Grid x:Name="ScrollBarY" IsVisible="{TemplateBinding ScrollBarYVisible}" Grid.Row="0" Grid.Column="2">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <!-- Background -->
              <Rectangle x:Name="ScrollBarYBackground" Grid.Row="0" Grid.Column="0"
                  Stroke="{ThemeResource ScrollBarStrokeColor}" RadiusX="4" RadiusY="4">
                <Rectangle.Fill>
                  <SolidColorBrush Color="{ThemeResource ScrollBarBackgroundColor}"/>
                </Rectangle.Fill>
              </Rectangle>
              <!-- Knob -->
              <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Vertical">
                <StackPanel Height="{TemplateBinding ScrollBarYKnobPos}"/>
                <Rectangle x:Name="ScrollBarYKnob" Width="{ThemeResource ScrollBarWidth}" Height="{TemplateBinding ScrollBarYKnobHeight}"
                    Stroke="{ThemeResource ScrollBarKnobStrokeColor}" RadiusX="4" RadiusY="4">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{ThemeResource ScrollBarKnobBackgroundColor}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </StackPanel>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *********************************** TextBox style ********************************* -->

  <Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Border Background="{ThemeResource TextBoxBackgroundColor}" BorderBrush="{ThemeResource TextBoxBorderColor}"
              BorderThickness="{ThemeResource TextBoxBorderThickness}" CornerRadius="{ThemeResource TextBoxCornerRadius}">
            <TextControl x:Name="TextControl" PreferredTextLength="{TemplateBinding Path=PreferredTextLength}"
                CaretIndex="{TemplateBinding Path=CaretIndex,Mode=TwoWay}" Text="{TemplateBinding Path=Text,Mode=TwoWay}"
                Color="{TemplateBinding Path=Color}" TextAlign="{TemplateBinding Path=TextAlign}"/>
            <Border.Triggers>
              <DataTrigger Binding="{Binding ElementName=TextControl,Path=HasFocus}" Value="True">
                <Setter Property="BorderBrush" Value="{ThemeResource TextBoxBorderFocusColor}"/>
              </DataTrigger>
            </Border.Triggers>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *********************************** GroupBox style ********************************* -->

  <Style x:Key="GroupBoxStyle" TargetType="{x:Type GroupBox}">
    <Setter Property="BorderBrush" Value="{ThemeResource GroupBoxBorderColor}"/>
    <Setter Property="BorderThickness" Value="{ThemeResource GroupBoxBorderThickness}"/>
    <Setter Property="CornerRadius" Value="{ThemeResource GroupBoxCornerRadius}"/>
  </Style>

  <!-- ************************* ListView item container styles ************************** -->

  <!-- An item list container represented by a standard "Button", scrolling its "ItemLabel" label when focused -->
  <Style x:Key="DefaultMenuItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Button Style="{ThemeResource ButtonWideStyle}"
              Command="{DynamicResource ResourceKey=Menu_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
              IsEnabled="{Binding Enabled}">
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="True"/>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a simple list -->
  <Style x:Key="DefaultItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <ContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Stretch"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for dialog buttons which have a command associated in the ListItem -->
  <Style x:Key="DialogButtonContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Button Style="{ThemeResource ButtonStyle}" Margin="5,0,5,0" Command="{Binding Command}" IsDefault="{Binding AdditionalProperties[IsDefault]}">
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="True"/>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *************************** ListView item data templates ****************************** -->

  <!-- A simple data template to show the Name of the ListItem in a Label -->
  <DataTemplate x:Key="DefaultItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Label x:Name="ItemLabel" Margin="10,7,0,7" Content="{Binding [Name]}" FontSize="28"/>
  </DataTemplate>

  <!-- A data template which shows the CoverArt/defaulticon, the Name and the Size of the ListItem -->
  <DataTemplate x:Key="ContentsMenuItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Image Thumbnail="True" Stretch="Uniform" Grid.Row="0" Grid.Column="0" Height="32" Width="32" Margin="0,7,0,7" Source="{Binding [ImageSrc]}" FallbackSource="{Binding [DefaultIconSrc]}"/>
      <Label x:Name="ItemLabel" Grid.Row="0" Grid.Column="1" Margin="10,7,0,7" Content="{Binding [Name]}" FontSize="28" HorizontalAlignment="Left" VerticalAlignment="Center"/>
    </Grid>
  </DataTemplate>

   <!-- A data template for a dialog menu item in list mode (each row has an image and a label) -->
  <DataTemplate x:Key="ImageDialogItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Image x:Name="Image" Width="100" Height="100" Grid.Row="0" Grid.Column="0" Stretch="Uniform" Source="{Binding [ImageSrc]}" FallbackSource="{Binding [DefaultIconSrc]}"/>
      <Label x:Name="ItemLabel" Grid.Row="0" Grid.Column="1" Margin="10,4,0,4" Content="{Binding [Name]}" FontSize="28"/>
    </Grid>
  </DataTemplate>

  <!-- Data template for a simple share entry in the shares list -->
  <DataTemplate x:Key="ShareItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Control Focusable="true">
      <Control.Template>
        <ControlTemplate>
          <Grid x:Name="ParentPanel">
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="200"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Label x:Name="ShareName" Grid.Column="0" Margin="5,0,0,0" Content="{Binding [Name]}" FontSize="22"/>
            <Label x:Name="SharePath" Grid.Column="1" Content="{Binding [Path]}" FontSize="22"/>
          </Grid>
        </ControlTemplate>
      </Control.Template>
      <Control.Triggers>
        <Trigger Property="HasFocus" Value="True">
          <Setter TargetName="ShareName" Property="Scroll" Value="True"/>
          <Setter TargetName="SharePath" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Control.Triggers>
    </Control>
  </DataTemplate>

  <!-- Data template for a share entry markable with a checkbox in the shares list -->
  <DataTemplate x:Key="MultiMarkableShareItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="ParentPanel">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="200"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <CheckBox x:Name="ShareNameMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource CheckBoxStyle}" VerticalAlignment="Center"
          IsChecked="{Binding Path=Selected,Mode=TwoWay}" Content="{Binding [Name]}"/>
      <Label x:Name="SharePath" Grid.Column="1" Content="{Binding [Path]}" FontSize="22" VerticalAlignment="Center"/>
      <Grid.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter TargetName="SharePath" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </DataTemplate>

  <!-- Data template for a share entry markable with a radiobutton in the shares list -->
  <DataTemplate x:Key="SingleMarkableShareItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="ParentPanel">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="200"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <RadioButton x:Name="ShareNameMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource RadioButtonStyle}" VerticalAlignment="Center"
          IsChecked="{Binding Path=Selected,Mode=TwoWay}" Content="{Binding [Name]}" GroupName="RadioButtonGroup"/>
      <Label x:Name="SharePath" Grid.Column="1" Content="{Binding [Path]}" FontSize="22" VerticalAlignment="Center"/>
      <Grid.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter TargetName="SharePath" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </DataTemplate>

  <!-- Data template for a share entry markable with a checkbox -->
  <DataTemplate x:Key="DefaultMultiMarkableItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="ParentPanel">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <CheckBox x:Name="NameMarker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource CheckBoxStyle}" VerticalAlignment="Center"
          IsChecked="{Binding Path=Selected,Mode=TwoWay}" Content="{Binding [Name]}"/>
      <Grid.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </DataTemplate>

  <!-- Data template for a share entry markable with a radio button -->
  <DataTemplate x:Key="DefaultSingleMarkableItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="ParentPanel">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <RadioButton x:Name="Marker" Grid.Column="0" Margin="2,1,0,1" Style="{ThemeResource RadioButtonStyle}" VerticalAlignment="Center"
          IsChecked="{Binding Path=Selected,Mode=TwoWay}" GroupName="RadioButtonGroup"
          Content="{Binding [Name]}"/>
      <Grid.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter TargetName="NameLabel" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{ThemeResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </DataTemplate>

  <!-- ***************************** ListView styles ********************************* -->

  <!-- Standard ListView properties. The properties "ItemTemplate" and "ItemContainerStyle" have to be completed. -->
  <Style x:Key="DefaultListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="true">
            <ItemsPresenter VerticalAlignment="Top"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel x:Name="ListItemsHost" IsItemsHost="True" Margin="10" VerticalAlignment="Top"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ListView style to be used for all menus (main menu, dialog menus, context menus, ...) -->
  <Style x:Key="MenuListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used in the content area of the screens -->
  <Style x:Key="ContentsMenuListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource ContentsMenuItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="SharesListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource ShareItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="MultiMarkableSharesListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource MultiMarkableShareItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="SingleMarkableSharesListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource SingleMarkableShareItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for lists where multiple items can be marked -->
  <Style x:Key="MultiMarkableListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultMultiMarkableItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for lists where a single item can be marked -->
  <Style x:Key="SingleMarkableListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultSingleMarkableItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <!-- ListView style to be used for menus which display an image with a label -->
  <Style x:Key="ImageDialogListViewStyle" BasedOn="{ThemeResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource ImageDialogItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- *************************** TreeView item data templates ****************************** -->

  <!-- A data template for a TreeItem with a radio button -->
  <HierarchicalDataTemplate x:Key="DefaultSingleMarkableTreeItemDataTemplate" DataType="{x:Type collections:TreeItem}"
      ItemsSource="{Binding SubItems}" DataString="{Binding [Name]}">
    <RadioButton x:Name="Checker" GroupName="RadioButtonGroup"
        Style="{ThemeResource RadioButtonStyle}" VerticalAlignment="Center"
        Content="{Binding [Name]}"
        IsChecked="{PickupBinding Source={DynamicResource ResourceKey=IsChecked_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}}"
        Command="{DynamicResource ResourceKey=Checker_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </HierarchicalDataTemplate>

  <!-- A data template for a TreeItem with a check box -->
  <HierarchicalDataTemplate x:Key="DefaultMultiMarkableTreeItemDataTemplate" DataType="{x:Type collections:TreeItem}"
      ItemsSource="{Binding SubItems}" DataString="{Binding [Name]}">
    <CheckBox x:Name="Checker" Style="{ThemeResource CheckBoxStyle}"
        Content="{Binding [Name]}"
        IsChecked="{PickupBinding Source={DynamicResource ResourceKey=IsChecked_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}}"
        Command="{DynamicResource ResourceKey=Checker_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </HierarchicalDataTemplate>

  <!-- ************************** TreeView item container styles ***************************** -->

  <!-- Tree item container which shows a PlusMinus button and the item content, in expanded state a sub stack panel unter the first line -->
  <Style x:Key="DefaultTreeItemContainerStyle" TargetType="{x:Type HeaderedItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
          <Grid HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <CheckBox x:Name="Expander" Grid.Column="0" Grid.Row="0" Style="{ThemeResource PlusMinusButtonStyle}"
                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded,Mode=TwoWay}"
                Command="{DynamicResource ResourceKey=Expander_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                VerticalAlignment="Top"/>
            <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" Grid.Row="0" HorizontalAlignment="Stretch"/>
            <StackPanel x:Name="SubItemsHost" Grid.Column="1" Grid.Row="1" IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded}">
              <ItemsPresenter HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <BindingSetter Property="IsExpanded" BindingWrapper="{DynamicResource ResourceKey=Expander_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </Style>

  <!-- ****************************** TreeView styles ********************************** -->

  <!-- Standard TreeView properties. The properties "ItemTemplate" and "ItemContainerStyle" have to be completed. -->
  <Style x:Key="DefaultTreeViewStyle" TargetType="{x:Type TreeView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <ScrollViewer Style="{ThemeResource DefaultScrollViewerStyle}" CanContentScroll="false">
            <ItemsPresenter HorizontalAlignment="Left" VerticalAlignment="Top"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel x:Name="TreeItemsHost" IsItemsHost="True" Margin="10" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource DefaultTreeItemContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource ItemsControlShadowBackgroundColor}"/>
  </Style>

  <Style x:Key="DefaultMultiMarkableTreeViewStyle" BasedOn="{ThemeResource DefaultTreeViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultMultiMarkableTreeItemDataTemplate}"/>
  </Style>

  <Style x:Key="DefaultSingleMarkableTreeViewStyle" BasedOn="{ThemeResource DefaultTreeViewStyle}">
    <Setter Property="ItemTemplate" Value="{ThemeResource DefaultSingleMarkableTreeItemDataTemplate}"/>
    <Setter Property="RadioButton.GroupContext" Value="RadioButtonGroup"/>
  </Style>

  <!-- ****************************** Keybindings listview ********************************** -->

  <Style x:Key="KeyBindingContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <StackPanel>
            <ContentPresenter Margin="5"/>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="KeyBindingItemDataTemplate" DataType="{x:Type KeyBindingControl}" DataString="{Binding Key.Name}">
    <ContentPresenter Content="{Binding}"/>
  </DataTemplate>
  <Style x:Key="KeyBindingsListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <ItemsPresenter/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <WrapPanel x:Name="KeyBindingsPanel" IsItemsHost="True" Orientation="Vertical"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemTemplate" Value="{ThemeResource KeyBindingItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{ThemeResource KeyBindingContainerStyle}"/>
    <Setter Property="Background" Value="{ThemeResource KeyBindingsPanelBackgroundBrush}"/>
  </Style>

  <!-- ****************************** PlayerControl ********************************** -->

  <Style x:Key="PlayerControlGroupBoxStyle" BasedOn="{ThemeResource GroupBoxStyle}">
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Color="{ThemeResource DefaultPlayerControlBorderColor}"/>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="{ThemeResource DefaultPlayerControlBorderThickness}"/>
    <Setter Property="CornerRadius" Value="{ThemeResource DefaultPlayerControlCornerRadius}"/>
    <Setter Property="HeaderColor" Value="{ThemeResource DefaultPlayerControlTitleColor}"/>
  </Style>

  <Storyboard x:Key="DefaultCurrentPlayerControlStoryboard" FillBehavior="Stop">
    <!-- TODO: nicer background cycle effect -->
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="Shine" Storyboard.TargetProperty="BorderBrush.Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBorderColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="Shine" Storyboard.TargetProperty="HeaderColor">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlTitleColor}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="Shine" Storyboard.TargetProperty="Background.GradientStops[0].Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBackgroundColor1}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="Shine" Storyboard.TargetProperty="Background.GradientStops[1].Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBackgroundColor2}"/>
    </ColorAnimationUsingKeyFrames>
    <ColorAnimationUsingKeyFrames RepeatBehavior="Forever" AutoReverse="true" BeginTime="00:00:00" Storyboard.TargetName="Shine" Storyboard.TargetProperty="Background.GradientStops[2].Color">
      <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource DefaultCurrentPlayerControlBackgroundColor3}"/>
    </ColorAnimationUsingKeyFrames>
  </Storyboard>

  <Style x:Key="DefaultPlayerControlStyle" TargetType="{x:Type mp_special:PlayerControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type mp_special:PlayerControl}">
          <GroupBox x:Name="Shine" Style="{ThemeResource PlayerControlGroupBoxStyle}"
              DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
              Header="{Binding Title}">
            <GroupBox.Background>
              <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                <GradientStop Color="{ThemeResource DefaultPlayerControlBackgroundColor}" Offset="0"/>
                <GradientStop Color="{ThemeResource DefaultPlayerControlBackgroundColor}" Offset="0.5"/>
                <GradientStop Color="{ThemeResource DefaultPlayerControlBackgroundColor}" Offset="1"/>
              </LinearGradientBrush>
            </GroupBox.Background>
            <StackPanel Orientation="Vertical">
              <Grid Margin="5" HorizontalAlignment="Stretch">
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto"/>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Row="0" Grid.Column="0">
                  <Control x:Name="StatePlay" IsVisible="{Binding IsPlaying}" Template="{ThemeResource PlayControlTemplate}"/>
                  <Control x:Name="StatePause" IsVisible="{Binding IsPaused}" Template="{ThemeResource PauseControlTemplate}"/>
                  <Control x:Name="StateForward" IsVisible="{Binding IsSeekingForward}" Template="{ThemeResource ForwardControlTemplate}"/>
                  <Control x:Name="StateRewind" IsVisible="{Binding IsSeekingBackward}" Template="{ThemeResource RewindControlTemplate}"/>
                  <Label x:Name="SeekHint" FontSize="10" Content="{Binding SeekHint}"/>
                </Grid>
                <Label x:Name="MediaItemTitle" Grid.Row="0" Grid.Column="1" Color="{ThemeResource DefaultPlayerControlMediaItemColor}"
                    Content="{Binding MediaItemTitle}"/>
                <Grid x:Name="AudioPanel" Grid.Row="0" Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center">
                  <Grid IsVisible="{Binding !ShowMouseControls}">
                    <Control x:Name="AudioSimple" IsVisible="{Binding IsAudio}" Template="{ThemeResource AudioActiveControlTemplate}"
                         VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    <Control x:Name="MuteOnOffSimple" Template="{ThemeResource MuteOnOffControlTemplate}"
                         VerticalAlignment="Center" HorizontalAlignment="Center">
                      <Control.IsVisible>
                        <MultiBinding Converter="{StaticResource ExpressionMultiValueConverter}" ConverterParameter="{}{0} &amp;&amp; {1}">
                          <Binding Path="IsAudio"/>
                          <Binding Path="IsMuted"/>
                        </MultiBinding>
                      </Control.IsVisible>
                    </Control>
                  </Grid>
                  <Grid IsVisible="{Binding ShowMouseControls}">
                    <Button x:Name="AudioActiveButton" IsVisible="{Binding IsAudio}" Style="{ThemeResource AudioActiveButtonStyle}"
                        Command="{Command AudioButtonPressed}"/>
                    <Button x:Name="AudioInactiveButton" IsVisible="{Binding !IsAudio}" Style="{ThemeResource AudioInactiveButtonStyle}"
                        Command="{Command AudioButtonPressed}"/>
                  </Grid>
                </Grid>
              </Grid>
              <StackPanel Orientation="Horizontal" IsVisible="{Binding ShowMouseControls}" Margin="0,10,0,5">
                <Button x:Name="SkipBackButton" Style="{ThemeResource SkipBackButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSkipBack}"
                    Command="{Command Previous}"/>
                <Button x:Name="RewindButton" Style="{ThemeResource RewindButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSeekBackward}"
                    Command="{Command SeekBackward}"/>
                <Button x:Name="PlayButton" Style="{ThemeResource PlayButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanPlay}"
                    Command="{Command Play}"/>
                <Button x:Name="PauseButton" Style="{ThemeResource PauseButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanPause}"
                    Command="{Command Pause}"/>
                <Button x:Name="StopButton" Style="{ThemeResource StopButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanStop}"
                    Command="{Command Stop}"/>
                <Button x:Name="ForwardButton" Style="{ThemeResource ForwardButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSeekForward}"
                    Command="{Command SeekForward}"/>
                <Button x:Name="SkipForwardButton" Style="{ThemeResource SkipForwardButtonStyle}" Margin="5,0,5,0" IsVisible="{Binding CanSkipForward}"
                    Command="{Command Next}"/>
              </StackPanel>
            </StackPanel>
          </GroupBox>
          <ControlTemplate.Triggers>
            <Trigger Property="IsCurrentPlayer" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="CurrentPlayer_BeginStoryboard" Storyboard="{ThemeResource DefaultCurrentPlayerControlStoryboard}"/>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="CurrentPlayer_BeginStoryboard"/>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ****************************** Workflow navigation bar ********************************** -->

  <Style x:Key="WorkflowNavigationBarContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="15"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="10"/>
            </Grid.ColumnDefinitions>
            <Path x:Name="WorkflowNavigationBarItemContainer_ArrowLeft" Grid.Row="0" Grid.Column="0" Stretch="Fill"
                Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                Data="M30,0 L0,0 20,10 0,20 30,20"/>
            <Path x:Name="WorkflowNavigationBarItemContainer_Center_Back" Grid.Row="0" Grid.Column="1" Stretch="Fill"
                Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                Data="M0,0 L100,0 L100,20 0,20 z"/>
            <Path x:Name="WorkflowNavigationBarItemContainer_Center_Border" Grid.Row="0" Grid.Column="1" Stretch="Fill"
                Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                Data="M100,0 L0,0 M0,20 L100,20"/>
            <Path x:Name="WorkflowNavigationBarItemContainer_ArrowRight" Grid.Row="0" Grid.Column="2" Stretch="Fill"
                Stroke="{ThemeResource WorkflowNavigationBarItemContainerStrokeColor}"
                Fill="{ThemeResource WorkflowNavigationBarItemContainerFillColor}"
                Data="M0,0 L20,10 0,20"/>
            <ContentPresenter Grid.Row="0" Grid.Column="1" x:Name="ContentPresenter" HorizontalAlignment="Stretch"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="WorkflowNavigationBarItemDataTemplate" DataType="{x:Type collections:ListItem}">
    <Label Margin="10,5,0,5" Content="{Binding [Name]}" Color="{ThemeResource WorkflowNavigationBarFontColor}"/>
  </DataTemplate>

  <Style x:Key="WorkflowNavigationBarStyle">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type mp_special:WorkflowNavigationBar}">
          <ListView ItemsSource="{TemplateBinding NavigationItems}">
            <ListView.Style>
              <Style BasedOn="{ThemeResource DefaultListViewStyle}">
                <Setter Property="ItemTemplate" Value="{ThemeResource WorkflowNavigationBarItemDataTemplate}"/>
                <Setter Property="ItemContainerStyle" Value="{ThemeResource WorkflowNavigationBarContainerStyle}"/>
                <Setter Property="ItemsPanel">
                  <Setter.Value>
                    <ItemsPanelTemplate>
                      <StackPanel x:Name="WorkflowNavigationBarItemsHost" IsItemsHost="True"
                          Margin="10" Orientation="Horizontal" VerticalAlignment="Top"/>
                    </ItemsPanelTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </ListView.Style>
          </ListView>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>
