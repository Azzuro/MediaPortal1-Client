<?xml version="1.0" encoding="utf-8"?>
<ResourceDictionary
    xmlns="www.team-mediaportal.com/2008/mpf/directx"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System"
    xmlns:collections="clr-namespace:MediaPortal.Presentation.Collections"
    DependsOnStyleResources="Colors,Buttons"
    >

  <!-- ************************** Default conversions ****************************** -->
<!-- Example:
  <DataTemplate DataType="{x:Type system:String}">
    <Label Content="{Binding}"/>
  </DataTemplate>
-->

  <!-- ***************************** Brushes ******************************** -->

  <!-- default brush used to paint the background of a page/window -->
  <ResourceWrapper x:Key="BackgroundBrush" Freezable="true">
    <RadialGradientBrush GradientOrigin="0.186,0.311">
      <GradientStop Color="{ThemeResource BackgroundGradientLightColor}" Offset="0"/>
      <GradientStop Color="{ThemeResource BackgroundGradientDarkColor}" Offset="1"/>
    </RadialGradientBrush>
  </ResourceWrapper>

  <!-- default brush used to paint the background of a dialog -->
  <ResourceWrapper x:Key="DialogBackgroundBrush" Freezable="true">
    <RadialGradientBrush GradientOrigin="0.186,0.311">
      <RadialGradientBrush.RelativeTransform>
        <TransformGroup>
          <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.071" ScaleY="1.29"/>
          <SkewTransform AngleX="0" AngleY="0" CenterX="0.5" CenterY="0.5"/>
          <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"/>
          <TranslateTransform X="-0.036" Y="-0.146"/>
        </TransformGroup>
      </RadialGradientBrush.RelativeTransform>
      <GradientStop Color="{ThemeResource DialogBackgroundGradientLightColor}" Offset="0"/>
      <GradientStop Color="{ThemeResource DialogBackgroundGradientDarkColor}" Offset="1"/>
    </RadialGradientBrush>
  </ResourceWrapper>

  <!-- ******************************** Checkbox *********************************** -->

  <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid Margin="0,2,0,2">
            <Control Width="26" Height="26" Style="{ThemeResource ButtonControlStyle}"/>
            <Path x:Name="Check" Visibility="Hidden" Stretch="None" Stroke="{ThemeResource CheckBoxCheckColor}" StrokeThickness="2" HorizontalAlignment="Left" Width="26" Height="26" Data="M18,6 L11,17 L8,13"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="HasFocus" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="Focused_BeginStoryboard" Storyboard="{StaticResource FocusedButtonStoryboard}"/>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="Focused_BeginStoryboard"/>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="Pressed_BeginStoryboard" Storyboard="{StaticResource PressedButtonStoryboard}"
                    HandoffBehavior="TemporaryReplace"/>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="Pressed_BeginStoryboard"/>
              </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="Disabled_BeginStoryBoard" Storyboard="{StaticResource DisabledStoryboard}"/>
              </Trigger.EnterActions>
              <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="Disabled_BeginStoryBoard"/>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ***************************** Video button ******************************** -->

  <!-- Style for a video button. Shows video when present, otherwise a black rectangle -->
  <Style x:Key="VideoWindowButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Black"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <ControlTemplate.Resources>
            <Storyboard x:Key="FocusedStoryboard" FillBehavior="Stop">
              <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="Stroke.Color">
                <SplineColorKeyFrame KeyTime="00:00:00" Value="{ThemeResource VideoPreviewBorderDarkColor}"/>
                <SplineColorKeyFrame KeyTime="00:00:00.1000000" Value="{ThemeResource VideoPreviewBorderLightColor}"/>
              </ColorAnimationUsingKeyFrames>
              <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="Border" Storyboard.TargetProperty="StrokeThickness">
                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0"/>
                <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="5"/>
              </DoubleAnimationUsingKeyFrames>
            </Storyboard>
          </ControlTemplate.Resources>
          <Canvas Width="160" Height="104" DataContext="{Binding Source={Service Players}}">
            <Rectangle x:Name="Border" Width="160" Height="104" Stroke="{ThemeResource VideoPreviewBorderDarkColor}" StrokeThickness="0">
              <Rectangle.Fill>
                <VideoBrush>
                </VideoBrush>
              </Rectangle.Fill>
            </Rectangle>
            <Image Canvas.Left="48" Canvas.Top="20" Source="logo_pause.png" Width="64" Height="64" IsVisible="{Binding Paused}"/>
            <Label Canvas.Left="170" Canvas.Top="10" x:Name="TitleLabel" FontSize="28" Width="400" Height="32" Content="{Binding OSD.Title}" Color="{ThemeResource CurrentMediaItemTitleColor}" IsVisible="False"/>
            <Label Canvas.Left="170" Canvas.Top="42" x:Name="ArtistLabel" FontSize="20" Width="400" Height="32" Content="{Binding OSD.MediaItem[artist]}" Color="{ThemeResource CurrentMediaItemArtistColor}" IsVisible="False"/>
            <Label Canvas.Left="170" Canvas.Top="72" x:Name="CurrentTimeLabel" FontSize="20" Width="104" Height="32" Content="{Binding OSD.CurrentTime}" Color="{ThemeResource CurrentMediaItemTimeColor}" IsVisible="False"/>
          </Canvas>
          <ControlTemplate.Triggers>
            <Trigger Property="HasFocus" Value="True">
              <Trigger.EnterActions>
                <BeginStoryboard x:Name="Focused_BeginStoryboard" Storyboard="{StaticResource FocusedStoryboard}"/>
              </Trigger.EnterActions>
              <Trigger.Setters>
                <Setter TargetName="label1" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label2" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label3" Property="Visibility" Value="Visible"/>
              </Trigger.Setters>
              <Trigger.ExitActions>
                <StopStoryboard BeginStoryboardName="Focused_BeginStoryboard"/>
              </Trigger.ExitActions>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ***************************** Progress bar ******************************** -->

  <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ProgressBar}">
          <Grid>
            <Rectangle x:Name="PART_Track" Margin="2,0,2,0" HorizontalAlignment="Left" Fill="{ThemeResource ProgressBarBorderColor}"/>
            <Rectangle x:Name="PART_Indicator" HorizontalAlignment="Left" Fill="{ThemeResource ProgressBarFillColor}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ***************************** ScrollViewer styles ********************************* -->

  <Style x:Key="DefaultScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="2"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="2"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!-- Content -->
            <ScrollContentPresenter Grid.Row="0" Grid.Column="0" Margin="{TemplateBinding Margin}" Content="{TemplateBinding Content}"/>
            <!-- ScrollBar X -->
            <Grid x:Name="ScrollBarX" IsVisible="{TemplateBinding ScrollBarXVisible}" Grid.Row="2" Grid.Column="0">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
              </Grid.RowDefinitions>
              <!-- Background -->
              <Rectangle x:Name="ScrollBarXBackground" Grid.Row="0" Grid.Column="0"
                  Stroke="{ThemeResource ScrollBarStrokeColor}" RadiusX="4" RadiusY="4">
                <Rectangle.Fill>
                  <SolidColorBrush Color="{ThemeResource ScrollBarBackgroundColor}"/>
                </Rectangle.Fill>
              </Rectangle>
              <!-- Knob -->
              <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal">
                <StackPanel Width="{TemplateBinding ScrollBarXKnobPos}"/>
                <Rectangle x:Name="ScrollBarXKnob" Width="{TemplateBinding ScrollBarXKnobWidth}" Height="{ThemeResource ScrollBarWidth}"
                    Stroke="{ThemeResource ScrollBarKnobStrokeColor}" RadiusX="4" RadiusY="4">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{ThemeResource ScrollBarKnobBackgroundColor}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </StackPanel>
            </Grid>
            <!-- ScrollBar Y -->
            <Grid x:Name="ScrollBarY" IsVisible="{TemplateBinding ScrollBarYVisible}" Grid.Row="0" Grid.Column="2">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
              </Grid.RowDefinitions>
              <!-- Background -->
              <Rectangle x:Name="ScrollBarYBackground" Grid.Row="0" Grid.Column="0"
                  Stroke="{ThemeResource ScrollBarStrokeColor}" RadiusX="4" RadiusY="4">
                <Rectangle.Fill>
                  <SolidColorBrush Color="{ThemeResource ScrollBarBackgroundColor}"/>
                </Rectangle.Fill>
              </Rectangle>
              <!-- Knob -->
              <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Vertical">
                <StackPanel Height="{TemplateBinding ScrollBarYKnobPos}"/>
                <Rectangle x:Name="ScrollBarYKnob" Width="{ThemeResource ScrollBarWidth}" Height="{TemplateBinding ScrollBarYKnobHeight}"
                    Stroke="{ThemeResource ScrollBarKnobStrokeColor}" RadiusX="4" RadiusY="4">
                  <Rectangle.Fill>
                    <SolidColorBrush Color="{ThemeResource ScrollBarKnobBackgroundColor}"/>
                  </Rectangle.Fill>
                </Rectangle>
              </StackPanel>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ************************* ListView Item container styles ************************** -->

  <!-- An item list container represented by a standard "ButtonStyle", scrolling its "ItemLabel" label when focused -->
  <Style x:Key="DefaultMenuItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Button Style="{StaticResource ButtonStyle}"
              Command="{DynamicResource ResourceKey=Menu_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}">
            <Button.Triggers>
              <Trigger Property="HasFocus" Value="True">
                <Setter TargetName="ItemLabel" Property="Scroll" Value="True"/>
              </Trigger>
            </Button.Triggers>
          </Button>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Container style for a simple list -->
  <Style x:Key="DefaultItemContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <ContentPresenter x:Name="ContentPresenter" Margin="10,0,10,0" HorizontalAlignment="Stretch"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- An item list container for usage as playlist, DOESN'T WORK YET (because of the commands which won't work) -->
  <Style x:Key="ItemPlayListContainerStyle" TargetType="{x:Type ListViewItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <StackPanel Orientation="Horizontal">
            <Button Style="{StaticResource ButtonStyle}" Height="46" Width="360">
              <Button.Triggers>
                <Trigger Property="HasFocus" Value="True">
                  <Setter TargetName="ItemLabel" Property="Scroll" Value="True"/>
                </Trigger>
              </Button.Triggers>
            </Button>
            <Button Style="{StaticResource ArrowButtonDownStyle}" Command="{Command PlayList:PlayList.MoveDown}" Height="46" Width="46" />
            <Button Style="{StaticResource ArrowButtonUpStyle}" Command="{Command PlayList:PlayList.MoveUp}" Height="46" Width="46" />
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- *************************** ListView Item data templates ****************************** -->

  <!-- A simple data template to show the Name of the ListItem in a Label -->
  <DataTemplate x:Key="DefaultMenuItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid>
      <Label x:Name="ItemLabel" Margin="10,4,0,0" Content="{Binding [Name]}" FontSize="28"/>
    </Grid>
  </DataTemplate>

  <!-- A data template which shows the CoverArt/defaulticon, the Name and the Size of the ListItem -->
  <DataTemplate x:Key="ContentsMenuItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid Height="46">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Image Thumbnail="True" Stretch="Uniform" Grid.Row="0" Grid.Column="0" Height="32" Width="32" FallbackSource="{Binding [defaulticon]}" Source="{Binding [CoverArt]}"/>
      <Label x:Name="ItemLabel" Grid.Row="0" Grid.Column="1" Margin="10,0,0,0" Height="32" Content="{Binding [Name]}" FontSize="28" HorizontalAlignment="Left" VerticalAlignment="Center"/>
      <Label Grid.Row="0" Grid.Column="2" Content="{Binding [Size]}" FontSize="20" HorizontalAlignment="Right" VerticalAlignment="Center"/>
    </Grid>
  </DataTemplate>

   <!-- A data template for a dialog menu item in list mode (each row has an image and a label) -->
  <DataTemplate x:Key="ImageDialogItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="Grd1">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <Image x:Name="Image" Width="100" Height="100" Grid.Row="0" Grid.Column="0" Stretch="Uniform" Source="{Binding [ImageSrc]}" FallbackSource="{Binding [DefaultIconSrc]}"/>
      <Label x:Name="ItemLabel" Grid.Row="0" Grid.Column="1" Margin="10,4,0,0" Content="{Binding [Name]}" FontSize="28"/>
    </Grid>
  </DataTemplate>

  <!-- Data template for a simple share entry in the shares list -->
  <DataTemplate x:Key="ShareItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Control Focusable="true">
      <Control.Template>
        <ControlTemplate>
          <Grid x:Name="ParentPanel">
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="200"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Label x:Name="ShareName" Grid.Column="0" Margin="5,0,0,0" Content="{Binding [Name]}" FontSize="22"/>
            <Label x:Name="SharePath" Grid.Column="1" Content="{Binding [Path]}" FontSize="22"/>
          </Grid>
        </ControlTemplate>
      </Control.Template>
      <Control.Triggers>
        <Trigger Property="HasFocus" Value="True">
          <Setter TargetName="ShareName" Property="Scroll" Value="True"/>
          <Setter TargetName="SharePath" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{StaticResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Control.Triggers>
    </Control>
  </DataTemplate>

  <!-- Data template for a share entry markable by a checkbox in the shares list -->
  <DataTemplate x:Key="MultiMarkableShareItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="ParentPanel">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="200"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <CheckBox x:Name="Marker" Grid.Column="0" Margin="2,1,0,1" Style="{StaticResource CheckBoxStyle}" VerticalAlignment="Center"
          IsChecked="{Binding Path=Selected,Mode=TwoWay}"/>
      <Label x:Name="ShareName" Grid.Column="1" Margin="10,0,0,0" Content="{Binding [Name]}" FontSize="22" VerticalAlignment="Center"/>
      <Label x:Name="SharePath" Grid.Column="2" Content="{Binding [Path]}" FontSize="22" VerticalAlignment="Center"/>
      <Grid.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter TargetName="ShareName" Property="Scroll" Value="True"/>
          <Setter TargetName="SharePath" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{StaticResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </DataTemplate>

  <!-- Data template for a share entry markable by a checkbox in the shares list -->
  <DataTemplate x:Key="SingleMarkableItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid x:Name="ParentPanel">
      <Grid.RowDefinitions>
        <RowDefinition Height="*"/>
      </Grid.RowDefinitions>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto"/>
        <ColumnDefinition Width="*"/>
      </Grid.ColumnDefinitions>
      <RadioButton x:Name="Marker" Grid.Column="0" Margin="2,1,0,1" Style="{StaticResource RadioButtonStyle}" VerticalAlignment="Center"
          IsChecked="{Binding Path=Selected,Mode=TwoWay}" GroupName="RadioButtonGroup"/>
      <Label x:Name="NameLabel" Grid.Column="1" Margin="10,0,0,0" Content="{Binding [Name]}" FontSize="22" VerticalAlignment="Center"/>
      <Grid.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter TargetName="NameLabel" Property="Scroll" Value="True"/>
          <Setter TargetName="ParentPanel" Property="Background">
            <Setter.Value>
              <SolidColorBrush Color="{StaticResource PassiveFocusBackgroundColor}"/>
            </Setter.Value>
          </Setter>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </DataTemplate>

  <!-- A data template for usage in a playlist, which shows the CoverArt/defaulticon and the Name of the ListItem -->
  <DataTemplate x:Key="PlayListItemDataTemplate" DataType="{x:Type collections:ListItem}" DataString="{Binding [Name]}">
    <Grid Height="46">
      <Grid.ColumnDefinitions>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
        <ColumnDefinition/>
      </Grid.ColumnDefinitions>
      <Grid.RowDefinitions>
        <RowDefinition/>
      </Grid.RowDefinitions>
      <Image Thumbnail="True" Grid.Row="0" Grid.Column="0" Height="32" Width="32" FallbackSource="{Binding [defaulticon]}" Source="{Binding [CoverArt]}"/>
      <Label x:Name="ItemLabel" Margin="10,0,0,0" Grid.Row="0" Height="32" Grid.Column="1" Grid.ColumnSpan="8" Content="{Binding [Name]}" FontSize="28"/>
    </Grid>
  </DataTemplate>

  <!-- ***************************** ListView styles ********************************* -->

  <!-- Standard ListView properties. The properties "ItemTemplate" and "ItemContainerStyle" have to be completed. -->
  <Style x:Key="DefaultListViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <ScrollViewer Style="{StaticResource DefaultScrollViewerStyle}">
            <ItemsPresenter VerticalAlignment="Top"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel IsItemsHost="True" VerticalAlignment="Top"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- ListView style to be used for all menus (main menu, dialog menus, context menus, ...) -->
  <Style x:Key="MenuListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource DefaultMenuItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used in the content area of the screens -->
  <Style x:Key="ContentsMenuListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource ContentsMenuItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="SharesListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource ShareItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="MultiMarkableSharesListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource MultiMarkableShareItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for the shares list -->
  <Style x:Key="SingleMarkableListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource SingleMarkableItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultItemContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for playlists (NOT WORKING YET -> see ItemPlayListContainerStyle) -->
  <Style x:Key="PlayListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource PlayListItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource ItemPlayListContainerStyle}"/>
  </Style>

  <!-- ListView style to be used for menus which display an image with a label -->
  <Style x:Key="ImageDialogListViewStyle" BasedOn="{StaticResource DefaultListViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource ImageDialogItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItemContainerStyle}"/>
  </Style>

  <!-- *************************** TreeView Item data templates ****************************** -->

  <!-- A data template for a ListItem in tree mode -->
  <HierarchicalDataTemplate x:Key="DefaultTreeItemDataTemplate" DataType="{x:Type collections:TreeItem}"
      ItemsSource="{Binding SubItems}" DataString="{Binding [Name]}">
    <Grid>
      <Label x:Name="ItemLabel" Height="32" Content="{Binding [Name]}" FontSize="28"/>
      <Grid.Triggers>
        <Trigger Property="HasFocus" Value="True">
          <Setter TargetName="ItemLabel" Property="Scroll" Value="True"/>
        </Trigger>
      </Grid.Triggers>
    </Grid>
  </HierarchicalDataTemplate>

  <!-- ************************** TreeView item container styles ***************************** -->

  <Style x:Key="DefaultSelectableTreeItemContainerStyle" TargetType="{x:Type HeaderedItemsControl}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
          <Grid x:Name="GrdB" HorizontalAlignment="Left" VerticalAlignment="Top">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <CheckBox x:Name="Expander" Grid.Column="0" Grid.Row="0" Style="{StaticResource PlusMinusButtonStyle}"
                IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded,Mode=TwoWay}"
                Command="{DynamicResource ResourceKey=Expander_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"
                VerticalAlignment="Top"/>
            <CheckBox x:Name="Checker" Grid.Column="1" Grid.Row="0" Style="{StaticResource CheckBoxStyle}" VerticalAlignment="Top"
                IsChecked="{PickupBinding Source={DynamicResource ResourceKey=IsChecked_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}}"
                Command="{DynamicResource ResourceKey=Checker_Command,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
            <ContentPresenter Grid.Column="2" Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            <StackPanel x:Name="SubItemsHost" Grid.Column="2" Grid.Row="1" IsVisible="{Binding RelativeSource={RelativeSource AncestorType={x:Type HeaderedItemsControl}},Path=IsExpanded}">
              <ItemsPresenter HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <BindingSetter Property="IsExpanded" BindingWrapper="{DynamicResource ResourceKey=Expander_Binding,TreeSearchMode=Hybrid,AssignmentMode=Copy}"/>
  </Style>

  <!-- ****************************** TreeView styles ********************************** -->

  <!-- Standard TreeView properties. The properties "ItemTemplate" and "ItemContainerStyle" have to be completed. -->
  <Style x:Key="DefaultTreeViewStyle" TargetType="{x:Type TreeView}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeView}">
          <ScrollViewer Style="{StaticResource DefaultScrollViewerStyle}">
            <ItemsPresenter HorizontalAlignment="Left" VerticalAlignment="Top"/>
          </ScrollViewer>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel x:Name="TreeStackPanel" IsItemsHost="True" HorizontalAlignment="Left" VerticalAlignment="Top"/>
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="DefaultSelectableTreeViewStyle" BasedOn="{StaticResource DefaultTreeViewStyle}">
    <Setter Property="ItemTemplate" Value="{StaticResource DefaultTreeItemDataTemplate}"/>
    <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultSelectableTreeItemContainerStyle}"/>
  </Style>

</ResourceDictionary>
