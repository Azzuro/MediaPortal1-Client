<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TvControl</name>
    </assembly>
    <members>
        <member name="T:TvControl.VirtualCard">
            <summary>
            Virtual Card class
            This class provides methods and properties which a client can use
            The class will handle the communication and control with the
            tv service backend
            </summary>
        </member>
        <member name="M:TvControl.VirtualCard.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.VirtualCard"/> class.
            </summary>
            <param name="cardId">The card id.</param>
            <param name="server">The server.</param>
        </member>
        <member name="M:TvControl.VirtualCard.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.VirtualCard"/> class.
            </summary>
            <param name="cardId">The card id.</param>
        </member>
        <member name="M:TvControl.VirtualCard.GetTeletextPage(System.Int32,System.Int32)">
            <summary>
            Gets a raw teletext page.
            </summary>
            <param name="pageNumber">The page number. (0x100-0x899)</param>
            <param name="subPageNumber">The sub page number.(0x0-0x79)</param>
            <returns>byte[] array containing the raw teletext page or null if page is not found</returns>
        </member>
        <member name="M:TvControl.VirtualCard.Scan(TvLibrary.Interfaces.IChannel)">
            <summary>
            scans current transponder for channels.
            </summary>
            <returns>list of all channels found</returns>
        </member>
        <member name="M:TvControl.VirtualCard.StopTimeShifting">
            <summary>
            Stops the time shifting.
            </summary>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.StopRecording">
            <summary>
            Stops recording.
            </summary>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.StartRecording(System.String@,System.Boolean,System.Int64)">
            <summary>
            Starts recording.
            </summary>
            <param name="fileName">Name of the recording file.</param>
            <param name="contentRecording">not used</param>
            <param name="startTime">not used</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.VirtualCard.IsLocked(TvControl.User@)">
            <summary>
            Determines whether the card is locked.
            </summary>
            <param name="user">The user which has locked the card</param>
            <returns>
            	<c>true</c> if the card is locked; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:TvControl.VirtualCard.SubPageCount(System.Int32)">
            <summary>
            Gets the number of subpages for a teletext page.
            </summary>
            <param name="pageNumber">The page number (0x100-0x899)</param>
            <returns>number of teletext subpages for the pagenumber</returns>
        </member>
        <member name="M:TvControl.VirtualCard.TeletextRotation(System.Int32)">
            <summary>f
            Returns the rotation time for a specific teletext page
            </summary>
            <param name="pageNumber">The pagenumber (0x100-0x899)</param>
            <returns>timespan containing the rotation time</returns>
        </member>
        <member name="P:TvControl.VirtualCard.Id">
            <summary>
            returns the card id of this virtual card
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.RemoteServer">
            <summary>
            gets the ip adress of the tvservice
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingFolder">
            <summary>
            gets/sets the recording folder for the card
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.Type">
            <summary>
            Gets the type of card (analog,dvbc,dvbs,dvbt,atsc)
            </summary>
            <value>cardtype</value>
        </member>
        <member name="P:TvControl.VirtualCard.Name">
            <summary>
            Gets the name 
            </summary>
            <returns>name of card</returns>
        </member>
        <member name="P:TvControl.VirtualCard.Device">
            <summary>
            Gets the device path 
            </summary>
            <returns>devicePath of card</returns>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingFileName">
            <summary>
            Returns the current filename used for recording
            </summary>
            <returns>filename of the recording or null when not recording</returns>
        </member>
        <member name="P:TvControl.VirtualCard.AudioStream">
            <summary>
            gets/sets the current audio stream 
            </summary>
            <returns>current audio stream</returns>
        </member>
        <member name="P:TvControl.VirtualCard.AvailableAudioStreams">
            <summary>
            Gets the available audio streams.
            </summary>
            <value>The available audio streams.</value>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingScheduleId">
            <summary>
            returns which schedule is currently being recorded
            </summary>
            <returns>id of Schedule or -1 if  card not recording</returns>
        </member>
        <member name="P:TvControl.VirtualCard.RTSPUrl">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream 
            </summary>
            <returns>URL containing the RTSP adress on which the card transmits its stream</returns>
        </member>
        <member name="P:TvControl.VirtualCard.GrabTeletext">
            <summary>
            turn on/off teletext grabbing
            </summary>
        </member>
        <member name="P:TvControl.VirtualCard.HasTeletext">
            <summary>
            Returns if the current channel has teletext or not
            </summary>
            <returns>yes if channel has teletext otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsGrabbingEpg">
            <summary>
            Returns if we arecurrently grabbing the epg or not
            </summary>
            <returns>true when card is grabbing the epg  otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsRecording">
            <summary>
            Returns if card is currently recording or not
            </summary>
            <returns>true when card is recording otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsScanning">
            <summary>
            Returns if card is currently scanning or not
            </summary>
            <returns>true when card is scanning otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsScrambled">
            <summary>
            Returns whether the current channel is scrambled or not.
            </summary>
            <returns>yes if channel is scrambled and CI/CAM cannot decode it, otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsTimeShifting">
            <summary>
            Returns if card is currently timeshifting or not
            </summary>
            <returns>true when card is timeshifting otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.MinChannel">
            <summary>
            returns the minium channel number
            </summary>
            <returns>minium channel number</returns>
        </member>
        <member name="P:TvControl.VirtualCard.MaxChannel">
            <summary>
            returns the maximum channel number
            </summary>
            <returns>maximum channel number</returns>
        </member>
        <member name="P:TvControl.VirtualCard.TimeShiftFileName">
            <summary>
            Returns the current filename used for timeshifting
            </summary>
            <returns>timeshifting filename null when not timeshifting</returns>
        </member>
        <member name="P:TvControl.VirtualCard.TimeShiftStarted">
            <summary>
            returns the date/time when timeshifting has been started 
            </summary>
            <returns>DateTime containg the date/time when timeshifting was started</returns>
        </member>
        <member name="P:TvControl.VirtualCard.RecordingStarted">
            <summary>
            returns the date/time when recording has been started 
            </summary>
            <returns>DateTime containg the date/time when timeshifting was started</returns>
        </member>
        <member name="P:TvControl.VirtualCard.IsTunerLocked">
            <summary>
            Returns if the tuner is locked onto a signal or not
            </summary>
            <returns>true if tuner is locked otherwise false</returns>
        </member>
        <member name="P:TvControl.VirtualCard.ChannelName">
            <summary>
            Gets the name of the tv/radio channel to which we are tuned
            </summary>
            <returns>channel name</returns>
        </member>
        <member name="P:TvControl.VirtualCard.Channel">
            <summary>
            Gets the of the tv/radio channel to which we are tuned
            </summary>
            <returns>channel name</returns>
        </member>
        <member name="P:TvControl.VirtualCard.SignalLevel">
            <summary>
            Returns the signal level 
            </summary>
            <returns>signal level (0-100)</returns>
        </member>
        <member name="P:TvControl.VirtualCard.SignalQuality">
            <summary>
            Returns the signal quality 
            </summary>
            <returns>signal quality (0-100)</returns>
        </member>
        <member name="T:TvControl.TvServer">
            <summary>
            Class which connects to the remote tv-server
            </summary>
        </member>
        <member name="M:TvControl.TvServer.Card(System.Int32)">
            <summary>
            returns a virtual card for the specified index
            which can be used to control the card
            </summary>
            <param name="index">index of card</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.TvServer.IsAnyCardRecording">
            <summary>
            Returns if any card is recording
            </summary>
            <returns>true if any card is recording, otherwise false</returns>
        </member>
        <member name="M:TvControl.TvServer.StartTimeShifting(System.String,TvControl.VirtualCard@)">
            <summary>
            Start timeshifting on a specific channel
            </summary>
            <param name="channelName">Name of the channel</param>
            <param name="card">returns on which card timeshifting is started</param>
            <returns>TvResult indicating whether method succeeded</returns>
        </member>
        <member name="M:TvControl.TvServer.IsRecording(System.String,TvControl.VirtualCard@)">
            <summary>
            Checks if the channel specified is being recorded and ifso
            returns on which card
            </summary>
            <param name="channelName">Name of the channel</param>
            <param name="card">returns card is recording the channel</param>
            <returns>true if a card is recording the channel, otherwise false</returns>
        </member>
        <member name="M:TvControl.TvServer.IsRecordingSchedule(System.Int32,TvControl.VirtualCard@)">
            <summary>
            Checks if the schedule specified is currently being recorded and ifso
            returns on which card
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <param name="card">returns card is recording the channel</param>
            <returns>true if a card is recording the schedule, otherwise false</returns>
        </member>
        <member name="M:TvControl.TvServer.StopRecordingSchedule(System.Int32)">
            <summary>
            Stops recording the Schedule specified
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.TvServer.OnNewSchedule">
            <summary>
            This method should be called by a client to indicate that
            there is a new or modified Schedule in the database
            </summary>
        </member>
        <member name="M:TvControl.TvServer.GetStreamUrlForFileName(System.Int32)">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream 
            </summary>
            <returns>URL containing the RTSP adress on which the card transmits its stream</returns>
        </member>
        <member name="P:TvControl.TvServer.Count">
            <summary>
            Returns the number of cards found
            </summary>
        </member>
        <member name="P:TvControl.TvServer.EpgGrabberEnabled">
            <summary>
            Enable or disable the epg-grabber
            </summary>
        </member>
        <member name="P:TvControl.TvServer.DatabaseConnectionString">
            <summary>
            Returns the SQl connection string to the database
            </summary>
        </member>
        <member name="T:TvControl.User">
            <summary>
            Class holding user credentials
            </summary>
        </member>
        <member name="M:TvControl.User.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.User"/> class.
            </summary>
        </member>
        <member name="M:TvControl.User.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TvControl.User"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isAdmin">if set to <c>true</c> [is admin].</param>
        </member>
        <member name="P:TvControl.User.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:TvControl.User.IsAdmin">
            <summary>
            Gets or sets a value indicating whether this instance is admin.
            </summary>
            <value><c>true</c> if this instance is admin; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:TvControl.RemoteControl">
            <summary>
            Class which holds the connection with the master tv-server
            </summary>
        </member>
        <member name="M:TvControl.RemoteControl.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:TvControl.RemoteControl.HostName">
            <summary>
            Gets or sets the name the hostname of the master tv-server.
            </summary>
            <value>The name of the host.</value>
        </member>
        <member name="P:TvControl.RemoteControl.Instance">
            <summary>
            returns an the <see cref="T:TvControl.IController"/> interface to the tv server
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:TvControl.RemoteControl.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected with the tv server
            </summary>
            <value>
            	<c>true</c> if this instance is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:TvControl.CardType">
            <summary>
            Types of cards
            </summary>
        </member>
        <member name="F:TvControl.CardType.Analog">
            <summary>
            analog card
            </summary>
        </member>
        <member name="F:TvControl.CardType.DvbS">
            <summary>
            DVB-S card
            </summary>
        </member>
        <member name="F:TvControl.CardType.DvbT">
            <summary>
            DVB-T card
            </summary>
        </member>
        <member name="F:TvControl.CardType.DvbC">
            <summary>
            DVB-C card
            </summary>
        </member>
        <member name="F:TvControl.CardType.Atsc">
            <summary>
            ATSC card
            </summary>
        </member>
        <member name="T:TvControl.TvResult">
            <summary>
            enum describing the possible result codes for the tv engine
            </summary>
        </member>
        <member name="F:TvControl.TvResult.Succeeded">
            <summary>
            Operation succeeded
            </summary>
        </member>
        <member name="F:TvControl.TvResult.AllCardsBusy">
            <summary>
            Operation failed since all cards are busy and no free card could be found
            </summary>
        </member>
        <member name="F:TvControl.TvResult.ChannelIsScrambled">
            <summary>
            Operation failed since channel is encrypted
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NoVideoAudioDetected">
            <summary>
            Opetation failed since no audio/video was detected after tuning
            </summary>
        </member>
        <member name="F:TvControl.TvResult.UnknownError">
            <summary>
            Operation failed due to an unknown error
            </summary>
        </member>
        <member name="F:TvControl.TvResult.UnableToStartGraph">
            <summary>
            Operation failed since the graph could not be build or started
            </summary>
        </member>
        <member name="F:TvControl.TvResult.UnknownChannel">
            <summary>
            Operation failed since the channel is unknown
            </summary>
        </member>
        <member name="F:TvControl.TvResult.NoTuningDetails">
            <summary>
            Operation failed since the there is no tuning information for the channel
            </summary>
        </member>
        <member name="F:TvControl.TvResult.ChannelNotMappedToAnyCard">
            <summary>
            Operation failed since the channel is not mapped to any card
            </summary>
        </member>
        <member name="F:TvControl.TvResult.CardIsDisabled">
            <summary>
            Operation failed since the card is disabled
            </summary>
        </member>
        <member name="T:TvControl.IController">
            <summary>
            interface class describing all methods available
            to remote-control the TVService
            </summary>
        </member>
        <member name="M:TvControl.IController.CardId(System.Int32)">
            <summary>
            Gets the card Id for a card
            </summary>
            <param name="cardIndex">Index of the card.</param>
            <value>id of card</value>
        </member>
        <member name="M:TvControl.IController.Type(System.Int32)">
            <summary>
            Gets the type of card (analog,dvbc,dvbs,dvbt,atsc)
            </summary>
            <param name="cardId">id of the card.</param>
            <value>cardtype</value>
        </member>
        <member name="M:TvControl.IController.CardName(System.Int32)">
            <summary>
            Gets the name for a card.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>name of card</returns>
        </member>
        <member name="M:TvControl.IController.CanTune(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            Method to check if card can tune to the channel specified
            </summary>
            <returns>true if card can tune to the channel otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.CardDevice(System.Int32)">
            <summary>
            Gets the device path for a card.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>devicePath of card</returns>
        </member>
        <member name="M:TvControl.IController.CurrentChannel(System.Int32)">
            <summary>
            Gets the tv/radio channel on which the card is currently tuned
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>IChannel</returns>
        </member>
        <member name="M:TvControl.IController.CurrentChannelName(System.Int32)">
            <summary>
            Gets the name of the tv/radio channel on which the card is currently tuned
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>channel name</returns>
        </member>
        <member name="M:TvControl.IController.IsScrambled(System.Int32)">
            <summary>
            Returns whether the channel to which the card is tuned is
            scrambled or not.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>yes if channel is scrambled and CI/CAM cannot decode it, otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.TuneScan(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            Tune the the specified card to the channel and run the graph
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="channel">The channel.</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:TvControl.IController.Tune(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            Tune the the specified card to the channel.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="channel">The channel.</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:TvControl.IController.TunerLocked(System.Int32)">
            <summary>
            Returns if the tuner is locked onto a signal or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when tuner is locked to a signal otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.SignalQuality(System.Int32)">
            <summary>
            Returns the signal quality for a card
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>signal quality (0-100)</returns>
        </member>
        <member name="M:TvControl.IController.SignalLevel(System.Int32)">
            <summary>
            Returns the signal level for a card.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>signal level (0-100)</returns>
        </member>
        <member name="M:TvControl.IController.FileName(System.Int32)">
            <summary>
            Returns the current filename used for recording
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>filename of the recording or null when not recording</returns>
        </member>
        <member name="M:TvControl.IController.TimeShiftFileName(System.Int32)">
            <summary>
            Returns the current filename used for timeshifting
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>timeshifting filename null when not timeshifting</returns>
        </member>
        <member name="M:TvControl.IController.IsTimeShifting(System.Int32)">
            <summary>
            Returns if the card is currently timeshifting or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is timeshifting otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsRecording(System.Int32)">
            <summary>
            Returns if the card is currently recording or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is recording otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsScanning(System.Int32)">
            <summary>
            Returns if the card is currently scanning for channels or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is scanning otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsGrabbingEpg(System.Int32)">
            <summary>
            Returns if the card is currently grabbing the epg or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is grabbing the epg  otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsGrabbingTeletext(System.Int32)">
            <summary>
            Returns if the card is currently grabbing teletext or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true when card is grabbing teletext otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.TeletextRotation(System.Int32,System.Int32)">
            <summary>
            Returns the rotation time for a specific teletext page
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="pageNumber">The pagenumber (0x100-0x899)</param>
            <returns>timespan containing the rotation time</returns>
        </member>
        <member name="M:TvControl.IController.HasTeletext(System.Int32)">
            <summary>
            Returns if the channel to which the card is currently tuned
            has teletext or not
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>yes if channel has teletext otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.GrabTeletext(System.Int32,System.Boolean)">
            <summary>
            turn on/off teletext grabbing for a card
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="onOff">boolean indicating if teletext grabbing should be enabled or not</param>
            <returns>onOff when true start grabbing teletext otherwise stop grabbing teletext</returns>
        </member>
        <member name="M:TvControl.IController.GetTeletextPage(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a raw teletext page.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="pageNumber">The page number. (0x100-0x899)</param>
            <param name="subPageNumber">The sub page number.(0x0-0x79)</param>
            <returns>byte[] array containing the raw teletext page or null if page is not found</returns>
        </member>
        <member name="M:TvControl.IController.SubPageCount(System.Int32,System.Int32)">
            <summary>
            Gets the number of subpages for a teletext page.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="pageNumber">The page number (0x100-0x899)</param>
            <returns>number of teletext subpages for the pagenumber</returns>
        </member>
        <member name="M:TvControl.IController.StartTimeShifting(System.Int32,System.String)">
            <summary>
            Start timeshifting.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="fileName">Name of the timeshiftfile.</param>
            <returns>TvResult indicating whether method succeeded</returns>
        </member>
        <member name="M:TvControl.IController.StopTimeShifting(System.Int32,TvControl.User)">
            <summary>
            Stops the time shifting.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="user">user credentials.</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.StartRecording(System.Int32,System.String@,System.Boolean,System.Int64)">
            <summary>
            Starts recording.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="fileName">Name of the recording file.</param>
            <param name="contentRecording">not used</param>
            <param name="startTime">not used</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.StopRecording(System.Int32)">
            <summary>
            Stops recording.
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>true if success otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.Scan(System.Int32,TvLibrary.Interfaces.IChannel)">
            <summary>
            scans current transponder for channels.
            </summary>
            <param name="cardId">id of the card.</param>
            <param name="channel">contains tuningdetails for the transponder.</param>
            <returns>list of all channels found</returns>
        </member>
        <member name="M:TvControl.IController.MinChannel(System.Int32)">
            <summary>
            returns the minium channel numbers for analog cards
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>minium channel number</returns>
        </member>
        <member name="M:TvControl.IController.MaxChannel(System.Int32)">
            <summary>
            returns the maximum channel numbers for analog cards
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>maximum channel number</returns>
        </member>
        <member name="M:TvControl.IController.TimeShiftStarted(System.Int32)">
            <summary>
            returns the date/time when timeshifting has been started for the card specified
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>DateTime containg the date/time when timeshifting was started</returns>
        </member>
        <member name="M:TvControl.IController.RecordingStarted(System.Int32)">
            <summary>
            returns the date/time when recording has been started for the card specified
            </summary>
            <param name="cardId">id of the card.</param>
            <returns>DateTime containg the date/time when recording was started</returns>
        </member>
        <member name="M:TvControl.IController.GetRecordingSchedule(System.Int32)">
            <summary>
            returns which schedule the card specified is currently recording
            </summary>
            <param name="cardId">card id</param>
            <returns>id of Schedule or -1 if  card not recording</returns>
        </member>
        <member name="M:TvControl.IController.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:TvControl.IController.AvailableAudioStreams(System.Int32)">
            <summary>
            returns the list of available audio streams for the card specified
            </summary>
            <param name="cardId">card id</param>
            <returns>List containing all audio streams</returns>
        </member>
        <member name="M:TvControl.IController.GetCurrentAudioStream(System.Int32)">
            <summary>
            returns the current selected audio stream for the card specified
            </summary>
            <param name="cardId">card id</param>
            <returns>current audio stream</returns>
        </member>
        <member name="M:TvControl.IController.SetCurrentAudioStream(System.Int32,TvLibrary.Interfaces.IAudioStream)">
            <summary>
            Sets the current audio stream for the card specified
            </summary>
            <param name="cardId">card id</param>
            <param name="stream">audio stream</param>
        </member>
        <member name="M:TvControl.IController.GetStreamingUrl(System.Int32)">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream for the selected card
            </summary>
            <param name="cardId">card id</param>
            <returns>URL containing the RTSP adress on which the card transmits its stream</returns>
        </member>
        <member name="M:TvControl.IController.GetRecordingUrl(System.Int32)">
            <summary>
            Returns the URL for the RTSP stream on which the client can find the
            stream for recording 
            </summary>
            <param name="idRecording">id of recording</param>
            <returns>URL containing the RTSP adress on which the recording can be found</returns>
        </member>
        <member name="M:TvControl.IController.StartTimeShifting(System.String,TvControl.User,TvControl.VirtualCard@)">
            <summary>
            Start timeshifting on a specific channel
            </summary>
            <param name="channelName">Name of the channel</param>
            <param name="card">returns on which card timeshifting is started</param>
            <param name="user">user credentials.</param>
            <returns>TvResult indicating whether method succeeded</returns>
        </member>
        <member name="M:TvControl.IController.IsRecording(System.String,TvControl.VirtualCard@)">
            <summary>
            Checks if the channel specified is being recorded and ifso
            returns on which card
            </summary>
            <param name="channelName">Name of the channel</param>
            <param name="card">returns card is recording the channel</param>
            <returns>true if a card is recording the channel, otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.IsRecordingSchedule(System.Int32,TvControl.VirtualCard@)">
            <summary>
            Checks if the schedule specified is currently being recorded and ifso
            returns on which card
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <param name="card">returns card is recording the channel</param>
            <returns>true if a card is recording the schedule, otherwise false</returns>
        </member>
        <member name="M:TvControl.IController.StopRecordingSchedule(System.Int32)">
            <summary>
            Stops recording the Schedule specified
            </summary>
            <param name="idSchedule">id of the Schedule</param>
            <returns></returns>
        </member>
        <member name="M:TvControl.IController.OnNewSchedule">
            <summary>
            This method should be called by a client to indicate that
            there is a new or modified Schedule in the database
            </summary>
        </member>
        <member name="M:TvControl.IController.Restart">
            <summary>
            Restarts the service.
            </summary>
        </member>
        <member name="M:TvControl.IController.IsCardInUse(System.Int32,TvControl.User@)">
            <summary>
            Determines whether the card is in use
            </summary>
            <param name="cardId">The card id.</param>
            <param name="user">The user who uses the card.</param>
            <returns>
            	<c>true</c> if card is in use; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:TvControl.IController.IdServer">
            <summary>
            Gets the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:TvControl.IController.Cards">
            <summary>
            Gets the total number of tv-cards installed.
            </summary>
            <value>Number which indicates the cards installed</value>
        </member>
        <member name="P:TvControl.IController.IsAnyCardRecording">
            <summary>
            Gets a value indicating whether any card is recording.
            </summary>
            <value>
            	<c>true</c> if this a card is recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TvControl.IController.EpgGrabberEnabled">
            <summary>
            Enable or disable the epg-grabber
            </summary>
        </member>
        <member name="P:TvControl.IController.DatabaseConnectionString">
            <summary>
            Returns the SQl connection string to the database
            </summary>
        </member>
    </members>
</doc>
