using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region CanceledScheduleDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-01T14:32:26.421875+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class CanceledScheduleDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public CanceledScheduleDataTable() {}

    protected CanceledScheduleDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new CanceledSchedule(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(CanceledSchedule);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdCanceledScheduleColumn;
    public DataColumn IdCanceledScheduleColumn {
      get {
        if (mIdCanceledScheduleColumn!=null) return mIdCanceledScheduleColumn;
        mIdCanceledScheduleColumn = GetColumn("IdCanceledSchedule", true);
        return mIdCanceledScheduleColumn;
      }
    }
    private DataColumn mIdScheduleColumn;
    public DataColumn IdScheduleColumn {
      get {
        if (mIdScheduleColumn!=null) return mIdScheduleColumn;
        mIdScheduleColumn = GetColumn("IdSchedule", true);
        return mIdScheduleColumn;
      }
    }
    private DataColumn mCancelDateTimeColumn;
    public DataColumn CancelDateTimeColumn {
      get {
        if (mCancelDateTimeColumn!=null) return mCancelDateTimeColumn;
        mCancelDateTimeColumn = GetColumn("CancelDateTime", true);
        return mCancelDateTimeColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "CanceledSchedule"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idCanceledSchedule", "IdCanceledSchedule");
      columnMappings.Add("idSchedule", "IdSchedule");
      columnMappings.Add("cancelDateTime", "CancelDateTime");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdCanceledScheduleColumn.Caption = "idCanceledSchedule";
      IdScheduleColumn.Caption = "idSchedule";
      CancelDateTimeColumn.Caption = "cancelDateTime";
    }
  }
  #endregion
  
  #region CanceledScheduleDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-01T14:32:26.421875+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class CanceledScheduleDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected CanceledScheduleDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new CanceledScheduleDataTable TypedTable {
      get { return (CanceledScheduleDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(CanceledScheduleDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    public virtual Schedule Schedule {
      get { 
        Schedule result;
        if (GetInterceptor<Schedule>("Schedule", GetScheduleCore, out result)) return result;
        return GetScheduleCore();
      }
      set { 
        if (SetInterceptor<Schedule>("Schedule", value, SetScheduleCore)) return;
        SetScheduleCore(value);
      }
    }
    private Schedule GetScheduleCore() {
      return GetParent<Schedule>(EntityRelations.Schedule_CanceledSchedule, this.PersistenceManager.DefaultQueryStrategy);
    }
    private void SetScheduleCore(Schedule value) {
      if (value == null) {
        SetNull(this.IdScheduleColumn);
      } else {
        SetColumnValue(this.IdScheduleColumn, value, value.IdScheduleColumn);
      }
      OnPropertyChanged(new PropertyChangedEventArgs("Schedule"));
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdCanceledScheduleEntityColumn =
      new EntityColumn(typeof(CanceledSchedule), "IdCanceledSchedule", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdScheduleEntityColumn =
      new EntityColumn(typeof(CanceledSchedule), "IdSchedule", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn CancelDateTimeEntityColumn =
      new EntityColumn(typeof(CanceledSchedule), "CancelDateTime", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdCanceledSchedule methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdCanceledScheduleColumn {
      get { return TypedTable.IdCanceledScheduleColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdCanceledSchedule {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdCanceledSchedule", GetIdCanceledScheduleCore, out result)) return result;
        return GetIdCanceledScheduleCore();
      }
    }
    private System.Int32 GetIdCanceledScheduleCore() {
      return (System.Int32) GetColumnValue(IdCanceledScheduleColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* IdSchedule methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdScheduleColumn {
      get { return TypedTable.IdScheduleColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdSchedule {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdSchedule", GetIdScheduleCore, out result)) return result;
        return GetIdScheduleCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("IdSchedule", value, SetIdScheduleCore)) return;
        SetIdScheduleCore(value);
      }
    }
    private System.Int32 GetIdScheduleCore() {
      return (System.Int32) GetColumnValue(IdScheduleColumn, typeof(System.Int32), false); 
    }
    private void SetIdScheduleCore(System.Int32 value) {
      SetColumnValue(IdScheduleColumn, value);
    }
        
    //**************************************
    //* CancelDateTime methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn CancelDateTimeColumn {
      get { return TypedTable.CancelDateTimeColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime CancelDateTime {
      get { 
        System.DateTime result;
        if (GetInterceptor<System.DateTime>("CancelDateTime", GetCancelDateTimeCore, out result)) return result;
        return GetCancelDateTimeCore();
      }
      set { 
        if (SetInterceptor<System.DateTime>("CancelDateTime", value, SetCancelDateTimeCore)) return;
        SetCancelDateTimeCore(value);
      }
    }
    private System.DateTime GetCancelDateTimeCore() {
      return (System.DateTime) GetColumnValue(CancelDateTimeColumn, typeof(System.DateTime), false); 
    }
    private void SetCancelDateTimeCore(System.DateTime value) {
      SetColumnValue(CancelDateTimeColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
