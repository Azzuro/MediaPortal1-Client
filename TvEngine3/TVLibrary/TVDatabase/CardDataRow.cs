using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region CardDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-09-26T09:20:03.6154322+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class CardDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public CardDataTable() {}

    protected CardDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Card(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Card);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdCardColumn;
    public DataColumn IdCardColumn {
      get {
        if (mIdCardColumn!=null) return mIdCardColumn;
        mIdCardColumn = GetColumn("IdCard", true);
        return mIdCardColumn;
      }
    }
    private DataColumn mDevicePathColumn;
    public DataColumn DevicePathColumn {
      get {
        if (mDevicePathColumn!=null) return mDevicePathColumn;
        mDevicePathColumn = GetColumn("DevicePath", true);
        return mDevicePathColumn;
      }
    }
    private DataColumn mNameColumn;
    public DataColumn NameColumn {
      get {
        if (mNameColumn!=null) return mNameColumn;
        mNameColumn = GetColumn("Name", true);
        return mNameColumn;
      }
    }
    private DataColumn mPriorityColumn;
    public DataColumn PriorityColumn {
      get {
        if (mPriorityColumn!=null) return mPriorityColumn;
        mPriorityColumn = GetColumn("Priority", true);
        return mPriorityColumn;
      }
    }
    private DataColumn mGrabEPGColumn;
    public DataColumn GrabEPGColumn {
      get {
        if (mGrabEPGColumn!=null) return mGrabEPGColumn;
        mGrabEPGColumn = GetColumn("GrabEPG", true);
        return mGrabEPGColumn;
      }
    }
    private DataColumn mLastEpgGrabColumn;
    public DataColumn LastEpgGrabColumn {
      get {
        if (mLastEpgGrabColumn!=null) return mLastEpgGrabColumn;
        mLastEpgGrabColumn = GetColumn("LastEpgGrab", true);
        return mLastEpgGrabColumn;
      }
    }
    private DataColumn mRecordingFolderColumn;
    public DataColumn RecordingFolderColumn {
      get {
        if (mRecordingFolderColumn!=null) return mRecordingFolderColumn;
        mRecordingFolderColumn = GetColumn("RecordingFolder", true);
        return mRecordingFolderColumn;
      }
    }
    private DataColumn mIdServerColumn;
    public DataColumn IdServerColumn {
      get {
        if (mIdServerColumn!=null) return mIdServerColumn;
        mIdServerColumn = GetColumn("IdServer", true);
        return mIdServerColumn;
      }
    }
    private DataColumn mEnabledColumn;
    public DataColumn EnabledColumn {
      get {
        if (mEnabledColumn!=null) return mEnabledColumn;
        mEnabledColumn = GetColumn("Enabled", true);
        return mEnabledColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Card"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idCard", "IdCard");
      columnMappings.Add("devicePath", "DevicePath");
      columnMappings.Add("name", "Name");
      columnMappings.Add("priority", "Priority");
      columnMappings.Add("grabEPG", "GrabEPG");
      columnMappings.Add("lastEpgGrab", "LastEpgGrab");
      columnMappings.Add("recordingFolder", "RecordingFolder");
      columnMappings.Add("idServer", "IdServer");
      columnMappings.Add("enabled", "Enabled");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdCardColumn.Caption = "idCard";
      DevicePathColumn.Caption = "devicePath";
      NameColumn.Caption = "name";
      PriorityColumn.Caption = "priority";
      GrabEPGColumn.Caption = "grabEPG";
      LastEpgGrabColumn.Caption = "lastEpgGrab";
      RecordingFolderColumn.Caption = "recordingFolder";
      IdServerColumn.Caption = "idServer";
      EnabledColumn.Caption = "enabled";
    }
  }
  #endregion
  
  #region CardDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-09-26T09:20:03.6154322+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class CardDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected CardDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new CardDataTable TypedTable {
      get { return (CardDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(CardDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    public virtual ReadOnlyEntityList<ChannelMap> ChannelMaps {
      get { 
        ReadOnlyEntityList<ChannelMap> result;
        if (GetInterceptor<ReadOnlyEntityList<ChannelMap>>("ChannelMaps", GetChannelMapsCore, out result)) return result;
        return GetChannelMapsCore();
      }
    }
    private ReadOnlyEntityList<ChannelMap> GetChannelMapsCore() {
      return this.GetManagedChildren<ChannelMap>(EntityRelations.Card_ChannelMap);
    } 

    public virtual Server Server {
      get { 
        Server result;
        if (GetInterceptor<Server>("Server", GetServerCore, out result)) return result;
        return GetServerCore();
      }
      set { 
        if (SetInterceptor<Server>("Server", value, SetServerCore)) return;
        SetServerCore(value);
      }
    }
    private Server GetServerCore() {
      return GetParent<Server>(EntityRelations.Server_Card, this.PersistenceManager.DefaultQueryStrategy);
    }
    private void SetServerCore(Server value) {
      if (value == null) {
        SetNull(this.IdServerColumn);
      } else {
        SetColumnValue(this.IdServerColumn, value, value.IdServerColumn);
      }
      OnPropertyChanged(new PropertyChangedEventArgs("Server"));
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdCardEntityColumn =
      new EntityColumn(typeof(Card), "IdCard", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn DevicePathEntityColumn =
      new EntityColumn(typeof(Card), "DevicePath", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn NameEntityColumn =
      new EntityColumn(typeof(Card), "Name", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PriorityEntityColumn =
      new EntityColumn(typeof(Card), "Priority", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn GrabEPGEntityColumn =
      new EntityColumn(typeof(Card), "GrabEPG", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn LastEpgGrabEntityColumn =
      new EntityColumn(typeof(Card), "LastEpgGrab", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn RecordingFolderEntityColumn =
      new EntityColumn(typeof(Card), "RecordingFolder", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdServerEntityColumn =
      new EntityColumn(typeof(Card), "IdServer", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn EnabledEntityColumn =
      new EntityColumn(typeof(Card), "Enabled", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdCard methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdCardColumn {
      get { return TypedTable.IdCardColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdCard {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdCard", GetIdCardCore, out result)) return result;
        return GetIdCardCore();
      }
    }
    private System.Int32 GetIdCardCore() {
      return (System.Int32) GetColumnValue(IdCardColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* DevicePath methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn DevicePathColumn {
      get { return TypedTable.DevicePathColumn; }
    }

    [MaxTextLength(2000)]
    [DBDataType(typeof(System.String))]
    public virtual System.String DevicePath {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("DevicePath", GetDevicePathCore, out result)) return result;
        return GetDevicePathCore();
      }
      set { 
        if (SetInterceptor<System.String>("DevicePath", value, SetDevicePathCore)) return;
        SetDevicePathCore(value);
      }
    }
    private System.String GetDevicePathCore() {
      return (System.String) GetColumnValue(DevicePathColumn, typeof(System.String), false); 
    }
    private void SetDevicePathCore(System.String value) {
      SetColumnValue(DevicePathColumn, value);
    }
        
    //**************************************
    //* Name methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn NameColumn {
      get { return TypedTable.NameColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Name {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("Name", GetNameCore, out result)) return result;
        return GetNameCore();
      }
      set { 
        if (SetInterceptor<System.String>("Name", value, SetNameCore)) return;
        SetNameCore(value);
      }
    }
    private System.String GetNameCore() {
      return (System.String) GetColumnValue(NameColumn, typeof(System.String), false); 
    }
    private void SetNameCore(System.String value) {
      SetColumnValue(NameColumn, value);
    }
        
    //**************************************
    //* Priority methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PriorityColumn {
      get { return TypedTable.PriorityColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Priority {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Priority", GetPriorityCore, out result)) return result;
        return GetPriorityCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Priority", value, SetPriorityCore)) return;
        SetPriorityCore(value);
      }
    }
    private System.Int32 GetPriorityCore() {
      return (System.Int32) GetColumnValue(PriorityColumn, typeof(System.Int32), false); 
    }
    private void SetPriorityCore(System.Int32 value) {
      SetColumnValue(PriorityColumn, value);
    }
        
    //**************************************
    //* GrabEPG methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn GrabEPGColumn {
      get { return TypedTable.GrabEPGColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean GrabEPG {
      get { 
        System.Boolean result;
        if (GetInterceptor<System.Boolean>("GrabEPG", GetGrabEPGCore, out result)) return result;
        return GetGrabEPGCore();
      }
      set { 
        if (SetInterceptor<System.Boolean>("GrabEPG", value, SetGrabEPGCore)) return;
        SetGrabEPGCore(value);
      }
    }
    private System.Boolean GetGrabEPGCore() {
      return (System.Boolean) GetColumnValue(GrabEPGColumn, typeof(System.Boolean), false); 
    }
    private void SetGrabEPGCore(System.Boolean value) {
      SetColumnValue(GrabEPGColumn, value);
    }
        
    //**************************************
    //* LastEpgGrab methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn LastEpgGrabColumn {
      get { return TypedTable.LastEpgGrabColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime LastEpgGrab {
      get { 
        System.DateTime result;
        if (GetInterceptor<System.DateTime>("LastEpgGrab", GetLastEpgGrabCore, out result)) return result;
        return GetLastEpgGrabCore();
      }
      set { 
        if (SetInterceptor<System.DateTime>("LastEpgGrab", value, SetLastEpgGrabCore)) return;
        SetLastEpgGrabCore(value);
      }
    }
    private System.DateTime GetLastEpgGrabCore() {
      return (System.DateTime) GetColumnValue(LastEpgGrabColumn, typeof(System.DateTime), false); 
    }
    private void SetLastEpgGrabCore(System.DateTime value) {
      SetColumnValue(LastEpgGrabColumn, value);
    }
        
    //**************************************
    //* RecordingFolder methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn RecordingFolderColumn {
      get { return TypedTable.RecordingFolderColumn; }
    }

    [MaxTextLength(256)]
    [DBDataType(typeof(System.String))]
    public virtual System.String RecordingFolder {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("RecordingFolder", GetRecordingFolderCore, out result)) return result;
        return GetRecordingFolderCore();
      }
      set { 
        if (SetInterceptor<System.String>("RecordingFolder", value, SetRecordingFolderCore)) return;
        SetRecordingFolderCore(value);
      }
    }
    private System.String GetRecordingFolderCore() {
      return (System.String) GetColumnValue(RecordingFolderColumn, typeof(System.String), false); 
    }
    private void SetRecordingFolderCore(System.String value) {
      SetColumnValue(RecordingFolderColumn, value);
    }
        
    //**************************************
    //* IdServer methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdServerColumn {
      get { return TypedTable.IdServerColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdServer {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdServer", GetIdServerCore, out result)) return result;
        return GetIdServerCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("IdServer", value, SetIdServerCore)) return;
        SetIdServerCore(value);
      }
    }
    private System.Int32 GetIdServerCore() {
      return (System.Int32) GetColumnValue(IdServerColumn, typeof(System.Int32), false); 
    }
    private void SetIdServerCore(System.Int32 value) {
      SetColumnValue(IdServerColumn, value);
    }
        
    //**************************************
    //* Enabled methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn EnabledColumn {
      get { return TypedTable.EnabledColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean Enabled {
      get { 
        System.Boolean result;
        if (GetInterceptor<System.Boolean>("Enabled", GetEnabledCore, out result)) return result;
        return GetEnabledCore();
      }
      set { 
        if (SetInterceptor<System.Boolean>("Enabled", value, SetEnabledCore)) return;
        SetEnabledCore(value);
      }
    }
    private System.Boolean GetEnabledCore() {
      return (System.Boolean) GetColumnValue(EnabledColumn, typeof(System.Boolean), false); 
    }
    private void SetEnabledCore(System.Boolean value) {
      SetColumnValue(EnabledColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
