using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region CardDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-17T14:35:11.25+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class CardDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public CardDataTable() {}

    protected CardDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Card(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Card);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdCardColumn;
    public DataColumn IdCardColumn {
      get {
        if (mIdCardColumn!=null) return mIdCardColumn;
        mIdCardColumn = GetColumn("IdCard", true);
        return mIdCardColumn;
      }
    }
    private DataColumn mDevicePathColumn;
    public DataColumn DevicePathColumn {
      get {
        if (mDevicePathColumn!=null) return mDevicePathColumn;
        mDevicePathColumn = GetColumn("DevicePath", true);
        return mDevicePathColumn;
      }
    }
    private DataColumn mNameColumn;
    public DataColumn NameColumn {
      get {
        if (mNameColumn!=null) return mNameColumn;
        mNameColumn = GetColumn("Name", true);
        return mNameColumn;
      }
    }
    private DataColumn mPriorityColumn;
    public DataColumn PriorityColumn {
      get {
        if (mPriorityColumn!=null) return mPriorityColumn;
        mPriorityColumn = GetColumn("Priority", true);
        return mPriorityColumn;
      }
    }
    private DataColumn mGrabEPGColumn;
    public DataColumn GrabEPGColumn {
      get {
        if (mGrabEPGColumn!=null) return mGrabEPGColumn;
        mGrabEPGColumn = GetColumn("GrabEPG", true);
        return mGrabEPGColumn;
      }
    }
    private DataColumn mLastEpgGrabColumn;
    public DataColumn LastEpgGrabColumn {
      get {
        if (mLastEpgGrabColumn!=null) return mLastEpgGrabColumn;
        mLastEpgGrabColumn = GetColumn("LastEpgGrab", true);
        return mLastEpgGrabColumn;
      }
    }
    private DataColumn mRecordingFolderColumn;
    public DataColumn RecordingFolderColumn {
      get {
        if (mRecordingFolderColumn!=null) return mRecordingFolderColumn;
        mRecordingFolderColumn = GetColumn("RecordingFolder", true);
        return mRecordingFolderColumn;
      }
    }
    private DataColumn mIdServerColumn;
    public DataColumn IdServerColumn {
      get {
        if (mIdServerColumn!=null) return mIdServerColumn;
        mIdServerColumn = GetColumn("IdServer", true);
        return mIdServerColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Card"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idCard", "IdCard");
      columnMappings.Add("devicePath", "DevicePath");
      columnMappings.Add("name", "Name");
      columnMappings.Add("priority", "Priority");
      columnMappings.Add("grabEPG", "GrabEPG");
      columnMappings.Add("lastEpgGrab", "LastEpgGrab");
      columnMappings.Add("recordingFolder", "RecordingFolder");
      columnMappings.Add("idServer", "IdServer");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdCardColumn.Caption = "idCard";
      DevicePathColumn.Caption = "devicePath";
      NameColumn.Caption = "name";
      PriorityColumn.Caption = "priority";
      GrabEPGColumn.Caption = "grabEPG";
      LastEpgGrabColumn.Caption = "lastEpgGrab";
      RecordingFolderColumn.Caption = "recordingFolder";
      IdServerColumn.Caption = "idServer";
    }
  }
  #endregion
  
  #region CardDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-17T14:35:11.25+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class CardDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected CardDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new CardDataTable TypedTable {
      get { return (CardDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(CardDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************

    public virtual ReadOnlyEntityList<ChannelMap> ChannelMaps {
      get {
        return this.GetManagedChildren<ChannelMap>(EntityRelations.Card_ChannelMap);
      }
    }

    public virtual Server Server {
      get {
        return this.PersistenceManager.GetParent<Server>(this, EntityRelations.Server_Card);
      }
      set {
        if (value == null) {
          this.SetNull(this.IdServerColumn);
        } else {
          SetColumnValue(this.IdServerColumn, value, value.IdServerColumn);
        }
      }
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdCardEntityColumn =
      new EntityColumn(typeof(Card), "IdCard", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn DevicePathEntityColumn =
      new EntityColumn(typeof(Card), "DevicePath", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn NameEntityColumn =
      new EntityColumn(typeof(Card), "Name", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PriorityEntityColumn =
      new EntityColumn(typeof(Card), "Priority", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn GrabEPGEntityColumn =
      new EntityColumn(typeof(Card), "GrabEPG", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn LastEpgGrabEntityColumn =
      new EntityColumn(typeof(Card), "LastEpgGrab", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn RecordingFolderEntityColumn =
      new EntityColumn(typeof(Card), "RecordingFolder", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdServerEntityColumn =
      new EntityColumn(typeof(Card), "IdServer", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdCard methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdCardColumn {
      get { return TypedTable.IdCardColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdCard {
      get { return (System.Int32) GetColumnValue(IdCardColumn, typeof(System.Int32), false); }
    }
    //**************************************
    //* DevicePath methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn DevicePathColumn {
      get { return TypedTable.DevicePathColumn; }
    }

    [MaxTextLength(2000)]
    [DBDataType(typeof(System.String))]
    public virtual System.String DevicePath {
      get { return (System.String) GetColumnValue(DevicePathColumn, typeof(System.String), false); }
      set { this.SetColumnValue(DevicePathColumn, value); }
    }
    //**************************************
    //* Name methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn NameColumn {
      get { return TypedTable.NameColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Name {
      get { return (System.String) GetColumnValue(NameColumn, typeof(System.String), false); }
      set { this.SetColumnValue(NameColumn, value); }
    }
    //**************************************
    //* Priority methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PriorityColumn {
      get { return TypedTable.PriorityColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Priority {
      get { return (System.Int32) GetColumnValue(PriorityColumn, typeof(System.Int32), false); }
      set { this.SetColumnValue(PriorityColumn, value); }
    }
    //**************************************
    //* GrabEPG methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn GrabEPGColumn {
      get { return TypedTable.GrabEPGColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean GrabEPG {
      get { return (System.Boolean) GetColumnValue(GrabEPGColumn, typeof(System.Boolean), false); }
      set { this.SetColumnValue(GrabEPGColumn, value); }
    }
    //**************************************
    //* LastEpgGrab methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn LastEpgGrabColumn {
      get { return TypedTable.LastEpgGrabColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime LastEpgGrab {
      get { return (System.DateTime) GetColumnValue(LastEpgGrabColumn, typeof(System.DateTime), false); }
      set { this.SetColumnValue(LastEpgGrabColumn, value); }
    }
    //**************************************
    //* RecordingFolder methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn RecordingFolderColumn {
      get { return TypedTable.RecordingFolderColumn; }
    }

    [MaxTextLength(256)]
    [DBDataType(typeof(System.String))]
    public virtual System.String RecordingFolder {
      get { return (System.String) GetColumnValue(RecordingFolderColumn, typeof(System.String), false); }
      set { this.SetColumnValue(RecordingFolderColumn, value); }
    }
    //**************************************
    //* IdServer methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdServerColumn {
      get { return TypedTable.IdServerColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdServer {
      get { return (System.Int32) GetColumnValue(IdServerColumn, typeof(System.Int32), false); }
      set { this.SetColumnValue(IdServerColumn, value); }
    }
    #endregion
    
    
  }
  #endregion
}
