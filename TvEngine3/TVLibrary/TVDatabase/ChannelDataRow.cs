using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region ChannelDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-01T14:28:41.546875+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class ChannelDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public ChannelDataTable() {}

    protected ChannelDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Channel(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Channel);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdChannelColumn;
    public DataColumn IdChannelColumn {
      get {
        if (mIdChannelColumn!=null) return mIdChannelColumn;
        mIdChannelColumn = GetColumn("IdChannel", true);
        return mIdChannelColumn;
      }
    }
    private DataColumn mNameColumn;
    public DataColumn NameColumn {
      get {
        if (mNameColumn!=null) return mNameColumn;
        mNameColumn = GetColumn("Name", true);
        return mNameColumn;
      }
    }
    private DataColumn mIsRadioColumn;
    public DataColumn IsRadioColumn {
      get {
        if (mIsRadioColumn!=null) return mIsRadioColumn;
        mIsRadioColumn = GetColumn("IsRadio", true);
        return mIsRadioColumn;
      }
    }
    private DataColumn mIsTvColumn;
    public DataColumn IsTvColumn {
      get {
        if (mIsTvColumn!=null) return mIsTvColumn;
        mIsTvColumn = GetColumn("IsTv", true);
        return mIsTvColumn;
      }
    }
    private DataColumn mTimesWatchedColumn;
    public DataColumn TimesWatchedColumn {
      get {
        if (mTimesWatchedColumn!=null) return mTimesWatchedColumn;
        mTimesWatchedColumn = GetColumn("TimesWatched", true);
        return mTimesWatchedColumn;
      }
    }
    private DataColumn mTotalTimeWatchedColumn;
    public DataColumn TotalTimeWatchedColumn {
      get {
        if (mTotalTimeWatchedColumn!=null) return mTotalTimeWatchedColumn;
        mTotalTimeWatchedColumn = GetColumn("TotalTimeWatched", true);
        return mTotalTimeWatchedColumn;
      }
    }
    private DataColumn mGrabEpgColumn;
    public DataColumn GrabEpgColumn {
      get {
        if (mGrabEpgColumn!=null) return mGrabEpgColumn;
        mGrabEpgColumn = GetColumn("GrabEpg", true);
        return mGrabEpgColumn;
      }
    }
    private DataColumn mLastGrabTimeColumn;
    public DataColumn LastGrabTimeColumn {
      get {
        if (mLastGrabTimeColumn!=null) return mLastGrabTimeColumn;
        mLastGrabTimeColumn = GetColumn("LastGrabTime", true);
        return mLastGrabTimeColumn;
      }
    }
    private DataColumn mSortOrderColumn;
    public DataColumn SortOrderColumn {
      get {
        if (mSortOrderColumn!=null) return mSortOrderColumn;
        mSortOrderColumn = GetColumn("SortOrder", true);
        return mSortOrderColumn;
      }
    }
    private DataColumn mVisibleInGuideColumn;
    public DataColumn VisibleInGuideColumn {
      get {
        if (mVisibleInGuideColumn!=null) return mVisibleInGuideColumn;
        mVisibleInGuideColumn = GetColumn("VisibleInGuide", true);
        return mVisibleInGuideColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Channel"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idChannel", "IdChannel");
      columnMappings.Add("name", "Name");
      columnMappings.Add("isRadio", "IsRadio");
      columnMappings.Add("isTv", "IsTv");
      columnMappings.Add("timesWatched", "TimesWatched");
      columnMappings.Add("totalTimeWatched", "TotalTimeWatched");
      columnMappings.Add("grabEpg", "GrabEpg");
      columnMappings.Add("lastGrabTime", "LastGrabTime");
      columnMappings.Add("sortOrder", "SortOrder");
      columnMappings.Add("visibleInGuide", "VisibleInGuide");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdChannelColumn.Caption = "idChannel";
      NameColumn.Caption = "name";
      IsRadioColumn.Caption = "isRadio";
      IsTvColumn.Caption = "isTv";
      TimesWatchedColumn.Caption = "timesWatched";
      TotalTimeWatchedColumn.Caption = "totalTimeWatched";
      GrabEpgColumn.Caption = "grabEpg";
      LastGrabTimeColumn.Caption = "lastGrabTime";
      SortOrderColumn.Caption = "sortOrder";
      VisibleInGuideColumn.Caption = "visibleInGuide";
    }
  }
  #endregion
  
  #region ChannelDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-01T14:28:41.546875+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class ChannelDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected ChannelDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new ChannelDataTable TypedTable {
      get { return (ChannelDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(ChannelDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************

    public virtual ReadOnlyEntityList<ChannelMap> ChannelMaps {
      get {
        return this.GetManagedChildren<ChannelMap>(EntityRelations.Channel_ChannelMap);
      }
    }

    public virtual ReadOnlyEntityList<GroupMap> GroupMaps {
      get {
        return this.GetManagedChildren<GroupMap>(EntityRelations.Channel_GroupMap);
      }
    }

    public virtual ReadOnlyEntityList<Program> Programs {
      get {
        return this.GetManagedChildren<Program>(EntityRelations.Channel_Program);
      }
    }

    public virtual ReadOnlyEntityList<Recording> Recordings {
      get {
        return this.GetManagedChildren<Recording>(EntityRelations.Channel_Recording);
      }
    }

    public virtual ReadOnlyEntityList<TuningDetail> TuningDetails {
      get {
        return this.GetManagedChildren<TuningDetail>(EntityRelations.Channel_TuningDetail);
      }
    }

    public virtual ReadOnlyEntityList<Schedule> Schedules {
      get {
        return this.GetManagedChildren<Schedule>(EntityRelations.Channel_Schedule);
      }
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdChannelEntityColumn =
      new EntityColumn(typeof(Channel), "IdChannel", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn NameEntityColumn =
      new EntityColumn(typeof(Channel), "Name", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IsRadioEntityColumn =
      new EntityColumn(typeof(Channel), "IsRadio", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IsTvEntityColumn =
      new EntityColumn(typeof(Channel), "IsTv", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn TimesWatchedEntityColumn =
      new EntityColumn(typeof(Channel), "TimesWatched", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn TotalTimeWatchedEntityColumn =
      new EntityColumn(typeof(Channel), "TotalTimeWatched", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn GrabEpgEntityColumn =
      new EntityColumn(typeof(Channel), "GrabEpg", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn LastGrabTimeEntityColumn =
      new EntityColumn(typeof(Channel), "LastGrabTime", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn SortOrderEntityColumn =
      new EntityColumn(typeof(Channel), "SortOrder", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn VisibleInGuideEntityColumn =
      new EntityColumn(typeof(Channel), "VisibleInGuide", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdChannelColumn {
      get { return TypedTable.IdChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdChannel {
      get { return (System.Int32) GetColumnValue(IdChannelColumn, typeof(System.Int32), false); }
    }
    //**************************************
    //* Name methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn NameColumn {
      get { return TypedTable.NameColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Name {
      get { return (System.String) GetColumnValue(NameColumn, typeof(System.String), false); }
      set { this.SetColumnValue(NameColumn, value); }
    }
    //**************************************
    //* IsRadio methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IsRadioColumn {
      get { return TypedTable.IsRadioColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean IsRadio {
      get { return (System.Boolean) GetColumnValue(IsRadioColumn, typeof(System.Boolean), false); }
      set { this.SetColumnValue(IsRadioColumn, value); }
    }
    //**************************************
    //* IsTv methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IsTvColumn {
      get { return TypedTable.IsTvColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean IsTv {
      get { return (System.Boolean) GetColumnValue(IsTvColumn, typeof(System.Boolean), false); }
      set { this.SetColumnValue(IsTvColumn, value); }
    }
    //**************************************
    //* TimesWatched methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn TimesWatchedColumn {
      get { return TypedTable.TimesWatchedColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 TimesWatched {
      get { return (System.Int32) GetColumnValue(TimesWatchedColumn, typeof(System.Int32), false); }
      set { this.SetColumnValue(TimesWatchedColumn, value); }
    }
    //**************************************
    //* TotalTimeWatched methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn TotalTimeWatchedColumn {
      get { return TypedTable.TotalTimeWatchedColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime TotalTimeWatched {
      get { return (System.DateTime) GetColumnValue(TotalTimeWatchedColumn, typeof(System.DateTime), false); }
      set { this.SetColumnValue(TotalTimeWatchedColumn, value); }
    }
    //**************************************
    //* GrabEpg methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn GrabEpgColumn {
      get { return TypedTable.GrabEpgColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean GrabEpg {
      get { return (System.Boolean) GetColumnValue(GrabEpgColumn, typeof(System.Boolean), false); }
      set { this.SetColumnValue(GrabEpgColumn, value); }
    }
    //**************************************
    //* LastGrabTime methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn LastGrabTimeColumn {
      get { return TypedTable.LastGrabTimeColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime LastGrabTime {
      get { return (System.DateTime) GetColumnValue(LastGrabTimeColumn, typeof(System.DateTime), false); }
      set { this.SetColumnValue(LastGrabTimeColumn, value); }
    }
    //**************************************
    //* SortOrder methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn SortOrderColumn {
      get { return TypedTable.SortOrderColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 SortOrder {
      get { return (System.Int32) GetColumnValue(SortOrderColumn, typeof(System.Int32), false); }
      set { this.SetColumnValue(SortOrderColumn, value); }
    }
    //**************************************
    //* VisibleInGuide methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn VisibleInGuideColumn {
      get { return TypedTable.VisibleInGuideColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean VisibleInGuide {
      get { return (System.Boolean) GetColumnValue(VisibleInGuideColumn, typeof(System.Boolean), false); }
      set { this.SetColumnValue(VisibleInGuideColumn, value); }
    }
    #endregion
    
    
  }
  #endregion
}
