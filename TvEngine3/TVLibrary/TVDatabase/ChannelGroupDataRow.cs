using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region ChannelGroupDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-06-26T06:48:32.78125+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class ChannelGroupDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public ChannelGroupDataTable() {}

    protected ChannelGroupDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new ChannelGroup(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(ChannelGroup);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdGroupColumn;
    public DataColumn IdGroupColumn {
      get {
        if (mIdGroupColumn!=null) return mIdGroupColumn;
        mIdGroupColumn = GetColumn("IdGroup", true);
        return mIdGroupColumn;
      }
    }
    private DataColumn mGroupNameColumn;
    public DataColumn GroupNameColumn {
      get {
        if (mGroupNameColumn!=null) return mGroupNameColumn;
        mGroupNameColumn = GetColumn("GroupName", true);
        return mGroupNameColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "ChannelGroup"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idGroup", "IdGroup");
      columnMappings.Add("groupName", "GroupName");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdGroupColumn.Caption = "idGroup";
      GroupNameColumn.Caption = "groupName";
    }
  }
  #endregion
  
  #region ChannelGroupDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-06-26T06:48:32.78125+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class ChannelGroupDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected ChannelGroupDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new ChannelGroupDataTable TypedTable {
      get { return (ChannelGroupDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(ChannelGroupDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    public virtual ReadOnlyEntityList<GroupMap> GroupMaps {
      get { 
        ReadOnlyEntityList<GroupMap> result;
        if (GetInterceptor<ReadOnlyEntityList<GroupMap>>("GroupMaps", GetGroupMapsCore, out result)) return result;
        return GetGroupMapsCore();
      }
    }
    private ReadOnlyEntityList<GroupMap> GetGroupMapsCore() {
      return this.GetManagedChildren<GroupMap>(EntityRelations.ChannelGroup_GroupMap);
    } 

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdGroupEntityColumn =
      new EntityColumn(typeof(ChannelGroup), "IdGroup", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn GroupNameEntityColumn =
      new EntityColumn(typeof(ChannelGroup), "GroupName", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdGroup methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdGroupColumn {
      get { return TypedTable.IdGroupColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdGroup {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdGroup", GetIdGroupCore, out result)) return result;
        return GetIdGroupCore();
      }
    }
    private System.Int32 GetIdGroupCore() {
      return (System.Int32) GetColumnValue(IdGroupColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* GroupName methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn GroupNameColumn {
      get { return TypedTable.GroupNameColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String GroupName {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("GroupName", GetGroupNameCore, out result)) return result;
        return GetGroupNameCore();
      }
      set { 
        if (SetInterceptor<System.String>("GroupName", value, SetGroupNameCore)) return;
        SetGroupNameCore(value);
      }
    }
    private System.String GetGroupNameCore() {
      return (System.String) GetColumnValue(GroupNameColumn, typeof(System.String), false); 
    }
    private void SetGroupNameCore(System.String value) {
      SetColumnValue(GroupNameColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
