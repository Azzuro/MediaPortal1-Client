using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region ChannelMapDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-06-26T06:48:32.75+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class ChannelMapDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public ChannelMapDataTable() {}

    protected ChannelMapDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new ChannelMap(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(ChannelMap);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdChannelMapColumn;
    public DataColumn IdChannelMapColumn {
      get {
        if (mIdChannelMapColumn!=null) return mIdChannelMapColumn;
        mIdChannelMapColumn = GetColumn("IdChannelMap", true);
        return mIdChannelMapColumn;
      }
    }
    private DataColumn mIdChannelColumn;
    public DataColumn IdChannelColumn {
      get {
        if (mIdChannelColumn!=null) return mIdChannelColumn;
        mIdChannelColumn = GetColumn("IdChannel", true);
        return mIdChannelColumn;
      }
    }
    private DataColumn mIdCardColumn;
    public DataColumn IdCardColumn {
      get {
        if (mIdCardColumn!=null) return mIdCardColumn;
        mIdCardColumn = GetColumn("IdCard", true);
        return mIdCardColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "ChannelMap"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idChannelMap", "IdChannelMap");
      columnMappings.Add("idChannel", "IdChannel");
      columnMappings.Add("idCard", "IdCard");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdChannelMapColumn.Caption = "idChannelMap";
      IdChannelColumn.Caption = "idChannel";
      IdCardColumn.Caption = "idCard";
    }
  }
  #endregion
  
  #region ChannelMapDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-06-26T06:48:32.75+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class ChannelMapDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected ChannelMapDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new ChannelMapDataTable TypedTable {
      get { return (ChannelMapDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(ChannelMapDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************

    public virtual Card Card {
      get {
        return this.PersistenceManager.GetParent<Card>(this, EntityRelations.Card_ChannelMap);
      }
      set {
        if (value == null) {
          this.SetNull(this.IdCardColumn);
        } else {
          SetColumnValue(this.IdCardColumn, value, value.IdCardColumn);
        }
      }
    }

    public virtual Channel Channel {
      get {
        return this.PersistenceManager.GetParent<Channel>(this, EntityRelations.Channel_ChannelMap);
      }
      set {
        if (value == null) {
          this.SetNull(this.IdChannelColumn);
        } else {
          SetColumnValue(this.IdChannelColumn, value, value.IdChannelColumn);
        }
      }
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdChannelMapEntityColumn =
      new EntityColumn(typeof(ChannelMap), "IdChannelMap", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdChannelEntityColumn =
      new EntityColumn(typeof(ChannelMap), "IdChannel", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdCardEntityColumn =
      new EntityColumn(typeof(ChannelMap), "IdCard", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdChannelMap methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdChannelMapColumn {
      get { return TypedTable.IdChannelMapColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdChannelMap {
      get { return (System.Int32) GetColumnValue(IdChannelMapColumn, typeof(System.Int32), false); }
    }
    //**************************************
    //* IdChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdChannelColumn {
      get { return TypedTable.IdChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdChannel {
      get { return (System.Int32) GetColumnValue(IdChannelColumn, typeof(System.Int32), false); }
      set { this.SetColumnValue(IdChannelColumn, value); }
    }
    //**************************************
    //* IdCard methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdCardColumn {
      get { return TypedTable.IdCardColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdCard {
      get { return (System.Int32) GetColumnValue(IdCardColumn, typeof(System.Int32), false); }
      set { this.SetColumnValue(IdCardColumn, value); }
    }
    #endregion
    
    
  }
  #endregion
}
