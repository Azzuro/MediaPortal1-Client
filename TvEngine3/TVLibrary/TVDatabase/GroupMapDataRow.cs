using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region GroupMapDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-06-26T06:48:32.78125+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class GroupMapDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public GroupMapDataTable() {}

    protected GroupMapDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new GroupMap(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(GroupMap);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdMapColumn;
    public DataColumn IdMapColumn {
      get {
        if (mIdMapColumn!=null) return mIdMapColumn;
        mIdMapColumn = GetColumn("IdMap", true);
        return mIdMapColumn;
      }
    }
    private DataColumn mIdGroupColumn;
    public DataColumn IdGroupColumn {
      get {
        if (mIdGroupColumn!=null) return mIdGroupColumn;
        mIdGroupColumn = GetColumn("IdGroup", true);
        return mIdGroupColumn;
      }
    }
    private DataColumn mIdChannelColumn;
    public DataColumn IdChannelColumn {
      get {
        if (mIdChannelColumn!=null) return mIdChannelColumn;
        mIdChannelColumn = GetColumn("IdChannel", true);
        return mIdChannelColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "GroupMap"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idMap", "IdMap");
      columnMappings.Add("idGroup", "IdGroup");
      columnMappings.Add("idChannel", "IdChannel");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdMapColumn.Caption = "idMap";
      IdGroupColumn.Caption = "idGroup";
      IdChannelColumn.Caption = "idChannel";
    }
  }
  #endregion
  
  #region GroupMapDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-06-26T06:48:32.78125+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class GroupMapDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected GroupMapDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new GroupMapDataTable TypedTable {
      get { return (GroupMapDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(GroupMapDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    public virtual Channel Channel {
      get { 
        Channel result;
        if (GetInterceptor<Channel>("Channel", GetChannelCore, out result)) return result;
        return GetChannelCore();
      }
      set { 
        if (SetInterceptor<Channel>("Channel", value, SetChannelCore)) return;
        SetChannelCore(value);
      }
    }
    private Channel GetChannelCore() {
      return GetParent<Channel>(EntityRelations.Channel_GroupMap, this.PersistenceManager.DefaultQueryStrategy);
    }
    private void SetChannelCore(Channel value) {
      if (value == null) {
        SetNull(this.IdChannelColumn);
      } else {
        SetColumnValue(this.IdChannelColumn, value, value.IdChannelColumn);
      }
      OnPropertyChanged(new PropertyChangedEventArgs("Channel"));
    }

    public virtual ChannelGroup ChannelGroup {
      get { 
        ChannelGroup result;
        if (GetInterceptor<ChannelGroup>("ChannelGroup", GetChannelGroupCore, out result)) return result;
        return GetChannelGroupCore();
      }
      set { 
        if (SetInterceptor<ChannelGroup>("ChannelGroup", value, SetChannelGroupCore)) return;
        SetChannelGroupCore(value);
      }
    }
    private ChannelGroup GetChannelGroupCore() {
      return GetParent<ChannelGroup>(EntityRelations.ChannelGroup_GroupMap, this.PersistenceManager.DefaultQueryStrategy);
    }
    private void SetChannelGroupCore(ChannelGroup value) {
      if (value == null) {
        SetNull(this.IdGroupColumn);
      } else {
        SetColumnValue(this.IdGroupColumn, value, value.IdGroupColumn);
      }
      OnPropertyChanged(new PropertyChangedEventArgs("ChannelGroup"));
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdMapEntityColumn =
      new EntityColumn(typeof(GroupMap), "IdMap", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdGroupEntityColumn =
      new EntityColumn(typeof(GroupMap), "IdGroup", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdChannelEntityColumn =
      new EntityColumn(typeof(GroupMap), "IdChannel", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdMap methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdMapColumn {
      get { return TypedTable.IdMapColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdMap {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdMap", GetIdMapCore, out result)) return result;
        return GetIdMapCore();
      }
    }
    private System.Int32 GetIdMapCore() {
      return (System.Int32) GetColumnValue(IdMapColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* IdGroup methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdGroupColumn {
      get { return TypedTable.IdGroupColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdGroup {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdGroup", GetIdGroupCore, out result)) return result;
        return GetIdGroupCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("IdGroup", value, SetIdGroupCore)) return;
        SetIdGroupCore(value);
      }
    }
    private System.Int32 GetIdGroupCore() {
      return (System.Int32) GetColumnValue(IdGroupColumn, typeof(System.Int32), false); 
    }
    private void SetIdGroupCore(System.Int32 value) {
      SetColumnValue(IdGroupColumn, value);
    }
        
    //**************************************
    //* IdChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdChannelColumn {
      get { return TypedTable.IdChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdChannel {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdChannel", GetIdChannelCore, out result)) return result;
        return GetIdChannelCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("IdChannel", value, SetIdChannelCore)) return;
        SetIdChannelCore(value);
      }
    }
    private System.Int32 GetIdChannelCore() {
      return (System.Int32) GetColumnValue(IdChannelColumn, typeof(System.Int32), false); 
    }
    private void SetIdChannelCore(System.Int32 value) {
      SetColumnValue(IdChannelColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
