//========================================================================
// This file was generated using the MyGeneration tool in combination
// with the Gentle.NET Business Entity template, $Rev: 965 $
//========================================================================
using System;
using System.Collections;
using Gentle.Common;
using Gentle.Framework;


namespace TvDatabase
{
  /// <summary>
  /// Instances of this class represent the properties and methods of a row in the table <b>Server</b>.
  /// </summary>
  [TableName("Satellite")]
  public class Satellite : Persistent
  {
    #region Members
    private bool isChanged;
    [TableColumn("idSatellite", NotNull = true), PrimaryKey(AutoGenerated = true)]
    private int idSatellite;
    [TableColumn("satelliteName", NotNull = true)]
    private string satelliteName;
    [TableColumn("transponderFileName", NotNull = true)]
    private string transponderFileName;
    #endregion
    
    #region Constructors
    /// <summary> 
    /// Create a new object by specifying all fields (except the auto-generated primary key field). 
    /// </summary> 
    public Satellite(string satelliteName, string transponderFileName)
    {
      isChanged = true;
      this.satelliteName = satelliteName;
      this.transponderFileName = transponderFileName;
    }

    /// <summary> 
    /// Create an object from an existing row of data. This will be used by Gentle to 
    /// construct objects from retrieved rows. 
    /// </summary> 
    public Satellite(int idSatellite, string satelliteName, string transponderFileName)
    {
      this.idSatellite = idSatellite;
      this.satelliteName = satelliteName;
      this.transponderFileName = transponderFileName;
    }
    #endregion

    #region Public Properties
    /// <summary>
    /// Indicates whether the entity is changed and requires saving or not.
    /// </summary>
    public bool IsChanged
    {
      get { return isChanged; }
    }

    /// <summary>
    /// Property relating to database column idServer
    /// </summary>
    public int IdSatellite
    {
      get { return idSatellite; }
    }
    /// <summary>
    /// Property relating to database column hostName
    /// </summary>
    public string SatelliteName
    {
      get { return satelliteName; }
      set { isChanged |= satelliteName != value; satelliteName = value; }
    }
    /// <summary>
    /// Property relating to database column hostName
    /// </summary>
    public string TransponderFileName
    {
      get { return transponderFileName; }
      set { isChanged |= transponderFileName != value; transponderFileName = value; }
    }
    #endregion

    #region Storage and Retrieval

    /// <summary>
    /// Static method to retrieve all instances that are stored in the database in one call
    /// </summary>
    public static IList ListAll()
    {
      return Broker.RetrieveList(typeof(Satellite));
    }

    /// <summary>
    /// Retrieves an entity given it's id.
    /// </summary>
    public static Satellite Retrieve(int id)
    {
      // Return null if id is smaller than seed and/or increment for autokey
      if (id < 1)
      {
        return null;
      }
      Key key = new Key(typeof(Satellite), true, "idSatellite", id);
      return Broker.RetrieveInstance(typeof(Satellite), key) as Satellite;
    }

    /// <summary>
    /// Retrieves an entity given it's id, using Gentle.Framework.Key class.
    /// This allows retrieval based on multi-column keys.
    /// </summary>
    public static Satellite Retrieve(Key key)
    {
      return Broker.RetrieveInstance(typeof(Satellite), key) as Satellite;
    }

    /// <summary>
    /// Persists the entity if it was never persisted or was changed.
    /// </summary>
    public override void Persist()
    {
      if (IsChanged || !IsPersisted)
      {
        base.Persist();
        isChanged = false;
      }
    }

    #endregion
  }
}
