using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region ScheduleDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-01T14:32:26.421875+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class ScheduleDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public ScheduleDataTable() {}

    protected ScheduleDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Schedule(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Schedule);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdScheduleColumn;
    public DataColumn IdScheduleColumn {
      get {
        if (mIdScheduleColumn!=null) return mIdScheduleColumn;
        mIdScheduleColumn = GetColumn("IdSchedule", true);
        return mIdScheduleColumn;
      }
    }
    private DataColumn mIdChannelColumn;
    public DataColumn IdChannelColumn {
      get {
        if (mIdChannelColumn!=null) return mIdChannelColumn;
        mIdChannelColumn = GetColumn("IdChannel", true);
        return mIdChannelColumn;
      }
    }
    private DataColumn mScheduleTypeColumn;
    public DataColumn ScheduleTypeColumn {
      get {
        if (mScheduleTypeColumn!=null) return mScheduleTypeColumn;
        mScheduleTypeColumn = GetColumn("ScheduleType", true);
        return mScheduleTypeColumn;
      }
    }
    private DataColumn mProgramNameColumn;
    public DataColumn ProgramNameColumn {
      get {
        if (mProgramNameColumn!=null) return mProgramNameColumn;
        mProgramNameColumn = GetColumn("ProgramName", true);
        return mProgramNameColumn;
      }
    }
    private DataColumn mStartTimeColumn;
    public DataColumn StartTimeColumn {
      get {
        if (mStartTimeColumn!=null) return mStartTimeColumn;
        mStartTimeColumn = GetColumn("StartTime", true);
        return mStartTimeColumn;
      }
    }
    private DataColumn mEndTimeColumn;
    public DataColumn EndTimeColumn {
      get {
        if (mEndTimeColumn!=null) return mEndTimeColumn;
        mEndTimeColumn = GetColumn("EndTime", true);
        return mEndTimeColumn;
      }
    }
    private DataColumn mMaxAiringsColumn;
    public DataColumn MaxAiringsColumn {
      get {
        if (mMaxAiringsColumn!=null) return mMaxAiringsColumn;
        mMaxAiringsColumn = GetColumn("MaxAirings", true);
        return mMaxAiringsColumn;
      }
    }
    private DataColumn mPriorityColumn;
    public DataColumn PriorityColumn {
      get {
        if (mPriorityColumn!=null) return mPriorityColumn;
        mPriorityColumn = GetColumn("Priority", true);
        return mPriorityColumn;
      }
    }
    private DataColumn mDirectoryColumn;
    public DataColumn DirectoryColumn {
      get {
        if (mDirectoryColumn!=null) return mDirectoryColumn;
        mDirectoryColumn = GetColumn("Directory", true);
        return mDirectoryColumn;
      }
    }
    private DataColumn mQualityColumn;
    public DataColumn QualityColumn {
      get {
        if (mQualityColumn!=null) return mQualityColumn;
        mQualityColumn = GetColumn("Quality", true);
        return mQualityColumn;
      }
    }
    private DataColumn mKeepMethodColumn;
    public DataColumn KeepMethodColumn {
      get {
        if (mKeepMethodColumn!=null) return mKeepMethodColumn;
        mKeepMethodColumn = GetColumn("KeepMethod", true);
        return mKeepMethodColumn;
      }
    }
    private DataColumn mKeepDateColumn;
    public DataColumn KeepDateColumn {
      get {
        if (mKeepDateColumn!=null) return mKeepDateColumn;
        mKeepDateColumn = GetColumn("KeepDate", true);
        return mKeepDateColumn;
      }
    }
    private DataColumn mPreRecordIntervalColumn;
    public DataColumn PreRecordIntervalColumn {
      get {
        if (mPreRecordIntervalColumn!=null) return mPreRecordIntervalColumn;
        mPreRecordIntervalColumn = GetColumn("PreRecordInterval", true);
        return mPreRecordIntervalColumn;
      }
    }
    private DataColumn mPostRecordIntervalColumn;
    public DataColumn PostRecordIntervalColumn {
      get {
        if (mPostRecordIntervalColumn!=null) return mPostRecordIntervalColumn;
        mPostRecordIntervalColumn = GetColumn("PostRecordInterval", true);
        return mPostRecordIntervalColumn;
      }
    }
    private DataColumn mCanceledColumn;
    public DataColumn CanceledColumn {
      get {
        if (mCanceledColumn!=null) return mCanceledColumn;
        mCanceledColumn = GetColumn("Canceled", true);
        return mCanceledColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Schedule"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("id_Schedule", "IdSchedule");
      columnMappings.Add("idChannel", "IdChannel");
      columnMappings.Add("scheduleType", "ScheduleType");
      columnMappings.Add("programName", "ProgramName");
      columnMappings.Add("startTime", "StartTime");
      columnMappings.Add("endTime", "EndTime");
      columnMappings.Add("maxAirings", "MaxAirings");
      columnMappings.Add("priority", "Priority");
      columnMappings.Add("directory", "Directory");
      columnMappings.Add("quality", "Quality");
      columnMappings.Add("keepMethod", "KeepMethod");
      columnMappings.Add("keepDate", "KeepDate");
      columnMappings.Add("preRecordInterval", "PreRecordInterval");
      columnMappings.Add("postRecordInterval", "PostRecordInterval");
      columnMappings.Add("canceled", "Canceled");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdScheduleColumn.Caption = "id_Schedule";
      IdChannelColumn.Caption = "idChannel";
      ScheduleTypeColumn.Caption = "scheduleType";
      ProgramNameColumn.Caption = "programName";
      StartTimeColumn.Caption = "startTime";
      EndTimeColumn.Caption = "endTime";
      MaxAiringsColumn.Caption = "maxAirings";
      PriorityColumn.Caption = "priority";
      DirectoryColumn.Caption = "directory";
      QualityColumn.Caption = "quality";
      KeepMethodColumn.Caption = "keepMethod";
      KeepDateColumn.Caption = "keepDate";
      PreRecordIntervalColumn.Caption = "preRecordInterval";
      PostRecordIntervalColumn.Caption = "postRecordInterval";
      CanceledColumn.Caption = "canceled";
    }
  }
  #endregion
  
  #region ScheduleDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-01T14:32:26.421875+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class ScheduleDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected ScheduleDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new ScheduleDataTable TypedTable {
      get { return (ScheduleDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(ScheduleDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    public virtual Channel Channel {
      get { 
        Channel result;
        if (GetInterceptor<Channel>("Channel", GetChannelCore, out result)) return result;
        return GetChannelCore();
      }
      set { 
        if (SetInterceptor<Channel>("Channel", value, SetChannelCore)) return;
        SetChannelCore(value);
      }
    }
    private Channel GetChannelCore() {
      return GetParent<Channel>(EntityRelations.Channel_Schedule, this.PersistenceManager.DefaultQueryStrategy);
    }
    private void SetChannelCore(Channel value) {
      if (value == null) {
        SetNull(this.IdChannelColumn);
      } else {
        SetColumnValue(this.IdChannelColumn, value, value.IdChannelColumn);
      }
      OnPropertyChanged(new PropertyChangedEventArgs("Channel"));
    }

    public virtual ReadOnlyEntityList<CanceledSchedule> CanceledSchedules {
      get { 
        ReadOnlyEntityList<CanceledSchedule> result;
        if (GetInterceptor<ReadOnlyEntityList<CanceledSchedule>>("CanceledSchedules", GetCanceledSchedulesCore, out result)) return result;
        return GetCanceledSchedulesCore();
      }
    }
    private ReadOnlyEntityList<CanceledSchedule> GetCanceledSchedulesCore() {
      return this.GetManagedChildren<CanceledSchedule>(EntityRelations.Schedule_CanceledSchedule);
    } 

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdScheduleEntityColumn =
      new EntityColumn(typeof(Schedule), "IdSchedule", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdChannelEntityColumn =
      new EntityColumn(typeof(Schedule), "IdChannel", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ScheduleTypeEntityColumn =
      new EntityColumn(typeof(Schedule), "ScheduleType", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ProgramNameEntityColumn =
      new EntityColumn(typeof(Schedule), "ProgramName", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn StartTimeEntityColumn =
      new EntityColumn(typeof(Schedule), "StartTime", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn EndTimeEntityColumn =
      new EntityColumn(typeof(Schedule), "EndTime", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn MaxAiringsEntityColumn =
      new EntityColumn(typeof(Schedule), "MaxAirings", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PriorityEntityColumn =
      new EntityColumn(typeof(Schedule), "Priority", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn DirectoryEntityColumn =
      new EntityColumn(typeof(Schedule), "Directory", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn QualityEntityColumn =
      new EntityColumn(typeof(Schedule), "Quality", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn KeepMethodEntityColumn =
      new EntityColumn(typeof(Schedule), "KeepMethod", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn KeepDateEntityColumn =
      new EntityColumn(typeof(Schedule), "KeepDate", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PreRecordIntervalEntityColumn =
      new EntityColumn(typeof(Schedule), "PreRecordInterval", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PostRecordIntervalEntityColumn =
      new EntityColumn(typeof(Schedule), "PostRecordInterval", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn CanceledEntityColumn =
      new EntityColumn(typeof(Schedule), "Canceled", typeof(System.DateTime), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdSchedule methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdScheduleColumn {
      get { return TypedTable.IdScheduleColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdSchedule {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdSchedule", GetIdScheduleCore, out result)) return result;
        return GetIdScheduleCore();
      }
    }
    private System.Int32 GetIdScheduleCore() {
      return (System.Int32) GetColumnValue(IdScheduleColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* IdChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdChannelColumn {
      get { return TypedTable.IdChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdChannel {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdChannel", GetIdChannelCore, out result)) return result;
        return GetIdChannelCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("IdChannel", value, SetIdChannelCore)) return;
        SetIdChannelCore(value);
      }
    }
    private System.Int32 GetIdChannelCore() {
      return (System.Int32) GetColumnValue(IdChannelColumn, typeof(System.Int32), false); 
    }
    private void SetIdChannelCore(System.Int32 value) {
      SetColumnValue(IdChannelColumn, value);
    }
        
    //**************************************
    //* ScheduleType methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ScheduleTypeColumn {
      get { return TypedTable.ScheduleTypeColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 ScheduleType {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("ScheduleType", GetScheduleTypeCore, out result)) return result;
        return GetScheduleTypeCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("ScheduleType", value, SetScheduleTypeCore)) return;
        SetScheduleTypeCore(value);
      }
    }
    private System.Int32 GetScheduleTypeCore() {
      return (System.Int32) GetColumnValue(ScheduleTypeColumn, typeof(System.Int32), false); 
    }
    private void SetScheduleTypeCore(System.Int32 value) {
      SetColumnValue(ScheduleTypeColumn, value);
    }
        
    //**************************************
    //* ProgramName methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ProgramNameColumn {
      get { return TypedTable.ProgramNameColumn; }
    }

    [MaxTextLength(256)]
    [DBDataType(typeof(System.String))]
    public virtual System.String ProgramName {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("ProgramName", GetProgramNameCore, out result)) return result;
        return GetProgramNameCore();
      }
      set { 
        if (SetInterceptor<System.String>("ProgramName", value, SetProgramNameCore)) return;
        SetProgramNameCore(value);
      }
    }
    private System.String GetProgramNameCore() {
      return (System.String) GetColumnValue(ProgramNameColumn, typeof(System.String), false); 
    }
    private void SetProgramNameCore(System.String value) {
      SetColumnValue(ProgramNameColumn, value);
    }
        
    //**************************************
    //* StartTime methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn StartTimeColumn {
      get { return TypedTable.StartTimeColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime StartTime {
      get { 
        System.DateTime result;
        if (GetInterceptor<System.DateTime>("StartTime", GetStartTimeCore, out result)) return result;
        return GetStartTimeCore();
      }
      set { 
        if (SetInterceptor<System.DateTime>("StartTime", value, SetStartTimeCore)) return;
        SetStartTimeCore(value);
      }
    }
    private System.DateTime GetStartTimeCore() {
      return (System.DateTime) GetColumnValue(StartTimeColumn, typeof(System.DateTime), false); 
    }
    private void SetStartTimeCore(System.DateTime value) {
      SetColumnValue(StartTimeColumn, value);
    }
        
    //**************************************
    //* EndTime methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn EndTimeColumn {
      get { return TypedTable.EndTimeColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime EndTime {
      get { 
        System.DateTime result;
        if (GetInterceptor<System.DateTime>("EndTime", GetEndTimeCore, out result)) return result;
        return GetEndTimeCore();
      }
      set { 
        if (SetInterceptor<System.DateTime>("EndTime", value, SetEndTimeCore)) return;
        SetEndTimeCore(value);
      }
    }
    private System.DateTime GetEndTimeCore() {
      return (System.DateTime) GetColumnValue(EndTimeColumn, typeof(System.DateTime), false); 
    }
    private void SetEndTimeCore(System.DateTime value) {
      SetColumnValue(EndTimeColumn, value);
    }
        
    //**************************************
    //* MaxAirings methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn MaxAiringsColumn {
      get { return TypedTable.MaxAiringsColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 MaxAirings {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("MaxAirings", GetMaxAiringsCore, out result)) return result;
        return GetMaxAiringsCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("MaxAirings", value, SetMaxAiringsCore)) return;
        SetMaxAiringsCore(value);
      }
    }
    private System.Int32 GetMaxAiringsCore() {
      return (System.Int32) GetColumnValue(MaxAiringsColumn, typeof(System.Int32), false); 
    }
    private void SetMaxAiringsCore(System.Int32 value) {
      SetColumnValue(MaxAiringsColumn, value);
    }
        
    //**************************************
    //* Priority methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PriorityColumn {
      get { return TypedTable.PriorityColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Priority {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Priority", GetPriorityCore, out result)) return result;
        return GetPriorityCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Priority", value, SetPriorityCore)) return;
        SetPriorityCore(value);
      }
    }
    private System.Int32 GetPriorityCore() {
      return (System.Int32) GetColumnValue(PriorityColumn, typeof(System.Int32), false); 
    }
    private void SetPriorityCore(System.Int32 value) {
      SetColumnValue(PriorityColumn, value);
    }
        
    //**************************************
    //* Directory methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn DirectoryColumn {
      get { return TypedTable.DirectoryColumn; }
    }

    [MaxTextLength(1024)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Directory {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("Directory", GetDirectoryCore, out result)) return result;
        return GetDirectoryCore();
      }
      set { 
        if (SetInterceptor<System.String>("Directory", value, SetDirectoryCore)) return;
        SetDirectoryCore(value);
      }
    }
    private System.String GetDirectoryCore() {
      return (System.String) GetColumnValue(DirectoryColumn, typeof(System.String), false); 
    }
    private void SetDirectoryCore(System.String value) {
      SetColumnValue(DirectoryColumn, value);
    }
        
    //**************************************
    //* Quality methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn QualityColumn {
      get { return TypedTable.QualityColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Quality {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Quality", GetQualityCore, out result)) return result;
        return GetQualityCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Quality", value, SetQualityCore)) return;
        SetQualityCore(value);
      }
    }
    private System.Int32 GetQualityCore() {
      return (System.Int32) GetColumnValue(QualityColumn, typeof(System.Int32), false); 
    }
    private void SetQualityCore(System.Int32 value) {
      SetColumnValue(QualityColumn, value);
    }
        
    //**************************************
    //* KeepMethod methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn KeepMethodColumn {
      get { return TypedTable.KeepMethodColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 KeepMethod {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("KeepMethod", GetKeepMethodCore, out result)) return result;
        return GetKeepMethodCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("KeepMethod", value, SetKeepMethodCore)) return;
        SetKeepMethodCore(value);
      }
    }
    private System.Int32 GetKeepMethodCore() {
      return (System.Int32) GetColumnValue(KeepMethodColumn, typeof(System.Int32), false); 
    }
    private void SetKeepMethodCore(System.Int32 value) {
      SetColumnValue(KeepMethodColumn, value);
    }
        
    //**************************************
    //* KeepDate methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn KeepDateColumn {
      get { return TypedTable.KeepDateColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime KeepDate {
      get { 
        System.DateTime result;
        if (GetInterceptor<System.DateTime>("KeepDate", GetKeepDateCore, out result)) return result;
        return GetKeepDateCore();
      }
      set { 
        if (SetInterceptor<System.DateTime>("KeepDate", value, SetKeepDateCore)) return;
        SetKeepDateCore(value);
      }
    }
    private System.DateTime GetKeepDateCore() {
      return (System.DateTime) GetColumnValue(KeepDateColumn, typeof(System.DateTime), false); 
    }
    private void SetKeepDateCore(System.DateTime value) {
      SetColumnValue(KeepDateColumn, value);
    }
        
    //**************************************
    //* PreRecordInterval methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PreRecordIntervalColumn {
      get { return TypedTable.PreRecordIntervalColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 PreRecordInterval {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("PreRecordInterval", GetPreRecordIntervalCore, out result)) return result;
        return GetPreRecordIntervalCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("PreRecordInterval", value, SetPreRecordIntervalCore)) return;
        SetPreRecordIntervalCore(value);
      }
    }
    private System.Int32 GetPreRecordIntervalCore() {
      return (System.Int32) GetColumnValue(PreRecordIntervalColumn, typeof(System.Int32), false); 
    }
    private void SetPreRecordIntervalCore(System.Int32 value) {
      SetColumnValue(PreRecordIntervalColumn, value);
    }
        
    //**************************************
    //* PostRecordInterval methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PostRecordIntervalColumn {
      get { return TypedTable.PostRecordIntervalColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 PostRecordInterval {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("PostRecordInterval", GetPostRecordIntervalCore, out result)) return result;
        return GetPostRecordIntervalCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("PostRecordInterval", value, SetPostRecordIntervalCore)) return;
        SetPostRecordIntervalCore(value);
      }
    }
    private System.Int32 GetPostRecordIntervalCore() {
      return (System.Int32) GetColumnValue(PostRecordIntervalColumn, typeof(System.Int32), false); 
    }
    private void SetPostRecordIntervalCore(System.Int32 value) {
      SetColumnValue(PostRecordIntervalColumn, value);
    }
        
    //**************************************
    //* Canceled methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn CanceledColumn {
      get { return TypedTable.CanceledColumn; }
    }

    [DBDataType(typeof(System.DateTime))]
    public virtual System.DateTime Canceled {
      get { 
        System.DateTime result;
        if (GetInterceptor<System.DateTime>("Canceled", GetCanceledCore, out result)) return result;
        return GetCanceledCore();
      }
      set { 
        if (SetInterceptor<System.DateTime>("Canceled", value, SetCanceledCore)) return;
        SetCanceledCore(value);
      }
    }
    private System.DateTime GetCanceledCore() {
      return (System.DateTime) GetColumnValue(CanceledColumn, typeof(System.DateTime), false); 
    }
    private void SetCanceledCore(System.DateTime value) {
      SetColumnValue(CanceledColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
