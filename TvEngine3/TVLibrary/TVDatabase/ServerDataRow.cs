using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region ServerDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-17T15:59:10.96875+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class ServerDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public ServerDataTable() {}

    protected ServerDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Server(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Server);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdServerColumn;
    public DataColumn IdServerColumn {
      get {
        if (mIdServerColumn!=null) return mIdServerColumn;
        mIdServerColumn = GetColumn("IdServer", true);
        return mIdServerColumn;
      }
    }
    private DataColumn mIsMasterColumn;
    public DataColumn IsMasterColumn {
      get {
        if (mIsMasterColumn!=null) return mIsMasterColumn;
        mIsMasterColumn = GetColumn("IsMaster", true);
        return mIsMasterColumn;
      }
    }
    private DataColumn mHostNameColumn;
    public DataColumn HostNameColumn {
      get {
        if (mHostNameColumn!=null) return mHostNameColumn;
        mHostNameColumn = GetColumn("HostName", true);
        return mHostNameColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Server"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idServer", "IdServer");
      columnMappings.Add("isMaster", "IsMaster");
      columnMappings.Add("hostName", "HostName");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdServerColumn.Caption = "idServer";
      IsMasterColumn.Caption = "isMaster";
      HostNameColumn.Caption = "hostName";
    }
  }
  #endregion
  
  #region ServerDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-17T15:59:10.96875+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class ServerDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected ServerDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new ServerDataTable TypedTable {
      get { return (ServerDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(ServerDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************

    public virtual ReadOnlyEntityList<Card> Cards {
      get {
        return this.GetManagedChildren<Card>(EntityRelations.Server_Card);
      }
    }

    public virtual ReadOnlyEntityList<Recording> Recordings {
      get {
        return this.GetManagedChildren<Recording>(EntityRelations.Server_Recording);
      }
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdServerEntityColumn =
      new EntityColumn(typeof(Server), "IdServer", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IsMasterEntityColumn =
      new EntityColumn(typeof(Server), "IsMaster", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn HostNameEntityColumn =
      new EntityColumn(typeof(Server), "HostName", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdServer methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdServerColumn {
      get { return TypedTable.IdServerColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdServer {
      get { return (System.Int32) GetColumnValue(IdServerColumn, typeof(System.Int32), false); }
    }
    //**************************************
    //* IsMaster methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IsMasterColumn {
      get { return TypedTable.IsMasterColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean IsMaster {
      get { return (System.Boolean) GetColumnValue(IsMasterColumn, typeof(System.Boolean), false); }
      set { this.SetColumnValue(IsMasterColumn, value); }
    }
    //**************************************
    //* HostName methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn HostNameColumn {
      get { return TypedTable.HostNameColumn; }
    }

    [MaxTextLength(256)]
    [DBDataType(typeof(System.String))]
    public virtual System.String HostName {
      get { return (System.String) GetColumnValue(HostNameColumn, typeof(System.String), false); }
      set { this.SetColumnValue(HostNameColumn, value); }
    }
    #endregion
    
    
  }
  #endregion
}
