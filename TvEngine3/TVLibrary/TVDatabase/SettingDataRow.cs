using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region SettingDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-01T14:28:25.859375+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class SettingDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public SettingDataTable() {}

    protected SettingDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Setting(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Setting);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdSettingColumn;
    public DataColumn IdSettingColumn {
      get {
        if (mIdSettingColumn!=null) return mIdSettingColumn;
        mIdSettingColumn = GetColumn("IdSetting", true);
        return mIdSettingColumn;
      }
    }
    private DataColumn mTagColumn;
    public DataColumn TagColumn {
      get {
        if (mTagColumn!=null) return mTagColumn;
        mTagColumn = GetColumn("Tag", true);
        return mTagColumn;
      }
    }
    private DataColumn mValueColumn;
    public DataColumn ValueColumn {
      get {
        if (mValueColumn!=null) return mValueColumn;
        mValueColumn = GetColumn("Value", true);
        return mValueColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Setting"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idSetting", "IdSetting");
      columnMappings.Add("tag", "Tag");
      columnMappings.Add("value", "Value");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdSettingColumn.Caption = "idSetting";
      TagColumn.Caption = "tag";
      ValueColumn.Caption = "value";
    }
  }
  #endregion
  
  #region SettingDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-01T14:28:25.859375+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class SettingDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected SettingDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new SettingDataTable TypedTable {
      get { return (SettingDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(SettingDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdSettingEntityColumn =
      new EntityColumn(typeof(Setting), "IdSetting", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn TagEntityColumn =
      new EntityColumn(typeof(Setting), "Tag", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ValueEntityColumn =
      new EntityColumn(typeof(Setting), "Value", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdSetting methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdSettingColumn {
      get { return TypedTable.IdSettingColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdSetting {
      get { return (System.Int32) GetColumnValue(IdSettingColumn, typeof(System.Int32), false); }
    }
    //**************************************
    //* Tag methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn TagColumn {
      get { return TypedTable.TagColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Tag {
      get { return (System.String) GetColumnValue(TagColumn, typeof(System.String), false); }
      set { this.SetColumnValue(TagColumn, value); }
    }
    //**************************************
    //* Value methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ValueColumn {
      get { return TypedTable.ValueColumn; }
    }

    [MaxTextLength(4096)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Value {
      get { return (System.String) GetColumnValue(ValueColumn, typeof(System.String), false); }
      set { this.SetColumnValue(ValueColumn, value); }
    }
    #endregion
    
    
  }
  #endregion
}
