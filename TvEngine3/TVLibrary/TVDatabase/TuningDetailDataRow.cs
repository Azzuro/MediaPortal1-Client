using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region TuningDetailDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-06-26T06:48:32.859375+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class TuningDetailDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public TuningDetailDataTable() {}

    protected TuningDetailDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new TuningDetail(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(TuningDetail);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdTuningColumn;
    public DataColumn IdTuningColumn {
      get {
        if (mIdTuningColumn!=null) return mIdTuningColumn;
        mIdTuningColumn = GetColumn("IdTuning", true);
        return mIdTuningColumn;
      }
    }
    private DataColumn mIdChannelColumn;
    public DataColumn IdChannelColumn {
      get {
        if (mIdChannelColumn!=null) return mIdChannelColumn;
        mIdChannelColumn = GetColumn("IdChannel", true);
        return mIdChannelColumn;
      }
    }
    private DataColumn mNameColumn;
    public DataColumn NameColumn {
      get {
        if (mNameColumn!=null) return mNameColumn;
        mNameColumn = GetColumn("Name", true);
        return mNameColumn;
      }
    }
    private DataColumn mProviderColumn;
    public DataColumn ProviderColumn {
      get {
        if (mProviderColumn!=null) return mProviderColumn;
        mProviderColumn = GetColumn("Provider", true);
        return mProviderColumn;
      }
    }
    private DataColumn mChannelTypeColumn;
    public DataColumn ChannelTypeColumn {
      get {
        if (mChannelTypeColumn!=null) return mChannelTypeColumn;
        mChannelTypeColumn = GetColumn("ChannelType", true);
        return mChannelTypeColumn;
      }
    }
    private DataColumn mChannelNumberColumn;
    public DataColumn ChannelNumberColumn {
      get {
        if (mChannelNumberColumn!=null) return mChannelNumberColumn;
        mChannelNumberColumn = GetColumn("ChannelNumber", true);
        return mChannelNumberColumn;
      }
    }
    private DataColumn mFrequencyColumn;
    public DataColumn FrequencyColumn {
      get {
        if (mFrequencyColumn!=null) return mFrequencyColumn;
        mFrequencyColumn = GetColumn("Frequency", true);
        return mFrequencyColumn;
      }
    }
    private DataColumn mCountryIdColumn;
    public DataColumn CountryIdColumn {
      get {
        if (mCountryIdColumn!=null) return mCountryIdColumn;
        mCountryIdColumn = GetColumn("CountryId", true);
        return mCountryIdColumn;
      }
    }
    private DataColumn mIsRadioColumn;
    public DataColumn IsRadioColumn {
      get {
        if (mIsRadioColumn!=null) return mIsRadioColumn;
        mIsRadioColumn = GetColumn("IsRadio", true);
        return mIsRadioColumn;
      }
    }
    private DataColumn mIsTvColumn;
    public DataColumn IsTvColumn {
      get {
        if (mIsTvColumn!=null) return mIsTvColumn;
        mIsTvColumn = GetColumn("IsTv", true);
        return mIsTvColumn;
      }
    }
    private DataColumn mNetworkIdColumn;
    public DataColumn NetworkIdColumn {
      get {
        if (mNetworkIdColumn!=null) return mNetworkIdColumn;
        mNetworkIdColumn = GetColumn("NetworkId", true);
        return mNetworkIdColumn;
      }
    }
    private DataColumn mTransportIdColumn;
    public DataColumn TransportIdColumn {
      get {
        if (mTransportIdColumn!=null) return mTransportIdColumn;
        mTransportIdColumn = GetColumn("TransportId", true);
        return mTransportIdColumn;
      }
    }
    private DataColumn mServiceIdColumn;
    public DataColumn ServiceIdColumn {
      get {
        if (mServiceIdColumn!=null) return mServiceIdColumn;
        mServiceIdColumn = GetColumn("ServiceId", true);
        return mServiceIdColumn;
      }
    }
    private DataColumn mPmtPidColumn;
    public DataColumn PmtPidColumn {
      get {
        if (mPmtPidColumn!=null) return mPmtPidColumn;
        mPmtPidColumn = GetColumn("PmtPid", true);
        return mPmtPidColumn;
      }
    }
    private DataColumn mFreeToAirColumn;
    public DataColumn FreeToAirColumn {
      get {
        if (mFreeToAirColumn!=null) return mFreeToAirColumn;
        mFreeToAirColumn = GetColumn("FreeToAir", true);
        return mFreeToAirColumn;
      }
    }
    private DataColumn mModulationColumn;
    public DataColumn ModulationColumn {
      get {
        if (mModulationColumn!=null) return mModulationColumn;
        mModulationColumn = GetColumn("Modulation", true);
        return mModulationColumn;
      }
    }
    private DataColumn mPolarisationColumn;
    public DataColumn PolarisationColumn {
      get {
        if (mPolarisationColumn!=null) return mPolarisationColumn;
        mPolarisationColumn = GetColumn("Polarisation", true);
        return mPolarisationColumn;
      }
    }
    private DataColumn mSymbolrateColumn;
    public DataColumn SymbolrateColumn {
      get {
        if (mSymbolrateColumn!=null) return mSymbolrateColumn;
        mSymbolrateColumn = GetColumn("Symbolrate", true);
        return mSymbolrateColumn;
      }
    }
    private DataColumn mDiseqcColumn;
    public DataColumn DiseqcColumn {
      get {
        if (mDiseqcColumn!=null) return mDiseqcColumn;
        mDiseqcColumn = GetColumn("Diseqc", true);
        return mDiseqcColumn;
      }
    }
    private DataColumn mSwitchingFrequencyColumn;
    public DataColumn SwitchingFrequencyColumn {
      get {
        if (mSwitchingFrequencyColumn!=null) return mSwitchingFrequencyColumn;
        mSwitchingFrequencyColumn = GetColumn("SwitchingFrequency", true);
        return mSwitchingFrequencyColumn;
      }
    }
    private DataColumn mBandwidthColumn;
    public DataColumn BandwidthColumn {
      get {
        if (mBandwidthColumn!=null) return mBandwidthColumn;
        mBandwidthColumn = GetColumn("Bandwidth", true);
        return mBandwidthColumn;
      }
    }
    private DataColumn mMajorChannelColumn;
    public DataColumn MajorChannelColumn {
      get {
        if (mMajorChannelColumn!=null) return mMajorChannelColumn;
        mMajorChannelColumn = GetColumn("MajorChannel", true);
        return mMajorChannelColumn;
      }
    }
    private DataColumn mMinorChannelColumn;
    public DataColumn MinorChannelColumn {
      get {
        if (mMinorChannelColumn!=null) return mMinorChannelColumn;
        mMinorChannelColumn = GetColumn("MinorChannel", true);
        return mMinorChannelColumn;
      }
    }
    private DataColumn mPcrPidColumn;
    public DataColumn PcrPidColumn {
      get {
        if (mPcrPidColumn!=null) return mPcrPidColumn;
        mPcrPidColumn = GetColumn("PcrPid", true);
        return mPcrPidColumn;
      }
    }
    private DataColumn mVideoSourceColumn;
    public DataColumn VideoSourceColumn {
      get {
        if (mVideoSourceColumn!=null) return mVideoSourceColumn;
        mVideoSourceColumn = GetColumn("VideoSource", true);
        return mVideoSourceColumn;
      }
    }
    private DataColumn mTuningSourceColumn;
    public DataColumn TuningSourceColumn {
      get {
        if (mTuningSourceColumn!=null) return mTuningSourceColumn;
        mTuningSourceColumn = GetColumn("TuningSource", true);
        return mTuningSourceColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "TuningDetail"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idTuning", "IdTuning");
      columnMappings.Add("idChannel", "IdChannel");
      columnMappings.Add("name", "Name");
      columnMappings.Add("provider", "Provider");
      columnMappings.Add("channelType", "ChannelType");
      columnMappings.Add("channelNumber", "ChannelNumber");
      columnMappings.Add("frequency", "Frequency");
      columnMappings.Add("countryId", "CountryId");
      columnMappings.Add("isRadio", "IsRadio");
      columnMappings.Add("isTv", "IsTv");
      columnMappings.Add("networkId", "NetworkId");
      columnMappings.Add("transportId", "TransportId");
      columnMappings.Add("serviceId", "ServiceId");
      columnMappings.Add("pmtPid", "PmtPid");
      columnMappings.Add("freeToAir", "FreeToAir");
      columnMappings.Add("modulation", "Modulation");
      columnMappings.Add("polarisation", "Polarisation");
      columnMappings.Add("symbolrate", "Symbolrate");
      columnMappings.Add("diseqc", "Diseqc");
      columnMappings.Add("switchingFrequency", "SwitchingFrequency");
      columnMappings.Add("bandwidth", "Bandwidth");
      columnMappings.Add("majorChannel", "MajorChannel");
      columnMappings.Add("minorChannel", "MinorChannel");
      columnMappings.Add("pcrPid", "PcrPid");
      columnMappings.Add("videoSource", "VideoSource");
      columnMappings.Add("tuningSource", "TuningSource");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdTuningColumn.Caption = "idTuning";
      IdChannelColumn.Caption = "idChannel";
      NameColumn.Caption = "name";
      ProviderColumn.Caption = "provider";
      ChannelTypeColumn.Caption = "channelType";
      ChannelNumberColumn.Caption = "channelNumber";
      FrequencyColumn.Caption = "frequency";
      CountryIdColumn.Caption = "countryId";
      IsRadioColumn.Caption = "isRadio";
      IsTvColumn.Caption = "isTv";
      NetworkIdColumn.Caption = "networkId";
      TransportIdColumn.Caption = "transportId";
      ServiceIdColumn.Caption = "serviceId";
      PmtPidColumn.Caption = "pmtPid";
      FreeToAirColumn.Caption = "freeToAir";
      ModulationColumn.Caption = "modulation";
      PolarisationColumn.Caption = "polarisation";
      SymbolrateColumn.Caption = "symbolrate";
      DiseqcColumn.Caption = "diseqc";
      SwitchingFrequencyColumn.Caption = "switchingFrequency";
      BandwidthColumn.Caption = "bandwidth";
      MajorChannelColumn.Caption = "majorChannel";
      MinorChannelColumn.Caption = "minorChannel";
      PcrPidColumn.Caption = "pcrPid";
      VideoSourceColumn.Caption = "videoSource";
      TuningSourceColumn.Caption = "tuningSource";
    }
  }
  #endregion
  
  #region TuningDetailDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-06-26T06:48:32.859375+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class TuningDetailDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected TuningDetailDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new TuningDetailDataTable TypedTable {
      get { return (TuningDetailDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(TuningDetailDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    public virtual Channel Channel {
      get { 
        Channel result;
        if (GetInterceptor<Channel>("Channel", GetChannelCore, out result)) return result;
        return GetChannelCore();
      }
      set { 
        if (SetInterceptor<Channel>("Channel", value, SetChannelCore)) return;
        SetChannelCore(value);
      }
    }
    private Channel GetChannelCore() {
      return GetParent<Channel>(EntityRelations.Channel_TuningDetail, this.PersistenceManager.DefaultQueryStrategy);
    }
    private void SetChannelCore(Channel value) {
      if (value == null) {
        SetNull(this.IdChannelColumn);
      } else {
        SetColumnValue(this.IdChannelColumn, value, value.IdChannelColumn);
      }
      OnPropertyChanged(new PropertyChangedEventArgs("Channel"));
    }

    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdTuningEntityColumn =
      new EntityColumn(typeof(TuningDetail), "IdTuning", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IdChannelEntityColumn =
      new EntityColumn(typeof(TuningDetail), "IdChannel", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn NameEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Name", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ProviderEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Provider", typeof(System.String), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ChannelTypeEntityColumn =
      new EntityColumn(typeof(TuningDetail), "ChannelType", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ChannelNumberEntityColumn =
      new EntityColumn(typeof(TuningDetail), "ChannelNumber", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn FrequencyEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Frequency", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn CountryIdEntityColumn =
      new EntityColumn(typeof(TuningDetail), "CountryId", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IsRadioEntityColumn =
      new EntityColumn(typeof(TuningDetail), "IsRadio", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn IsTvEntityColumn =
      new EntityColumn(typeof(TuningDetail), "IsTv", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn NetworkIdEntityColumn =
      new EntityColumn(typeof(TuningDetail), "NetworkId", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn TransportIdEntityColumn =
      new EntityColumn(typeof(TuningDetail), "TransportId", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ServiceIdEntityColumn =
      new EntityColumn(typeof(TuningDetail), "ServiceId", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PmtPidEntityColumn =
      new EntityColumn(typeof(TuningDetail), "PmtPid", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn FreeToAirEntityColumn =
      new EntityColumn(typeof(TuningDetail), "FreeToAir", typeof(System.Boolean), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn ModulationEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Modulation", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PolarisationEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Polarisation", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn SymbolrateEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Symbolrate", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn DiseqcEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Diseqc", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn SwitchingFrequencyEntityColumn =
      new EntityColumn(typeof(TuningDetail), "SwitchingFrequency", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn BandwidthEntityColumn =
      new EntityColumn(typeof(TuningDetail), "Bandwidth", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn MajorChannelEntityColumn =
      new EntityColumn(typeof(TuningDetail), "MajorChannel", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn MinorChannelEntityColumn =
      new EntityColumn(typeof(TuningDetail), "MinorChannel", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn PcrPidEntityColumn =
      new EntityColumn(typeof(TuningDetail), "PcrPid", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn VideoSourceEntityColumn =
      new EntityColumn(typeof(TuningDetail), "VideoSource", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn TuningSourceEntityColumn =
      new EntityColumn(typeof(TuningDetail), "TuningSource", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdTuning methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdTuningColumn {
      get { return TypedTable.IdTuningColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdTuning {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdTuning", GetIdTuningCore, out result)) return result;
        return GetIdTuningCore();
      }
    }
    private System.Int32 GetIdTuningCore() {
      return (System.Int32) GetColumnValue(IdTuningColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* IdChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdChannelColumn {
      get { return TypedTable.IdChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdChannel {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdChannel", GetIdChannelCore, out result)) return result;
        return GetIdChannelCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("IdChannel", value, SetIdChannelCore)) return;
        SetIdChannelCore(value);
      }
    }
    private System.Int32 GetIdChannelCore() {
      return (System.Int32) GetColumnValue(IdChannelColumn, typeof(System.Int32), false); 
    }
    private void SetIdChannelCore(System.Int32 value) {
      SetColumnValue(IdChannelColumn, value);
    }
        
    //**************************************
    //* Name methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn NameColumn {
      get { return TypedTable.NameColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Name {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("Name", GetNameCore, out result)) return result;
        return GetNameCore();
      }
      set { 
        if (SetInterceptor<System.String>("Name", value, SetNameCore)) return;
        SetNameCore(value);
      }
    }
    private System.String GetNameCore() {
      return (System.String) GetColumnValue(NameColumn, typeof(System.String), false); 
    }
    private void SetNameCore(System.String value) {
      SetColumnValue(NameColumn, value);
    }
        
    //**************************************
    //* Provider methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ProviderColumn {
      get { return TypedTable.ProviderColumn; }
    }

    [MaxTextLength(200)]
    [DBDataType(typeof(System.String))]
    public virtual System.String Provider {
      get { 
        System.String result;
        if (GetInterceptor<System.String>("Provider", GetProviderCore, out result)) return result;
        return GetProviderCore();
      }
      set { 
        if (SetInterceptor<System.String>("Provider", value, SetProviderCore)) return;
        SetProviderCore(value);
      }
    }
    private System.String GetProviderCore() {
      return (System.String) GetColumnValue(ProviderColumn, typeof(System.String), false); 
    }
    private void SetProviderCore(System.String value) {
      SetColumnValue(ProviderColumn, value);
    }
        
    //**************************************
    //* ChannelType methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ChannelTypeColumn {
      get { return TypedTable.ChannelTypeColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 ChannelType {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("ChannelType", GetChannelTypeCore, out result)) return result;
        return GetChannelTypeCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("ChannelType", value, SetChannelTypeCore)) return;
        SetChannelTypeCore(value);
      }
    }
    private System.Int32 GetChannelTypeCore() {
      return (System.Int32) GetColumnValue(ChannelTypeColumn, typeof(System.Int32), false); 
    }
    private void SetChannelTypeCore(System.Int32 value) {
      SetColumnValue(ChannelTypeColumn, value);
    }
        
    //**************************************
    //* ChannelNumber methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ChannelNumberColumn {
      get { return TypedTable.ChannelNumberColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 ChannelNumber {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("ChannelNumber", GetChannelNumberCore, out result)) return result;
        return GetChannelNumberCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("ChannelNumber", value, SetChannelNumberCore)) return;
        SetChannelNumberCore(value);
      }
    }
    private System.Int32 GetChannelNumberCore() {
      return (System.Int32) GetColumnValue(ChannelNumberColumn, typeof(System.Int32), false); 
    }
    private void SetChannelNumberCore(System.Int32 value) {
      SetColumnValue(ChannelNumberColumn, value);
    }
        
    //**************************************
    //* Frequency methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn FrequencyColumn {
      get { return TypedTable.FrequencyColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Frequency {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Frequency", GetFrequencyCore, out result)) return result;
        return GetFrequencyCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Frequency", value, SetFrequencyCore)) return;
        SetFrequencyCore(value);
      }
    }
    private System.Int32 GetFrequencyCore() {
      return (System.Int32) GetColumnValue(FrequencyColumn, typeof(System.Int32), false); 
    }
    private void SetFrequencyCore(System.Int32 value) {
      SetColumnValue(FrequencyColumn, value);
    }
        
    //**************************************
    //* CountryId methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn CountryIdColumn {
      get { return TypedTable.CountryIdColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 CountryId {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("CountryId", GetCountryIdCore, out result)) return result;
        return GetCountryIdCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("CountryId", value, SetCountryIdCore)) return;
        SetCountryIdCore(value);
      }
    }
    private System.Int32 GetCountryIdCore() {
      return (System.Int32) GetColumnValue(CountryIdColumn, typeof(System.Int32), false); 
    }
    private void SetCountryIdCore(System.Int32 value) {
      SetColumnValue(CountryIdColumn, value);
    }
        
    //**************************************
    //* IsRadio methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IsRadioColumn {
      get { return TypedTable.IsRadioColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean IsRadio {
      get { 
        System.Boolean result;
        if (GetInterceptor<System.Boolean>("IsRadio", GetIsRadioCore, out result)) return result;
        return GetIsRadioCore();
      }
      set { 
        if (SetInterceptor<System.Boolean>("IsRadio", value, SetIsRadioCore)) return;
        SetIsRadioCore(value);
      }
    }
    private System.Boolean GetIsRadioCore() {
      return (System.Boolean) GetColumnValue(IsRadioColumn, typeof(System.Boolean), false); 
    }
    private void SetIsRadioCore(System.Boolean value) {
      SetColumnValue(IsRadioColumn, value);
    }
        
    //**************************************
    //* IsTv methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IsTvColumn {
      get { return TypedTable.IsTvColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean IsTv {
      get { 
        System.Boolean result;
        if (GetInterceptor<System.Boolean>("IsTv", GetIsTvCore, out result)) return result;
        return GetIsTvCore();
      }
      set { 
        if (SetInterceptor<System.Boolean>("IsTv", value, SetIsTvCore)) return;
        SetIsTvCore(value);
      }
    }
    private System.Boolean GetIsTvCore() {
      return (System.Boolean) GetColumnValue(IsTvColumn, typeof(System.Boolean), false); 
    }
    private void SetIsTvCore(System.Boolean value) {
      SetColumnValue(IsTvColumn, value);
    }
        
    //**************************************
    //* NetworkId methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn NetworkIdColumn {
      get { return TypedTable.NetworkIdColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 NetworkId {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("NetworkId", GetNetworkIdCore, out result)) return result;
        return GetNetworkIdCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("NetworkId", value, SetNetworkIdCore)) return;
        SetNetworkIdCore(value);
      }
    }
    private System.Int32 GetNetworkIdCore() {
      return (System.Int32) GetColumnValue(NetworkIdColumn, typeof(System.Int32), false); 
    }
    private void SetNetworkIdCore(System.Int32 value) {
      SetColumnValue(NetworkIdColumn, value);
    }
        
    //**************************************
    //* TransportId methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn TransportIdColumn {
      get { return TypedTable.TransportIdColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 TransportId {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("TransportId", GetTransportIdCore, out result)) return result;
        return GetTransportIdCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("TransportId", value, SetTransportIdCore)) return;
        SetTransportIdCore(value);
      }
    }
    private System.Int32 GetTransportIdCore() {
      return (System.Int32) GetColumnValue(TransportIdColumn, typeof(System.Int32), false); 
    }
    private void SetTransportIdCore(System.Int32 value) {
      SetColumnValue(TransportIdColumn, value);
    }
        
    //**************************************
    //* ServiceId methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ServiceIdColumn {
      get { return TypedTable.ServiceIdColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 ServiceId {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("ServiceId", GetServiceIdCore, out result)) return result;
        return GetServiceIdCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("ServiceId", value, SetServiceIdCore)) return;
        SetServiceIdCore(value);
      }
    }
    private System.Int32 GetServiceIdCore() {
      return (System.Int32) GetColumnValue(ServiceIdColumn, typeof(System.Int32), false); 
    }
    private void SetServiceIdCore(System.Int32 value) {
      SetColumnValue(ServiceIdColumn, value);
    }
        
    //**************************************
    //* PmtPid methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PmtPidColumn {
      get { return TypedTable.PmtPidColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 PmtPid {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("PmtPid", GetPmtPidCore, out result)) return result;
        return GetPmtPidCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("PmtPid", value, SetPmtPidCore)) return;
        SetPmtPidCore(value);
      }
    }
    private System.Int32 GetPmtPidCore() {
      return (System.Int32) GetColumnValue(PmtPidColumn, typeof(System.Int32), false); 
    }
    private void SetPmtPidCore(System.Int32 value) {
      SetColumnValue(PmtPidColumn, value);
    }
        
    //**************************************
    //* FreeToAir methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn FreeToAirColumn {
      get { return TypedTable.FreeToAirColumn; }
    }

    [DBDataType(typeof(System.Boolean))]
    public virtual System.Boolean FreeToAir {
      get { 
        System.Boolean result;
        if (GetInterceptor<System.Boolean>("FreeToAir", GetFreeToAirCore, out result)) return result;
        return GetFreeToAirCore();
      }
      set { 
        if (SetInterceptor<System.Boolean>("FreeToAir", value, SetFreeToAirCore)) return;
        SetFreeToAirCore(value);
      }
    }
    private System.Boolean GetFreeToAirCore() {
      return (System.Boolean) GetColumnValue(FreeToAirColumn, typeof(System.Boolean), false); 
    }
    private void SetFreeToAirCore(System.Boolean value) {
      SetColumnValue(FreeToAirColumn, value);
    }
        
    //**************************************
    //* Modulation methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn ModulationColumn {
      get { return TypedTable.ModulationColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Modulation {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Modulation", GetModulationCore, out result)) return result;
        return GetModulationCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Modulation", value, SetModulationCore)) return;
        SetModulationCore(value);
      }
    }
    private System.Int32 GetModulationCore() {
      return (System.Int32) GetColumnValue(ModulationColumn, typeof(System.Int32), false); 
    }
    private void SetModulationCore(System.Int32 value) {
      SetColumnValue(ModulationColumn, value);
    }
        
    //**************************************
    //* Polarisation methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PolarisationColumn {
      get { return TypedTable.PolarisationColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Polarisation {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Polarisation", GetPolarisationCore, out result)) return result;
        return GetPolarisationCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Polarisation", value, SetPolarisationCore)) return;
        SetPolarisationCore(value);
      }
    }
    private System.Int32 GetPolarisationCore() {
      return (System.Int32) GetColumnValue(PolarisationColumn, typeof(System.Int32), false); 
    }
    private void SetPolarisationCore(System.Int32 value) {
      SetColumnValue(PolarisationColumn, value);
    }
        
    //**************************************
    //* Symbolrate methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn SymbolrateColumn {
      get { return TypedTable.SymbolrateColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Symbolrate {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Symbolrate", GetSymbolrateCore, out result)) return result;
        return GetSymbolrateCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Symbolrate", value, SetSymbolrateCore)) return;
        SetSymbolrateCore(value);
      }
    }
    private System.Int32 GetSymbolrateCore() {
      return (System.Int32) GetColumnValue(SymbolrateColumn, typeof(System.Int32), false); 
    }
    private void SetSymbolrateCore(System.Int32 value) {
      SetColumnValue(SymbolrateColumn, value);
    }
        
    //**************************************
    //* Diseqc methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn DiseqcColumn {
      get { return TypedTable.DiseqcColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Diseqc {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Diseqc", GetDiseqcCore, out result)) return result;
        return GetDiseqcCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Diseqc", value, SetDiseqcCore)) return;
        SetDiseqcCore(value);
      }
    }
    private System.Int32 GetDiseqcCore() {
      return (System.Int32) GetColumnValue(DiseqcColumn, typeof(System.Int32), false); 
    }
    private void SetDiseqcCore(System.Int32 value) {
      SetColumnValue(DiseqcColumn, value);
    }
        
    //**************************************
    //* SwitchingFrequency methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn SwitchingFrequencyColumn {
      get { return TypedTable.SwitchingFrequencyColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 SwitchingFrequency {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("SwitchingFrequency", GetSwitchingFrequencyCore, out result)) return result;
        return GetSwitchingFrequencyCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("SwitchingFrequency", value, SetSwitchingFrequencyCore)) return;
        SetSwitchingFrequencyCore(value);
      }
    }
    private System.Int32 GetSwitchingFrequencyCore() {
      return (System.Int32) GetColumnValue(SwitchingFrequencyColumn, typeof(System.Int32), false); 
    }
    private void SetSwitchingFrequencyCore(System.Int32 value) {
      SetColumnValue(SwitchingFrequencyColumn, value);
    }
        
    //**************************************
    //* Bandwidth methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn BandwidthColumn {
      get { return TypedTable.BandwidthColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 Bandwidth {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("Bandwidth", GetBandwidthCore, out result)) return result;
        return GetBandwidthCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("Bandwidth", value, SetBandwidthCore)) return;
        SetBandwidthCore(value);
      }
    }
    private System.Int32 GetBandwidthCore() {
      return (System.Int32) GetColumnValue(BandwidthColumn, typeof(System.Int32), false); 
    }
    private void SetBandwidthCore(System.Int32 value) {
      SetColumnValue(BandwidthColumn, value);
    }
        
    //**************************************
    //* MajorChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn MajorChannelColumn {
      get { return TypedTable.MajorChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 MajorChannel {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("MajorChannel", GetMajorChannelCore, out result)) return result;
        return GetMajorChannelCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("MajorChannel", value, SetMajorChannelCore)) return;
        SetMajorChannelCore(value);
      }
    }
    private System.Int32 GetMajorChannelCore() {
      return (System.Int32) GetColumnValue(MajorChannelColumn, typeof(System.Int32), false); 
    }
    private void SetMajorChannelCore(System.Int32 value) {
      SetColumnValue(MajorChannelColumn, value);
    }
        
    //**************************************
    //* MinorChannel methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn MinorChannelColumn {
      get { return TypedTable.MinorChannelColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 MinorChannel {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("MinorChannel", GetMinorChannelCore, out result)) return result;
        return GetMinorChannelCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("MinorChannel", value, SetMinorChannelCore)) return;
        SetMinorChannelCore(value);
      }
    }
    private System.Int32 GetMinorChannelCore() {
      return (System.Int32) GetColumnValue(MinorChannelColumn, typeof(System.Int32), false); 
    }
    private void SetMinorChannelCore(System.Int32 value) {
      SetColumnValue(MinorChannelColumn, value);
    }
        
    //**************************************
    //* PcrPid methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn PcrPidColumn {
      get { return TypedTable.PcrPidColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 PcrPid {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("PcrPid", GetPcrPidCore, out result)) return result;
        return GetPcrPidCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("PcrPid", value, SetPcrPidCore)) return;
        SetPcrPidCore(value);
      }
    }
    private System.Int32 GetPcrPidCore() {
      return (System.Int32) GetColumnValue(PcrPidColumn, typeof(System.Int32), false); 
    }
    private void SetPcrPidCore(System.Int32 value) {
      SetColumnValue(PcrPidColumn, value);
    }
        
    //**************************************
    //* VideoSource methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn VideoSourceColumn {
      get { return TypedTable.VideoSourceColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 VideoSource {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("VideoSource", GetVideoSourceCore, out result)) return result;
        return GetVideoSourceCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("VideoSource", value, SetVideoSourceCore)) return;
        SetVideoSourceCore(value);
      }
    }
    private System.Int32 GetVideoSourceCore() {
      return (System.Int32) GetColumnValue(VideoSourceColumn, typeof(System.Int32), false); 
    }
    private void SetVideoSourceCore(System.Int32 value) {
      SetColumnValue(VideoSourceColumn, value);
    }
        
    //**************************************
    //* TuningSource methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn TuningSourceColumn {
      get { return TypedTable.TuningSourceColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 TuningSource {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("TuningSource", GetTuningSourceCore, out result)) return result;
        return GetTuningSourceCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("TuningSource", value, SetTuningSourceCore)) return;
        SetTuningSourceCore(value);
      }
    }
    private System.Int32 GetTuningSourceCore() {
      return (System.Int32) GetColumnValue(TuningSourceColumn, typeof(System.Int32), false); 
    }
    private void SetTuningSourceCore(System.Int32 value) {
      SetColumnValue(TuningSourceColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
