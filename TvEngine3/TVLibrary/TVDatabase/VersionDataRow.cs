using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Runtime.Serialization;

using IdeaBlade.Persistence;
using IdeaBlade.Rdb;
using IdeaBlade.Persistence.Rdb;
using IdeaBlade.Util;

namespace TvDatabase {

  #region VersionDataTable
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated.
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Last modified : 2006-07-01T14:32:26.4375+02:00
  ///    ****************************************************
  ///</summary>
  [BindingBrowsable(false)]
  [Serializable]
  public partial class VersionDataTable : IdeaBlade.Persistence.EntityTable , 
     IdeaBlade.Persistence.Rdb.IRdbTable {
  
    public VersionDataTable() {}

    protected VersionDataTable(SerializationInfo pInfo, StreamingContext pContext) :
      base(pInfo, pContext) {}

    protected override DataRow NewRowFromBuilder(DataRowBuilder pRowBuilder) {
      return new Version(pRowBuilder);
    }

    protected override Type GetRowType() {
      return typeof(Version);
    }
    
    public override String DataSourceKeyName {
      get { return @"default"; }
    }


    #region Column properties
    private DataColumn mIdVersionColumn;
    public DataColumn IdVersionColumn {
      get {
        if (mIdVersionColumn!=null) return mIdVersionColumn;
        mIdVersionColumn = GetColumn("IdVersion", true);
        return mIdVersionColumn;
      }
    }
    private DataColumn mVersionNumberColumn;
    public DataColumn VersionNumberColumn {
      get {
        if (mVersionNumberColumn!=null) return mVersionNumberColumn;
        mVersionNumberColumn = GetColumn("VersionNumber", true);
        return mVersionNumberColumn;
      }
    }
    #endregion    

    protected override TableMappingInfo CreateTableMappingInfo() {
      RdbTableMappingInfo mappingInfo = new RdbTableMappingInfo(this);
      mappingInfo.SourceOwnerName = "dbo"; 
      mappingInfo.SourceTableName = "Version"; 
      mappingInfo.ConcurrencyColumnName = ""; 
      // ColumnSelectionOption: selectAllColumns
      mappingInfo.SourceColumnNames = "*"; 
   
      DataColumnMappingCollection columnMappings = mappingInfo.TableMapping.ColumnMappings;
      columnMappings.Clear();
      columnMappings.Add("idVersion", "IdVersion");
      columnMappings.Add("versionNumber", "VersionNumber");
      return mappingInfo;
    }
  
    protected override void UpdateTableMappingInfo() {
      base.UpdateTableMappingInfo();
    }

    public override void InitColumnProperties() {
      base.InitColumnProperties();

      IdVersionColumn.Caption = "idVersion";
      VersionNumberColumn.Caption = "versionNumber";
    }
  }
  #endregion
  
  #region VersionDataRow
  /// <summary>
  ///    ****************************************************
  ///    ** DO NOT MODIFY THIS CLASS - AutoGenerated Code
  ///    ** Any changes made to this code will be lost the
  ///    ** next time this code is regenerated
  ///    **
  ///    ** Generated from: EntityBaseclass.template
  ///    ** Generated on:   2006-07-01T14:32:26.4375+02:00
  ///    ****************************************************
  ///</summary>
  [Serializable]
  public abstract partial class VersionDataRow : IdeaBlade.Persistence.Entity, 
     IdeaBlade.Persistence.Rdb.IRdbEntity {
  
    protected VersionDataRow(DataRowBuilder pRowBuilder)
      : base(pRowBuilder) {
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public new VersionDataTable TypedTable {
      get { return (VersionDataTable) base.Table; }
    }

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public static Type GetTableType() {
      return typeof(VersionDataTable);
    }

    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual string SqlWhereClause {
      get { return ""; }
    }
    
    [BindingBrowsable(false)]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public virtual bool ForceSqlDistinct {
      get { return false; }
    }

    #region Enums
    //**************************************
    //* Enums
    //**************************************
    #endregion
	
    #region Relation properties
    //**************************************
    //* Relation properties
    //**************************************
    
    #endregion
    
    #region EntityColumn definitions
    //**************************************
    //* Static EntityColumn definitions
    //**************************************

    public static readonly EntityColumn IdVersionEntityColumn =
      new EntityColumn(typeof(Version), "IdVersion", typeof(System.Int32), false, true, true, DataSourceAccessType.ReadWrite);      
    public static readonly EntityColumn VersionNumberEntityColumn =
      new EntityColumn(typeof(Version), "VersionNumber", typeof(System.Int32), false, false, false, DataSourceAccessType.ReadWrite);      
    #endregion
    
    #region Properties
    //**************************************
    //* IdVersion methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn IdVersionColumn {
      get { return TypedTable.IdVersionColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 IdVersion {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("IdVersion", GetIdVersionCore, out result)) return result;
        return GetIdVersionCore();
      }
    }
    private System.Int32 GetIdVersionCore() {
      return (System.Int32) GetColumnValue(IdVersionColumn, typeof(System.Int32), false); 
    }
        
    //**************************************
    //* VersionNumber methods
    //**************************************
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [BindingBrowsable(false)]
    public virtual DataColumn VersionNumberColumn {
      get { return TypedTable.VersionNumberColumn; }
    }

    [DBDataType(typeof(System.Int32))]
    public virtual System.Int32 VersionNumber {
      get { 
        System.Int32 result;
        if (GetInterceptor<System.Int32>("VersionNumber", GetVersionNumberCore, out result)) return result;
        return GetVersionNumberCore();
      }
      set { 
        if (SetInterceptor<System.Int32>("VersionNumber", value, SetVersionNumberCore)) return;
        SetVersionNumberCore(value);
      }
    }
    private System.Int32 GetVersionNumberCore() {
      return (System.Int32) GetColumnValue(VersionNumberColumn, typeof(System.Int32), false); 
    }
    private void SetVersionNumberCore(System.Int32 value) {
      SetColumnValue(VersionNumberColumn, value);
    }
        
    #endregion
    
  }
  #endregion
}
