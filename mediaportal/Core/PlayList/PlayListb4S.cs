/* 
 *	Copyright (C) 2005 Media Portal
 *	http://mediaportal.sourceforge.net
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *   
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *   
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
 *  http://www.gnu.org/copyleft/gpl.html
 *
 */
using System;
using System.IO;
using System.Xml;
using MediaPortal.GUI.Library;
using MediaPortal.Util;
/* ------------------------ example b4s playlist file ---------------------------------
	<?xml version="1.0" encoding='UTF-8' standalone="yes"?>
	<WinampXML>
	<!-- Generated by: Nullsoft Winamp3 version 3.0d -->
		<playlist num_entries="2" label="Playlist 001">
			<entry Playstring="file:E:\Program Files\Winamp3\demo.mp3">
				<Name>demo</Name>
				<Length>5982</Length>
			</entry>
			<entry Playstring="file:E:\Program Files\Winamp3\demo.mp3">
				<Name>demo</Name>
				<Length>5982</Length>
			</entry>
		</playlist>
	</WinampXML>
------------------------ end of example b4s playlist file ---------------------------------*/

namespace MediaPortal.Playlists
{
	/// <summary>
	/// 
	/// </summary>
	public class PlayListB4S : PlayList
	{

		public PlayListB4S()
		{
		}
		public override bool Load(string fileName)
		{
			Clear();

			try
			{
				string basePath=System.IO.Path.GetDirectoryName(System.IO.Path.GetFullPath(fileName));
			
				XmlDocument doc= new XmlDocument();
				doc.Load(fileName);
				if (doc.DocumentElement==null) return false;
				string root=doc.DocumentElement.Name;
				if (root!="WinampXML") return false;

				XmlNode nodeRoot=doc.DocumentElement.SelectSingleNode("/WinampXML/playlist");
				if (nodeRoot==null) return false;
				XmlNodeList nodeEntries=nodeRoot.SelectNodes("entry");
				foreach (XmlNode node in nodeEntries)
				{
					XmlNode nodeFile  = node.Attributes.GetNamedItem("Playstring");
					XmlNode nodeName  = node.SelectSingleNode("Name");
					XmlNode nodeLength= node.SelectSingleNode("Length");
					if (nodeFile != null && nodeName!=null && nodeLength!=null)
					{
						int duration=System.Int32.Parse(nodeLength.InnerText);
						string infoLine=nodeName.InnerText;
						string file=nodeFile.InnerText;
						Utils.GetQualifiedFilename(basePath,ref file);
						PlayListItem newItem = new PlayListItem(infoLine, file, duration);
						if (infoLine.Length==0)
						{
							infoLine=System.IO.Path.GetFileName(file);
							newItem.Description=infoLine;
						}
						Add(newItem);
					}
				}
				return true;
			}
			catch (Exception ex)
			{
				Log.Write("exception loading playlist {0} err:{1} stack:{2}", fileName, ex.Message,ex.StackTrace);
			}
			return false;
		}

		public override void 	Save(string fileName)  
		{
			using (StreamWriter writer = new StreamWriter(fileName,true))
			{
				//writer.WriteLine("<?xml version=%c1.0%c encoding='UTF-8' standalone=%cyes%c?>\n");
				writer.WriteLine("<WinampXML>");
				writer.WriteLine("  <playlist num_entries=\"{0}\" label=\"{1}\">",_listPlayListItems.Count,_playListName);
				for (int i=0; i < _listPlayListItems.Count;++i)
				{
					PlayListItem item=_listPlayListItems[i];
					writer.WriteLine("    <entry Playstring=\"file:{0}\">", item.FileName );
					writer.WriteLine("      <Name>{0}</Name>", item.Description);
					writer.WriteLine("      <Length>{0}</Length>", item.Duration);
				}
				writer.WriteLine("  </playlist>");
				writer.WriteLine("</WinampXML>");
			}
		}
	}
}
