//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";

using System;
using System.Text;
using System.IO;
using System.Net;
using System.Collections;
using System.Web;
using System.Text.RegularExpressions;
using MediaPortal.Util;
using MediaPortal.Video.Database;
using System.Windows.Forms;

internal class Grabber : IIMDBScriptGrabber
{
  void IIMDBScriptGrabber.FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
    int iCount = 0;
    iLimit = 1000;
    try
    {
      string absoluteUri;
      string strUrl = "http://akas.imdb.com/find?s=tt;q=" + strSearch;

      string strBody = GetPage(strUrl, "utf-8", out absoluteUri);

      string strBodyExactApprox = string.Empty;
      string strBodyPopularPart = string.Empty;

      bool bFoundExactApprox = false;
      bool bFoundPopPart = false;

      int iStartOfMovieExactApproxList = 0;
      int iStartOfMoviePopPartList = 0;

      //First try popular, if found try to find Exact matches for full list
      iStartOfMoviePopPartList = strBody.IndexOf("Popular Titles");
      if (iStartOfMoviePopPartList >= 0) // Pirppuli 6.1.2009: Popular titles found
      {
        strBodyPopularPart = strBody;
        bFoundPopPart = true;
      }
      //No popular, then try Exact matches
      iStartOfMovieExactApproxList = strBody.IndexOf("Titles (Exact Matches)");
      if (iStartOfMovieExactApproxList >= 0)
      {
        bFoundExactApprox = true;
        strBodyExactApprox = strBody;
      }
      //No popular and Exact, try Partial and Approx matches (this can be huge list
      //so it's why is this used after prevoius fails and it's small chance to get here)
      if ((iStartOfMoviePopPartList <= 0) & (iStartOfMovieExactApproxList <= 0))
      {
        iStartOfMoviePopPartList = strBody.IndexOf("Titles (Partial Matches)");
        if (iStartOfMoviePopPartList >= 0)
        {
          strBodyPopularPart = strBody;
          bFoundPopPart = true;
        }
        iStartOfMovieExactApproxList = strBody.IndexOf("Titles (Approx Matches)");
        if (iStartOfMovieExactApproxList >= 0)
        {
          bFoundExactApprox = true;
          strBodyExactApprox = strBody;
        }
      }

      int endOfTitleList = strBody.IndexOf("Suggestions For Improving Your Results");

      //Direct find ttxxxxxx / xxxxxx-->IMDB Movie number
      if ((iStartOfMoviePopPartList <= 0) & (iStartOfMovieExactApproxList <= 0))
      {
        //Check if direct find is true (film page)
		// Title
		string regexPattern = @"<title>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
		string strTitle = Regex.Match(strBody, regexPattern).Groups["movieTitle"].Value.Trim();
		// Year
		string strYear = Regex.Match(strBody, regexPattern).Groups["movieYear"].Value;
		if (strTitle != string.Empty && strYear != string.Empty)
        {
          HTMLUtil htmlUtil = new HTMLUtil();
          htmlUtil.ConvertHTMLToAnsi(strTitle, out strTitle);
          IMDB.IMDBUrl url = new IMDB.IMDBUrl(absoluteUri, strTitle + " (IMDB)", "IMDB");
          elements.Add(url);
        }
        //Film is found-exit
        return;
      }
      //Popular and Partial matches
      if (bFoundPopPart)
      {
        iStartOfMoviePopPartList += "<table>".Length;
        int iEndOfMovieList = strBodyPopularPart.IndexOf("</table>", iStartOfMoviePopPartList);

        if (iEndOfMovieList < 0) iEndOfMovieList = strBodyPopularPart.Length;
        if (endOfTitleList < iEndOfMovieList && endOfTitleList > iStartOfMoviePopPartList)
          iEndOfMovieList = endOfTitleList;

        strBodyPopularPart = strBodyPopularPart.
          Substring(iStartOfMoviePopPartList, iEndOfMovieList - iStartOfMoviePopPartList);
        while (true)
        {
          //Regular Expressions method for parsing HTML code and grouping relevant information
          //Title, Options and AKA
          Match imdbEntry = Regex.Match(strBodyPopularPart,
                                        @"<tr>[\s]*<td[^>]*>.*?</td>[\s]*<td[^>]*>.*?</td>[\s]*<td[^>]*>.*?<a\shref=""
                                       (?<tt>/title/tt[0-9]*/)[^>]*>(?<title>.*?)
                                        </a>[\s]
                                       (?<options>[(][^<]*)
                                       (?<aka>.*?)
                                        </td>[\s]*</tr>",
                                        RegexOptions.IgnoreCase |
                                        RegexOptions.IgnorePatternWhitespace |
                                        RegexOptions.Singleline |
                                        RegexOptions.Compiled);

          while (imdbEntry.Success)
          {
            // Pirppuli 6.1.2009: Added HTML entity decoding
            string imdbTitle = HttpUtility.HtmlDecode(imdbEntry.Groups["title"].Value).Replace("\"", "").Replace(
              "</a>", "");
            string imdbURL = imdbEntry.Groups["tt"].Value;
            //Aka names fix (Unicode chars as ASC) 5.4.2010 Deda -->HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value)
            string imdbOptions =
              Regex.Replace(HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value), @"<(.|\n)*?>", " ",
                            RegexOptions.IgnoreCase | RegexOptions.Compiled).Trim();
            if (Regex.Match(imdbOptions, "\\(\\d{4}").Success)
            {
              int bracket = imdbOptions.IndexOf(")") + 1;
              string option = imdbOptions.Substring(bracket);
              imdbOptions = imdbOptions.Substring(0, 5) + ")" + option;
            }
            //Do not show TV series or Shows and Video Games
            bool bSkipThisEntry = imdbOptions.Contains("(TV series)") |
                                  imdbOptions.Contains("(VG)");

            if (bSkipThisEntry == false)
            {
              //Original Movie title (Extension "IMDB")
              IMDB.IMDBUrl url = new IMDB.IMDBUrl
                ("http://akas.imdb.com" + imdbURL, imdbTitle + " " + imdbOptions + "", "IMDB");
              elements.Add(url);
              iCount++;

              string imdbAka = imdbEntry.Groups["aka"].Value;
              Match imdbAlias = Regex.Match(imdbAka, @">aka\s""(?<alias>.*?)</p>",
                                            RegexOptions.IgnoreCase | RegexOptions.Compiled);
              while (imdbAlias.Success)
              {
                // Pirppuli 6.1.2009: Added HTML entity decoding and quote stripping
                imdbTitle = HttpUtility.HtmlDecode(imdbAlias.Groups["alias"].Value).Replace("\"", "");
                //Aka names fix (Unicode chars as ASC) 5.4.2010 Deda -->HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value)
                string imdbakaOptions =
                  Regex.Replace(HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value), @"<(.|\n)*?>", " ",
                                RegexOptions.IgnoreCase | RegexOptions.Compiled).Trim();
                if (Regex.Match(imdbakaOptions, "\\(\\d{4}").Success)
                {
                  int bracket = imdbakaOptions.IndexOf(")") + 1;
                  string option = imdbakaOptions.Substring(bracket);
                  imdbakaOptions = imdbakaOptions.Substring(0, 5) + ")" + option;
                }
                imdbTitle = imdbTitle.Replace("<em>", string.Empty);
                imdbTitle = imdbTitle.Replace("</em>", string.Empty);

                //Do not show TV series or Shows and Video Games
                bool bSkipThisAkaEntry =
                  imdbakaOptions.Contains("(TV series)") |
                  imdbakaOptions.Contains("(VG)");

                if (bSkipThisAkaEntry == false)
                {
                  //AKA movie title (extension "IMDB_With_AKA")
                  url = new IMDB.IMDBUrl
                    ("http://akas.imdb.com" + imdbURL, imdbTitle + " " + imdbakaOptions + " (IMDB_With_AKA)", "IMDB");
                  elements.Add(url);
                }
                imdbAlias = imdbAlias.NextMatch();
              }
            }
            imdbEntry = imdbEntry.NextMatch();
            if (iCount > iLimit) break;
          }
          break;
        }
      }
      //Exact and Approx matches found
      if (bFoundExactApprox)
      {
        iStartOfMovieExactApproxList += "<table>".Length;
        int iEndOfMovieExactList = strBodyExactApprox.IndexOf("</table>", iStartOfMovieExactApproxList);

        if (iEndOfMovieExactList < 0)
        {
          iEndOfMovieExactList = strBodyExactApprox.Length;
        }
        if (endOfTitleList < iEndOfMovieExactList && endOfTitleList > iStartOfMovieExactApproxList)
        {
          iEndOfMovieExactList = endOfTitleList;
        }
        strBodyExactApprox = strBodyExactApprox.
          Substring(iStartOfMovieExactApproxList, iEndOfMovieExactList - iStartOfMovieExactApproxList);
        while (true)
        {
          //Regular Expressions method for parsing HTML code and grouping relevant information
          //Title, options and AKA
          Match imdbEntry = Regex.Match(strBodyExactApprox,
                                        @"<tr>[\s]*<td[^>]*>.*?</td>[\s]*<td[^>]*>.*?</td>[\s]*<td[^>]*>.*?<a\shref=""
                        (?<tt>/title/tt[0-9]*/)[^>]*>(?<title>.*?)
                        </a>[\s]
                        (?<options>[(][^<]*)
                        (?<aka>.*?)
                        </td>[\s]*</tr>",
                                        RegexOptions.IgnoreCase |
                                        RegexOptions.IgnorePatternWhitespace |
                                        RegexOptions.Singleline |
                                        RegexOptions.Compiled);

          while (imdbEntry.Success)
          {
            // Pirppuli 6.1.2009: Added HTML entity decoding
            string imdbTitle = HttpUtility.HtmlDecode(imdbEntry.Groups["title"].Value).Replace("\"", "").Replace(
              "</a>", "");
            string imdbURL = imdbEntry.Groups["tt"].Value;
            //Aka names fix (Unicode chars as ASC) 5.4.2010 Deda -->HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value)
            string imdbOptions =
              Regex.Replace(HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value), @"<(.|\n)*?>", " ",
                            RegexOptions.IgnoreCase | RegexOptions.Compiled).Trim();
            if (Regex.Match(imdbOptions, "\\(\\d{4}").Success)
            {
              int bracket = imdbOptions.IndexOf(")") + 1;
              string option = imdbOptions.Substring(bracket);
              imdbOptions = imdbOptions.Substring(0, 5) + ")" + option;
            }
            //Do not show TV series or TVshows
            bool bSkipThisEntry = imdbOptions.Contains("(TV series)") |
                                  imdbOptions.Contains("(VG)");

            if (bSkipThisEntry == false)
            {
              //Original movie name (extension (" IMDB"))
              IMDB.IMDBUrl url = new IMDB.IMDBUrl
                ("http://akas.imdb.com" + imdbURL, imdbTitle + " " + imdbOptions + "", "IMDB");
              elements.Add(url);
              iCount++;

              string imdbAka = imdbEntry.Groups["aka"].Value;
              Match imdbAlias = Regex.Match(imdbAka, @">aka\s""(?<alias>.*?)</p>",
                                            RegexOptions.IgnoreCase | RegexOptions.Compiled);
              while (imdbAlias.Success)
              {
                // Pirppuli 6.1.2009: Added HTML entity decoding and quote stripping
                imdbTitle = HttpUtility.HtmlDecode(imdbAlias.Groups["alias"].Value).Replace("\"", "");
                //Aka names fix (Unicode chars as ASC) 5.4.2010 Deda -->HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value)
                string imdbakaOptions =
                  Regex.Replace(HttpUtility.HtmlDecode(imdbEntry.Groups["options"].Value), @"<(.|\n)*?>", " ",
                                RegexOptions.IgnoreCase | RegexOptions.Compiled).Trim();
                if (Regex.Match(imdbakaOptions, "\\(\\d{4}").Success)
                {
                  int bracket = imdbakaOptions.IndexOf(")") + 1;
                  string option = imdbakaOptions.Substring(bracket);
                  imdbakaOptions = imdbakaOptions.Substring(0, 5) + ")" + option;
                }
                imdbTitle = imdbTitle.Replace("<em>", string.Empty);
                imdbTitle = imdbTitle.Replace("</em>", string.Empty);

                //Do not show TV series or TVshows and Video Games
                bool bSkipThisAkaEntry =
                  imdbakaOptions.Contains("(TV series)") |
                  imdbakaOptions.Contains("(VG)");

                if (bSkipThisAkaEntry == false)
                {
                  //AKA movie name (extension "IMDB_With_AKA")
                  url = new IMDB.IMDBUrl
                    ("http://akas.imdb.com" + imdbURL, imdbTitle + " " + imdbakaOptions + " (IMDB_With_AKA)", "IMDB");
                  elements.Add(url);
                  imdbAlias = imdbAlias.NextMatch();
                }
              }
            }
            imdbEntry = imdbEntry.NextMatch();
            if (iCount > iLimit)
            {
              break;
            }
          }
          break;
        }
      }
    }
    catch (Exception ex)
    {
      MediaPortal.GUI.Library.Log.Error("exception for imdb lookup of {0} err:{1} stack:{2}", strSearch, ex.Message,
                                        ex.StackTrace);
    }
  }

  //Movie details
  bool IIMDBScriptGrabber.GetDetails(IMDB.IMDBUrl url, ref IMDBMovie movieDetails)
  {
    try
    {
      movieDetails.Reset();
      movieDetails.Database = "IMDB";

      string strAbsUrl;
      string strBody = GetPage(url.URL, "utf-8", out strAbsUrl);
      if (string.IsNullOrEmpty(strBody))
        return false;

      string regexBlockPattern = string.Empty;
      string regexPattern = string.Empty;
      string block = string.Empty;

      // IMDB Number
      int iPos = strAbsUrl.IndexOf("/title/");
      if (iPos > 0)
      {
        iPos += "/title/".Length;
        movieDetails.IMDBNumber = strAbsUrl.Substring(iPos);
        int pos = movieDetails.IMDBNumber.IndexOf("/");
        if (pos > 0)
          movieDetails.IMDBNumber = movieDetails.IMDBNumber.Substring(0, pos);
      }

      // Title
      regexPattern = @"<title>(?<movieTitle>.*?)[(].*?(?<movieYear>\d{4})";
      string title = Regex.Match(strBody, regexPattern).Groups["movieTitle"].Value.Trim();
      movieDetails.Title = HttpUtility.HtmlDecode(title);

      // Year
      int year = int.Parse(Regex.Match(strBody, regexPattern).Groups["movieYear"].Value);
      movieDetails.Year = year;

      // Director
      regexBlockPattern =
        @"<h5>Director[s]?:</h5>(?<directors_block>.*?)</div>|<h4[^>]*>[^D]*Director[s]?:[^<]*</h4>[^<]*(?<directors_block>.*?)</div>";
      regexPattern = @"<a\s+href=""/name/nm\d{7}/""[^>]*>(?<movieDirectors>[^<]+)</a>";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Groups["directors_block"].Value;
      movieDetails.Director = HttpUtility.HtmlDecode(Regex.Match(block, regexPattern, RegexOptions.Singleline).Groups["movieDirectors"].Value);

      // Writers
      regexBlockPattern =
        "<h5>Writer[s]?.*?<div\\sclass=\"info-content\">.*?(?<writers_block>.*?)</div>|<h4[^>]*>[^W]*Writer[s]?:[^<]*</h4>[^<]*(?<writers_block>.*?)</div>";
      regexPattern =
        "<a\\s+href=\"/name/nm\\d{7}[^>]*>(?<writer>[^<]+)</a>(?<role>.*?)<|<a\\s+href=\"/name/nm\\d{7}/\"[^>]*>(?<writer>[^<]+)</a>[\\s]*<[^>]*>(?<role>.*?)<|<a\\s+href=\"/name/nm\\d{7}/\"[^>]*>(?<writer>[^<]+)</a>(?<role>)";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Groups["writers_block"].Value;
      MatchCollection mcWriters = Regex.Matches(block, regexPattern);
      if (mcWriters.Count != 0)
      {
        string writers = string.Empty;

        foreach (Match mwriter in mcWriters)
        {
          string strWriter = string.Empty;
          strWriter = HttpUtility.HtmlDecode(mwriter.Groups["writer"].Value);

          string strWriterRole = string.Empty;
          strWriterRole = HttpUtility.HtmlDecode(mwriter.Groups["role"].Value);
          if (strWriterRole != string.Empty)
          {
            writers = writers + strWriter + " " + strWriterRole + " ";
          }
          else
          {
            writers = writers + strWriter + " ";
          }
        }
        movieDetails.WritingCredits = writers.Replace("...", "").Trim();
      }

      // Actors
      regexBlockPattern = @"<table class=""cast"">.*?</table>|<table class=""cast_list"">.*?</table>";
      //regexPattern = 
      //  ";\">(?<actor>[\\w'. ]*)</a></td><td class=\"ddd\"> ... </td><td class=\"char\"><a href=\"/character/ch[0-9]*/\">(?<role>.*?)<|;\">(?<actor>[\\w'. ]*)</a></td><td class=\"ddd\"> ... </td><td class=\"char\">(?<role>.*?)<|<td[^<]*<a\\s+href=\"/name/nm\\d{7}/\"[^>]*>(?<actor>[^<]*)</a>.*?<div[^<]*<a\\s+href=\"/character/ch\\d{7}/\"[^>]*>(?<role>[^<]*)</a>";
      string others = @"td class=""nm""><a href=./name.*?>(?<actor>.*?)</a><.*?<td class=""char"">(?<role>.*?)<";
	  regexPattern =
          @"href=""/name/nm\d{7}/"".*?alt=""(?<actor>.*?)"".*?<td.class=""character"">.*?<div>(?<role>.*?)</div>"; 
      Match castBlock = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline);

      // These are some fallback methods to find the block with the cast, in case something changes on IMDB, these may work reasonably well anyway...
      if (!castBlock.Success)
        castBlock = Regex.Match(strBody, @"redited\scast.*?</table>");
      if (!castBlock.Success)
        castBlock = Regex.Match(strBody, @"first\sbilled\sonly.*?</table>");
      if (!castBlock.Success)
        castBlock = Regex.Match(strBody, @"redited\scast.*?more");
      if (!castBlock.Success)
        castBlock = Regex.Match(strBody, @"first\sbilled\sonly.*?more");

      string strCastBlock = HttpUtility.HtmlDecode(castBlock.Value);

      MatchCollection mc = Regex.Matches(strCastBlock, regexPattern, RegexOptions.Singleline);

      string strActor = string.Empty;
      string strRole = string.Empty;

      if (mc.Count != 0)
      {
        foreach (Match m in mc)
        {
          strActor = string.Empty;
          strActor = m.Groups["actor"].Value;
          strActor = Utils.stripHTMLtags(strActor).Trim().Replace("\n", "");
          strActor = HttpUtility.HtmlDecode(strActor).Replace(",", ";");

          strRole = string.Empty;
          strRole = m.Groups["role"].Value;
          strRole = Utils.stripHTMLtags(strRole).Trim().Replace("\n", "");
          strRole = HttpUtility.HtmlDecode(strRole).Replace(",", ";").Replace("  ", "").Replace("(", " (");
		  
          movieDetails.Cast += strActor;
          if (strRole != string.Empty)
            movieDetails.Cast += " as " + strRole;

          movieDetails.Cast += "\n";
        }
      }
      else
      {
        MatchCollection mcother = Regex.Matches(strCastBlock, others);

        foreach (Match m in mcother)
        {
          strActor = string.Empty;
          strActor = m.Groups["actor"].Value;
          strActor = Utils.stripHTMLtags(strActor).Trim();
          strActor = HttpUtility.HtmlDecode(strActor).Replace(",", ";").Replace("\n","");

          strRole = string.Empty;
          strRole = m.Groups["role"].Value;
          strRole = Utils.stripHTMLtags(strRole).Trim();
          strRole = HttpUtility.HtmlDecode(strRole).Replace(",", ";").Replace("\n","");
		  
          movieDetails.Cast += strActor;
          if (strRole != string.Empty)
            movieDetails.Cast += " as " + strRole;

          movieDetails.Cast += "\n";
        }
      }

      // Genres
      regexBlockPattern =
        @"<h5>Genre:</h5>(?<genres_block>.+?)</div>|<h4[^>]*>Genre[s]?:[^<]*</h4>(?<genres_block>.+?)</div>";
      regexPattern = @"<a href=""(?:/Sections)?/[Gg]enre[s]?/[^/]+/?"">(?<movieGenres>.+?)</a>";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value;
      MatchCollection mcGenre = Regex.Matches(block, regexPattern);
      string genre = string.Empty;
      foreach (Match m in mcGenre)
      {
        genre = genre + m.Groups["movieGenres"] + " / ";
      }
      movieDetails.Genre = HttpUtility.HtmlDecode(genre.Remove(genre.LastIndexOf(" / ")));

      // MPARating
      //
      // Get rating from main movie page if exists
	  regexBlockPattern = @"<div\sclass=""infobar"".*?nbsp;<a";
      block = Regex.Match(strBody, regexBlockPattern, RegexOptions.Singleline).Value;
      regexPattern = @"alt=""(?<rating>.*?)""";
      string mCertUSA = Regex.Match(block, regexPattern, RegexOptions.Singleline).Groups["rating"].Value.Replace("_","-");
      if (mCertUSA.ToLower().Contains("tv-"))
		mCertUSA = string.Empty;
		
	  //Get all other ratings
      strAbsUrl = string.Empty;
      string strBody2 = GetPage(url.URL + "parentalguide#certification", "utf-8", out strAbsUrl);
      regexBlockPattern = @"<a\shref=""/search/title\?certificates=.*?</div>";
      Match mCert = Regex.Match(HttpUtility.HtmlDecode(strBody2), regexBlockPattern, RegexOptions.Singleline);
      string tempRating = Utils.stripHTMLtags(mCert.Value).Replace(" /", " |");
      //User locale
      string land = System.Globalization.CultureInfo.CurrentCulture.EnglishName;
      land = land.Substring(land.LastIndexOf("(") + 1).Replace(")", "").Trim();
      string landcode = System.Globalization.CultureInfo.CurrentCulture.Name;
      landcode = landcode.Substring(landcode.LastIndexOf("-") + 1).Trim();
      //Try to find rating according user country
      char[] splitter = {'|'};
      string[] landRating = tempRating.Split(splitter);
      if (landRating.Length > 0)
      {
        for (int i = 0; i < landRating.Length; ++i)
        {
          string mpaRating = landRating[i];

          //Country check - IMDB is not so ISO oriented
          if (mpaRating.Contains("UK:"))
            mpaRating = mpaRating.Replace("UK:", "United Kingdom:");
          //

          if (mpaRating.Contains(land) | mpaRating.Contains(landcode))
          {
            if (mpaRating.Contains("("))
              mpaRating = mpaRating.Substring(0, mpaRating.LastIndexOf("("));
            movieDetails.MPARating = mpaRating.Substring(mpaRating.IndexOf(":") + 1).Trim();
            break;
          }
        }
        // No user country rating, try to set default as USA (if found in cert. list and not in  main page)
        if (mpaRating.Contains("USA:") && !mpaRating.ToLower().Contains("unrated") && !mpaRating.ToLower().Contains("approved") 
									   && !mpaRating.ToLower().Contains("tv-"))
        {
          for (int i = 0; i < landRating.Length; ++i)
          {
            string mpaRating = landRating[i];
             if (mpaRating.Contains("USA:") && !mpaRating.ToLower().Contains("unrated") && !mpaRating.ToLower().Contains("approved"))
            {
              if (mpaRating.Contains("("))
                mpaRating = mpaRating.Substring(0, mpaRating.IndexOf("("));
              movieDetails.MPARating = mpaRating.Substring(mpaRating.IndexOf(":") + 1).Trim();
			  break;
            }
          }
		}
		// No user country but IMDB usa rating from main page is there
        if (movieDetails.MPARating == string.Empty)
          movieDetails.MPARating = mCertUSA;
		// No user country or IMDB USA, show all
        if (movieDetails.MPARating == string.Empty)
		  movieDetails.MPARating = tempRating.Trim();
      }

      // Runtime
      regexPattern =
        "<h5>Runtime:</h5>.*?(?<movieRuntime>\\d+)\\smin\\s+|(?<movieRuntime>\\d+)\\smin&nbsp;&nbsp;-&nbsp;&nbsp;";
      int runtime;
      if (int.TryParse(Regex.Match(strBody, regexPattern).Groups["movieRuntime"].Value,out runtime))
      {
        movieDetails.RunTime = runtime;
      }

      // Tagline
      regexPattern =
        @"<h5>Tagline.</h5>[^>]+>[^\r]?(?<movieTagline>[^<]+)|<h4[^>]*>Tagline[s]?:</h4>[\s\f\r]*(?<movieTagline>[^<]+)";
      string tagline = Regex.Match(strBody, regexPattern).Groups["movieTagline"].Value.Replace("\n", string.Empty);;
      movieDetails.TagLine = HttpUtility.HtmlDecode(tagline);

      // Rating
      regexPattern = @"<b>(?<movieScore>\d+.\d+)/10</b>|<span[^<]*>(?<movieScore>\d+.\d+)<span>/10</span>";
      string rating = Regex.Match(strBody, regexPattern).Groups["movieScore"].Value.Replace('.', ',');
      movieDetails.Rating = (float) Double.Parse(rating);
      if (movieDetails.Rating > 10.0f)
        movieDetails.Rating /= 10.0f;

      // Votes
      regexPattern = @"""ratings""[^>]+>(?<moviePopularity>[^\s]+) votes</a>";
      string votes = Regex.Match(strBody, regexPattern).Groups["moviePopularity"].Value;
      movieDetails.Votes = votes.Replace(",", "");

      // Plot short
      regexPattern =
        @"<h5>Plot:</h5>[^>]+>\s+?(?<moviePlotShort>.+?)(?: \|)?\s+?<a|Users:.*?<p>(?<moviePlotShort>.+?)</p>";
      string shortPlot = Regex.Match(strBody, regexPattern, RegexOptions.Singleline).Groups["moviePlotShort"].Value;
      movieDetails.PlotOutline = HttpUtility.HtmlDecode(Utils.stripHTMLtags(shortPlot));

      // Plot long
      string strPlotUrl = "http://akas.imdb.com/title/" + movieDetails.IMDBNumber + "/plotsummary";
      try
      {
        string absoluteUri;
        string strPlotHTML = GetPage(strPlotUrl, "utf-8", out absoluteUri);
        if (0 != strPlotHTML.Length)
        {
          int iPlotStart = strPlotHTML.IndexOf("<p class=\"plotpar\">");
          if (iPlotStart >= 0)
          {
            iPlotStart += "<p class=\"plotpar\">".Length;

            int iPlotEnd = strPlotHTML.IndexOf("<i>", iPlotStart); // ends with <i> for person who wrote it or
            if (iPlotEnd < 0) iPlotEnd = strPlotHTML.IndexOf("</p>", iPlotStart); // </p> for end of paragraph

            if (iPlotEnd >= 0)
            {
              movieDetails.Plot = strPlotHTML.Substring(iPlotStart, iPlotEnd - iPlotStart);
              movieDetails.Plot = Utils.stripHTMLtags(movieDetails.Plot);
              movieDetails.Plot = HttpUtility.HtmlDecode(movieDetails.Plot); // remove HTML entities
            }
          }
        }
		if (movieDetails.Plot == string.Empty)
		   movieDetails.Plot = movieDetails.PlotOutline;
      }
      catch (Exception)
      {
      }

      //User review
	  regexPattern = "<a\\shref=\"/user/.*?<p>(?<review>.*?)</p>";
	  Match strReview = Regex.Match(HttpUtility.HtmlDecode(strBody), regexPattern, RegexOptions.Singleline);
	  if (strReview.Success)
	  {
	  	 string review =
  	  	   Utils.stripHTMLtags(strReview.Groups["review"].Value.Replace("\n", " ").Trim());
	  	 movieDetails.UserReview = HttpUtility.HtmlDecode(review);
	  }
	  return true;
    }
    catch (Exception) {}
    return false;
  }

  string IIMDBScriptGrabber.GetName()
  {
    return "IMDB with AKA";
  }

  string IIMDBScriptGrabber.GetLanguage()
  {
    return "EN";
  }

  private string GetPage(string strUrl, string strEncode, out string absoluteUri)
  {
    string strBody = string.Empty;
    absoluteUri = string.Empty;
    Stream receiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      //Log.Info("IMDB: get page:{0}", strURL);
      WebRequest req = WebRequest.Create(strUrl);

      result = req.GetResponse();
      receiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = System.Text.Encoding.GetEncoding(strEncode);
      sr = new StreamReader(receiveStream, encode);
      strBody = sr.ReadToEnd();

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception ex)
    {
      MediaPortal.GUI.Library.Log.Error("Error retreiving WebPage: {0} Encoding:{1} err:{2} stack:{3}", strUrl,
                                        strEncode, ex.Message, ex.StackTrace);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception)
        {
        }
      }
      if (receiveStream != null)
      {
        try
        {
          receiveStream.Close();
        }
        catch (Exception)
        {
        }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception)
        {
        }
      }
    }
    return strBody;
  }
}
