//css_reference "core.dll";
//css_reference "Databases.dll";
//css_reference "utils.dll";

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Net;
using System.Collections;
using System.Web;
using System.Text.RegularExpressions;
using MediaPortal.Util;

// change to Grabber, this for avoid to load by mediaportal
class Grabber : MediaPortal.Video.Database.IIMDBScriptGrabber
{
    public Grabber()
    {
    }

  void MediaPortal.Video.Database.IIMDBScriptGrabber.FindFilm(string strSearch, int iLimit, ArrayList elements)
  {
  	  String BaseURL = "http://www.seret.co.il/movies/";
      String SearchURL1 = BaseURL + "l_movies.asp?searchbar=";
      String SearchURL2 = BaseURL + "index.asp?catCase=7&ArchiveList=true&searchbar2=";
      String SearchEncode = "windows-1255";
      String ListStart = " ששמם מכיל את צירוף האותיות:";
      String ListReg   = "<td.*?><a href=\"(.*)\">(.*)</a> ? - (.*)</td>";
      String ListEnd   = "חזרה לחיפוש סרטים";
      
      try
      {
	      // 1. Search the movie
	      string absoluteUri;
	      String HTML = GetPage(SearchURL1 + strSearch, SearchEncode, out absoluteUri);

	      // 2. Cut off the List section
	      int startPos = HTML.IndexOf(ListStart);
	      if (startPos > 0)
	      {
	      	startPos+=ListStart.Length;
	      	int endPos = HTML.IndexOf(ListEnd, startPos);
	      	if (endPos > 0)
	      	{
	      		String resultStr = HTML.Substring(startPos, endPos - startPos);
	      		
	      		// 3. Search for results
	      		Match results = Regex.Match(resultStr, ListReg);
			    while (results.Success && elements.Count < iLimit)
			    {
			    	// 3.1 if a result was found add it to the elements list
			    	String strURL = BaseURL + results.Groups[1].Value;
			        String strTitle = results.Groups[2].Value;
			        String strEnglishTitle = results.Groups[3].Value;
			        MediaPortal.Video.Database.IMDB.IMDBUrl url = new MediaPortal.Video.Database.IMDB.IMDBUrl(strURL, strTitle + " (seret.co.il)", "seret_co_il");
			        elements.Add(url);
			        
			        results = results.NextMatch();
			    }  
	      	}
	      }
	      
	      // 3. Search in archive
	      HTML = GetPage(SearchURL2 + strSearch, SearchEncode, out absoluteUri);

	      // 4. Cut off the List section
	      startPos = HTML.IndexOf(ListStart);
	      if (startPos > 0)
	      {
	      	startPos+=ListStart.Length;
	      	int endPos = HTML.IndexOf(ListEnd, startPos);
	      	if (endPos > 0)
	      	{
	      		String resultStr = HTML.Substring(startPos, endPos - startPos);
	      		
	      		// 3. Search for results
	      		Match results = Regex.Match(resultStr, ListReg);
			    while (results.Success && elements.Count < iLimit)
			    {
			    	// 3.1 if a result was found add it to the elements list
			    	String strURL = BaseURL + results.Groups[1].Value;
			        String strTitle = results.Groups[2].Value;
			        String strEnglishTitle = results.Groups[3].Value;
			        MediaPortal.Video.Database.IMDB.IMDBUrl url = new MediaPortal.Video.Database.IMDB.IMDBUrl(strURL, strTitle + " (seret.co.il)", "seret_co_il");
			        elements.Add(url);
			        
			        results = results.NextMatch();
			    }  
	      	}
	      }	      
      }
      catch (Exception ex)
      {
      	MediaPortal.GUI.Library.Log.Error("exception for lookup of {0} err:{1} stack:{2}",strSearch, ex.Message, ex.StackTrace);
      }
  }


  bool MediaPortal.Video.Database.IIMDBScriptGrabber.GetDetails(MediaPortal.Video.Database.IMDB.IMDBUrl url, ref MediaPortal.Video.Database.IMDBMovie movieDetails)
  {
  	String BaseURL = "http://www.seret.co.il/movies/";
  	String detailsEncode = "windows-1255";
  	String detailsStart = "<A HREF=\"index.asp?";
  	String detailsEnd = "<a name=1></a>";
  	String titleReg = "alt=\"(.*) - פרטי סרט : (.*)\" BORDER=0></A></td> ";
  	String yearReg = "<td.*>.* / (\\d*)</td>.*<td.*>מקום/שנה:</td>";
  	String genreReg = "<A HREF=\".*\">(.*)</A></td>.*<td.*>ז'אנר:</td>";
  	String votesReg = "";
  	String top250Reg = "";
  	String tagLineReg = "";
	String plotOutlineReg = "";
	String thumbURLReg = "<IMG SRC=\"(.*)\" width=150";
	String plotReg = "<b>תקציר הסרט .*?</b></td></tr>.*<tr*><td.*>(.*).&nbsp;</td></tr>.*<tr><td>&nbsp;</td></tr>";
	String directorReg = "name=(.*)\">(.*)</a>&nbsp;</td>.*<td.*>במאי:</td>";
	String scriptReg = "תסריט: (.*), הפקה:";
	String castSectionReg = "במאי:</td>.*</tr>.*<tr>.*<td (.*)<td.*>שחקנים:</td>";
	String castReg = "<a href=\"../actors/index.asp\\?catCase=6&T=a&name=(.*?)\">.*?</a>";
	String runtimeReg = "<td width=160 class=\"text\" align=right>(\\d*) דקות</td> ";
	String MPARatingReg = "alt=\".* - פרטי סרט : (.*)\" BORDER=0></A></td> ";
  	
  	try
    {
	    // preces the web page defined by the url
	    // 1. Search the movie
	    string absoluteUri;
	    String HTML = GetPage(url.URL , detailsEncode, out absoluteUri);
	    
	    int startPos = HTML.IndexOf(detailsStart);
	      if (startPos > 0)
	      {
	      	startPos+=detailsStart.Length;
	      	int endPos = HTML.IndexOf(detailsEnd, startPos);
	      	if (endPos > 0)
	      	{
	      		String resultStr = HTML.Substring(startPos, endPos - startPos);
	      		
	      		// remove newline characters
	      		resultStr = resultStr.Replace("\n"," ");
	      		resultStr = resultStr.Replace("\r"," ");
	      		
	      		//MediaPortal.GUI.Library.Log.Info("{0}",resultStr);
			    // then fill the database
			    // movieDetails.Title
			    Match results = Regex.Match(resultStr, titleReg);
			    if (results.Success)
			    {
			    	movieDetails.Title = results.Groups[1].Value;
			    }
			    
			    // movieDetails.Year
			    results = Regex.Match(resultStr, yearReg);
			    if (results.Success)
			    {
			    	//MediaPortal.GUI.Library.Log.Info("{0}",results.Groups[1].Value);
			    	try 
			    	{
			    		movieDetails.Year = int.Parse(results.Groups[1].Value);
			    	}
			    	catch (Exception)
			    	{
			    		;
			    	}
			    }
			    
			    // movieDetails.Genre 
			    results = Regex.Match(resultStr, genreReg);
			    if (results.Success)
			    {
			    	movieDetails.Genre = results.Groups[1].Value;
			    }
			    
			    // movieDetails.Votes
			    results = Regex.Match(resultStr, votesReg);
			    if (results.Success)
			    {
			    	movieDetails.Votes = results.Groups[1].Value;
			    }		
			    
			    // movieDetails.Top250
			    results = Regex.Match(resultStr, top250Reg);
			    if (results.Success)
			    {
			    	try 
			    	{
			    		movieDetails.Top250 = int.Parse(results.Groups[1].Value);
			    	}
			    	catch (Exception)
			    	{
			    		;
			    	}
			    }
			    
			    // movieDetails.TagLine
			    results = Regex.Match(resultStr, tagLineReg);
			    if (results.Success)
			    {
			    	movieDetails.TagLine = results.Groups[1].Value;
			    }
			    
			    // movieDetails.PlotOutline
			    results = Regex.Match(resultStr, plotOutlineReg);
			    if (results.Success)
			    {
			    	movieDetails.PlotOutline = results.Groups[1].Value;
			    }
			    
			    // movieDetails.ThumbURL
			    results = Regex.Match(resultStr, thumbURLReg);
			    if (results.Success)
			    {
			    	movieDetails.ThumbURL = BaseURL + results.Groups[1].Value;
			    }
			    
			    // movieDetails.Plot
			    results = Regex.Match(resultStr, plotReg);
			    if (results.Success)
			    {
			    	movieDetails.Plot = results.Groups[1].Value;
			    }
			
			    // movieDetails.Director
			    results = Regex.Match(resultStr, directorReg);
			    if (results.Success)
			    {
			    	movieDetails.Director = results.Groups[1].Value;
			    }
			    
			    // movieDetails.WritingCredits
			    results = Regex.Match(resultStr, scriptReg);
			    if (results.Success)
			    {
			    	movieDetails.WritingCredits = results.Groups[1].Value;
			    }
			    
			    // movieDetails.Cast
			    results = Regex.Match(resultStr, castSectionReg);
			    if (results.Success)
			    {
			    	String castSection = results.Groups[1].Value;
			    	results = Regex.Match(castSection, castReg);
			    	String cast = "";
			    	while (results.Success)
			    	{
			    		cast += results.Groups[1].Value;
			    		// if there is an "as" part
			    		if (results.Groups.Count > 2)
			    		{
			    			cast += "as " + results.Groups[2].Value;
			    		}
			    		
			    		results = results.NextMatch();
			    		if (results.Success)
			    		{
			    			cast += "\n";
			    		}
			    	}
			    	movieDetails.Cast = cast;
			    }
			    
			    // movieDetails.RunTime = ....
			    results = Regex.Match(resultStr, runtimeReg);
			    if (results.Success)
			    {
			    	try 
			    	{
			    		movieDetails.RunTime = int.Parse(results.Groups[1].Value);
			    	}
			    	catch (Exception)
			    	{
			    		;
			    	}
			    }
			    
			    // movieDetails.MPARating = ......
			    results = Regex.Match(resultStr, MPARatingReg);
			    if (results.Success)
			    {
			    	movieDetails.MPARating = results.Groups[1].Value;
			    }
	      	}
	      	else
	      	{
	      		return false;
	      	}
	      }
	      else
	      {
	      	return false;
	      }
	      return true;
      }
      catch (Exception ex)
      {
      	MediaPortal.GUI.Library.Log.Error("exception for lookup details of {0} err:{1} stack:{2}",url.URL, ex.Message, ex.StackTrace);
      	return false;
      }
  }

  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetName()
  {
    return "seret.co.il";
  }
 
  string MediaPortal.Video.Database.IIMDBScriptGrabber.GetLanguage()
  {
    return "hebrew";
  }

  // a general procedure to get a web page 
  // use like :
  //    string absoluteUri;
  //    string strURL = "http://us.imdb.com/Tsearch?title=" + strSearch;
  //    string strBody = GetPage(strURL, "utf-8", out absoluteUri);

  private string GetPage(string strURL, string strEncode, out string absoluteUri)
  {
    string strBody = "";
    absoluteUri = String.Empty;
    Stream ReceiveStream = null;
    StreamReader sr = null;
    WebResponse result = null;
    try
    {
      // Make the Webrequest
      //Log.Info("IMDB: get page:{0}", strURL);
      WebRequest req = WebRequest.Create(strURL);

      result = req.GetResponse();
      ReceiveStream = result.GetResponseStream();

      // Encoding: depends on selected page
      Encoding encode = System.Text.Encoding.GetEncoding(strEncode);
      sr = new StreamReader(ReceiveStream, encode);
      strBody = sr.ReadToEnd();

      absoluteUri = result.ResponseUri.AbsoluteUri;
    }
    catch (Exception)
    {
      //Log.Error("Error retreiving WebPage: {0} Encoding:{1} err:{2} stack:{3}", strURL, strEncode, ex.Message, ex.StackTrace);
    }
    finally
    {
      if (sr != null)
      {
        try
        {
          sr.Close();
        }
        catch (Exception)
        {
        }
      }
      if (ReceiveStream != null)
      {
        try
        {
          ReceiveStream.Close();
        }
        catch (Exception)
        {
        }
      }
      if (result != null)
      {
        try
        {
          result.Close();
        }
        catch (Exception)
        {
        }
      }
    }
    return strBody;
  } // END GetPage()

}
