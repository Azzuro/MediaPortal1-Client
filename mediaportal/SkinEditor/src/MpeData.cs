//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Mpe {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class MpeData : DataSet {
        
        private MpeDbStringDataTable tableMpeDbString;
        
        private FontDataDataTable tableFontData;
        
        public MpeData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected MpeData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MpeDbString"] != null)) {
                    this.Tables.Add(new MpeDbStringDataTable(ds.Tables["MpeDbString"]));
                }
                if ((ds.Tables["FontData"] != null)) {
                    this.Tables.Add(new FontDataDataTable(ds.Tables["FontData"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MpeDbStringDataTable MpeDbString {
            get {
                return this.tableMpeDbString;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FontDataDataTable FontData {
            get {
                return this.tableFontData;
            }
        }
        
        public override DataSet Clone() {
            MpeData cln = ((MpeData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["MpeDbString"] != null)) {
                this.Tables.Add(new MpeDbStringDataTable(ds.Tables["MpeDbString"]));
            }
            if ((ds.Tables["FontData"] != null)) {
                this.Tables.Add(new FontDataDataTable(ds.Tables["FontData"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMpeDbString = ((MpeDbStringDataTable)(this.Tables["MpeDbString"]));
            if ((this.tableMpeDbString != null)) {
                this.tableMpeDbString.InitVars();
            }
            this.tableFontData = ((FontDataDataTable)(this.Tables["FontData"]));
            if ((this.tableFontData != null)) {
                this.tableFontData.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "MpeData";
            this.Prefix = "";
            this.Namespace = "http://mediaportaleditor/MpeData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMpeDbString = new MpeDbStringDataTable();
            this.Tables.Add(this.tableMpeDbString);
            this.tableFontData = new FontDataDataTable();
            this.Tables.Add(this.tableFontData);
        }
        
        private bool ShouldSerializeMpeDbString() {
            return false;
        }
        
        private bool ShouldSerializeFontData() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MpeDbStringRowChangeEventHandler(object sender, MpeDbStringRowChangeEvent e);
        
        public delegate void FontDataRowChangeEventHandler(object sender, FontDataRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MpeDbStringDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnReference;
            
            private DataColumn columnValue;
            
            internal MpeDbStringDataTable() : 
                    base("MpeDbString") {
                this.InitClass();
            }
            
            internal MpeDbStringDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ReferenceColumn {
                get {
                    return this.columnReference;
                }
            }
            
            internal DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            public MpeDbStringRow this[int index] {
                get {
                    return ((MpeDbStringRow)(this.Rows[index]));
                }
            }
            
            public event MpeDbStringRowChangeEventHandler MpeDbStringRowChanged;
            
            public event MpeDbStringRowChangeEventHandler MpeDbStringRowChanging;
            
            public event MpeDbStringRowChangeEventHandler MpeDbStringRowDeleted;
            
            public event MpeDbStringRowChangeEventHandler MpeDbStringRowDeleting;
            
            public void AddMpeDbStringRow(MpeDbStringRow row) {
                this.Rows.Add(row);
            }
            
            public MpeDbStringRow AddMpeDbStringRow(int Id, string Reference, string Value) {
                MpeDbStringRow rowMpeDbStringRow = ((MpeDbStringRow)(this.NewRow()));
                rowMpeDbStringRow.ItemArray = new object[] {
                        Id,
                        Reference,
                        Value};
                this.Rows.Add(rowMpeDbStringRow);
                return rowMpeDbStringRow;
            }
            
            public MpeDbStringRow FindById(int Id) {
                return ((MpeDbStringRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MpeDbStringDataTable cln = ((MpeDbStringDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MpeDbStringDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnReference = this.Columns["Reference"];
                this.columnValue = this.Columns["Value"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnReference = new DataColumn("Reference", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReference);
                this.columnValue = new DataColumn("Value", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnValue);
                this.Constraints.Add(new UniqueConstraint("StringDesignerDataPK", new DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.Unique = true;
            }
            
            public MpeDbStringRow NewMpeDbStringRow() {
                return ((MpeDbStringRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MpeDbStringRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MpeDbStringRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MpeDbStringRowChanged != null)) {
                    this.MpeDbStringRowChanged(this, new MpeDbStringRowChangeEvent(((MpeDbStringRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MpeDbStringRowChanging != null)) {
                    this.MpeDbStringRowChanging(this, new MpeDbStringRowChangeEvent(((MpeDbStringRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MpeDbStringRowDeleted != null)) {
                    this.MpeDbStringRowDeleted(this, new MpeDbStringRowChangeEvent(((MpeDbStringRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MpeDbStringRowDeleting != null)) {
                    this.MpeDbStringRowDeleting(this, new MpeDbStringRowChangeEvent(((MpeDbStringRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMpeDbStringRow(MpeDbStringRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MpeDbStringRow : DataRow {
            
            private MpeDbStringDataTable tableMpeDbString;
            
            internal MpeDbStringRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMpeDbString = ((MpeDbStringDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableMpeDbString.IdColumn]));
                }
                set {
                    this[this.tableMpeDbString.IdColumn] = value;
                }
            }
            
            public string Reference {
                get {
                    try {
                        return ((string)(this[this.tableMpeDbString.ReferenceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMpeDbString.ReferenceColumn] = value;
                }
            }
            
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableMpeDbString.ValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMpeDbString.ValueColumn] = value;
                }
            }
            
            public bool IsReferenceNull() {
                return this.IsNull(this.tableMpeDbString.ReferenceColumn);
            }
            
            public void SetReferenceNull() {
                this[this.tableMpeDbString.ReferenceColumn] = System.Convert.DBNull;
            }
            
            public bool IsValueNull() {
                return this.IsNull(this.tableMpeDbString.ValueColumn);
            }
            
            public void SetValueNull() {
                this[this.tableMpeDbString.ValueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MpeDbStringRowChangeEvent : EventArgs {
            
            private MpeDbStringRow eventRow;
            
            private DataRowAction eventAction;
            
            public MpeDbStringRowChangeEvent(MpeDbStringRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MpeDbStringRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FontDataDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnIndex;
            
            private DataColumn columnX;
            
            private DataColumn columnY;
            
            private DataColumn columnWidth;
            
            private DataColumn columnHeight;
            
            internal FontDataDataTable() : 
                    base("FontData") {
                this.InitClass();
            }
            
            internal FontDataDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IndexColumn {
                get {
                    return this.columnIndex;
                }
            }
            
            internal DataColumn XColumn {
                get {
                    return this.columnX;
                }
            }
            
            internal DataColumn YColumn {
                get {
                    return this.columnY;
                }
            }
            
            internal DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            internal DataColumn HeightColumn {
                get {
                    return this.columnHeight;
                }
            }
            
            public FontDataRow this[int index] {
                get {
                    return ((FontDataRow)(this.Rows[index]));
                }
            }
            
            public event FontDataRowChangeEventHandler FontDataRowChanged;
            
            public event FontDataRowChangeEventHandler FontDataRowChanging;
            
            public event FontDataRowChangeEventHandler FontDataRowDeleted;
            
            public event FontDataRowChangeEventHandler FontDataRowDeleting;
            
            public void AddFontDataRow(FontDataRow row) {
                this.Rows.Add(row);
            }
            
            public FontDataRow AddFontDataRow(int Index, int X, int Y, int Width, int Height) {
                FontDataRow rowFontDataRow = ((FontDataRow)(this.NewRow()));
                rowFontDataRow.ItemArray = new object[] {
                        Index,
                        X,
                        Y,
                        Width,
                        Height};
                this.Rows.Add(rowFontDataRow);
                return rowFontDataRow;
            }
            
            public FontDataRow FindByIndex(int Index) {
                return ((FontDataRow)(this.Rows.Find(new object[] {
                            Index})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                FontDataDataTable cln = ((FontDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new FontDataDataTable();
            }
            
            internal void InitVars() {
                this.columnIndex = this.Columns["Index"];
                this.columnX = this.Columns["X"];
                this.columnY = this.Columns["Y"];
                this.columnWidth = this.Columns["Width"];
                this.columnHeight = this.Columns["Height"];
            }
            
            private void InitClass() {
                this.columnIndex = new DataColumn("Index", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIndex);
                this.columnX = new DataColumn("X", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnX);
                this.columnY = new DataColumn("Y", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnY);
                this.columnWidth = new DataColumn("Width", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWidth);
                this.columnHeight = new DataColumn("Height", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeight);
                this.Constraints.Add(new UniqueConstraint("FontDataPrimaryKey", new DataColumn[] {
                                this.columnIndex}, true));
                this.columnIndex.AllowDBNull = false;
                this.columnIndex.Unique = true;
            }
            
            public FontDataRow NewFontDataRow() {
                return ((FontDataRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new FontDataRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(FontDataRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FontDataRowChanged != null)) {
                    this.FontDataRowChanged(this, new FontDataRowChangeEvent(((FontDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FontDataRowChanging != null)) {
                    this.FontDataRowChanging(this, new FontDataRowChangeEvent(((FontDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FontDataRowDeleted != null)) {
                    this.FontDataRowDeleted(this, new FontDataRowChangeEvent(((FontDataRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FontDataRowDeleting != null)) {
                    this.FontDataRowDeleting(this, new FontDataRowChangeEvent(((FontDataRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveFontDataRow(FontDataRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FontDataRow : DataRow {
            
            private FontDataDataTable tableFontData;
            
            internal FontDataRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableFontData = ((FontDataDataTable)(this.Table));
            }
            
            public int Index {
                get {
                    return ((int)(this[this.tableFontData.IndexColumn]));
                }
                set {
                    this[this.tableFontData.IndexColumn] = value;
                }
            }
            
            public int X {
                get {
                    try {
                        return ((int)(this[this.tableFontData.XColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFontData.XColumn] = value;
                }
            }
            
            public int Y {
                get {
                    try {
                        return ((int)(this[this.tableFontData.YColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFontData.YColumn] = value;
                }
            }
            
            public int Width {
                get {
                    try {
                        return ((int)(this[this.tableFontData.WidthColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFontData.WidthColumn] = value;
                }
            }
            
            public int Height {
                get {
                    try {
                        return ((int)(this[this.tableFontData.HeightColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFontData.HeightColumn] = value;
                }
            }
            
            public bool IsXNull() {
                return this.IsNull(this.tableFontData.XColumn);
            }
            
            public void SetXNull() {
                this[this.tableFontData.XColumn] = System.Convert.DBNull;
            }
            
            public bool IsYNull() {
                return this.IsNull(this.tableFontData.YColumn);
            }
            
            public void SetYNull() {
                this[this.tableFontData.YColumn] = System.Convert.DBNull;
            }
            
            public bool IsWidthNull() {
                return this.IsNull(this.tableFontData.WidthColumn);
            }
            
            public void SetWidthNull() {
                this[this.tableFontData.WidthColumn] = System.Convert.DBNull;
            }
            
            public bool IsHeightNull() {
                return this.IsNull(this.tableFontData.HeightColumn);
            }
            
            public void SetHeightNull() {
                this[this.tableFontData.HeightColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class FontDataRowChangeEvent : EventArgs {
            
            private FontDataRow eventRow;
            
            private DataRowAction eventAction;
            
            public FontDataRowChangeEvent(FontDataRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public FontDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
